{
    "AccountInfoDouble": {
        "group": 2,
        "label": "AccountInfoDouble",
        "body": "AccountInfoDouble$0",
        "code": [
            {
                "label": "AccountInfoDouble(ENUM_ACCOUNT_INFO_DOUBLE property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства. Значение может быть одним из значений ENUM_ACCOUNT_INFO_DOUBLE."
            ],
            "en": [
                "property_id  [in]  Property identifier. The value can be one of the values of ENUM_ACCOUNT_INFO_DOUBLE."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение соответствующего свойства счета.",
            "en": "(double) Returns the value of the appropriate account property."
        }
    },
    "AccountInfoInteger": {
        "group": 2,
        "label": "AccountInfoInteger",
        "body": "AccountInfoInteger$0",
        "code": [
            {
                "label": "AccountInfoInteger(ENUM_ACCOUNT_INFO_INTEGER property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства. Значение может быть одним из значений ENUM_ACCOUNT_INFO_INTEGER."
            ],
            "en": [
                "property_id  [in]  Property identifier. The value can be one of the values of ENUM_ACCOUNT_INFO_INTEGER."
            ]
        },
        "description": {
            "ru": "(long) Возвращает значение соответствующего свойства счета.",
            "en": "(long) Returns the value of the appropriate account property."
        }
    },
    "AccountInfoString": {
        "group": 2,
        "label": "AccountInfoString",
        "body": "AccountInfoString$0",
        "code": [
            {
                "label": "AccountInfoString(ENUM_ACCOUNT_INFO_STRING property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства. Значение может быть одним из значений ENUM_ACCOUNT_INFO_STRING."
            ],
            "en": [
                "property_id  [in]  Property identifier. The value can be one of the values of ENUM_ACCOUNT_INFO_STRING."
            ]
        },
        "description": {
            "ru": "(string) Возвращает значение соответствующего свойства счета.",
            "en": "(string) Returns the value of the appropriate account property."
        }
    },
    "acos": {
        "group": 2,
        "label": "acos",
        "body": "acos$0",
        "code": [
            {
                "label": "acos(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Значение value между -1 и 1, арккосинус которого должен быть вычислен."
            ],
            "en": [
                "val  [in]  The val value between -1 and 1, the arc cosine of which is to be calculated."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение арккосинуса x в диапазоне 0 к π в радианах.",
            "en": "(double) The function returns the arccosine of x within the range 0 to π in radians."
        }
    },
    "Alert": {
        "group": 2,
        "label": "Alert",
        "body": "Alert$0",
        "code": [
            {
                "label": "Alert(any values)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 1,
        "hm": 0,
        "parameters": {
            "ru": [
                "values  [in]  Любые значения, разделенные запятыми. Для разделения выводимой информации на несколько строк можно использовать символ перевода строки \"\\n\" либо \"\\r\\n\". Количество параметров не может превышать 64."
            ],
            "en": [
                "values  [in]  Any values separated by commas. To split the information output in several lines you can use the line feed character \"\\n\" or \"\\r\\n\". The number of parameters can not exceed 64."
            ]
        },
        "description": {
            "ru": "(void) Отображает диалоговое окно, содержащее пользовательские данные.",
            "en": "(void) Displays a message in a separate window."
        }
    },
    "ArrayBsearch": {
        "group": 2,
        "label": "ArrayBsearch",
        "body": "ArrayBsearch$0",
        "code": [
            {
                "label": "ArrayBsearch(const double& array[], double value)",
                "description": {
                    "ru": "Для поиска в массиве типа double",
                    "en": "For searching in an array of double type"
                }
            },
            {
                "label": "ArrayBsearch(const float& array[], float value)",
                "description": {
                    "ru": "Для поиска в массиве типа float",
                    "en": "For searching in an array of float type"
                }
            },
            {
                "label": "ArrayBsearch(const long& array[], long value)",
                "description": {
                    "ru": "Для поиска в массиве типа long",
                    "en": "For searching in an array of long type"
                }
            },
            {
                "label": "ArrayBsearch(const int& array[], int value)",
                "description": {
                    "ru": "Для поиска в массиве типа int",
                    "en": "For searching in an array of int type"
                }
            },
            {
                "label": "ArrayBsearch(const short& array[], short value)",
                "description": {
                    "ru": "Для поиска в массиве типа short",
                    "en": "For searching in an array of short type"
                }
            },
            {
                "label": "ArrayBsearch(const char& array[], char value)",
                "description": {
                    "ru": "Для поиска в массиве типа char",
                    "en": "For searching in an array of char type"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Числовой массив для поиска.",
                "value  [in]  Значение для поиска."
            ],
            "en": [
                "array[]  [in]  Numeric array for search.",
                "value  [in]  Value for search."
            ]
        },
        "description": {
            "ru": "(int) Ищет указанное значение в отсортированном по возрастанию многомерном числовом массиве. Поиск производится по элементам первого измерения.",
            "en": "(int) Searches for a specified value in a multidimensional numeric array sorted ascending. Search is performed through the elements of the first dimension."
        }
    },
    "ArrayCompare": {
        "group": 2,
        "label": "ArrayCompare",
        "body": "ArrayCompare$0",
        "code": [
            {
                "label": "ArrayCompare(const void& array1[], const void& array2[], int start1, int start2, int count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array1[]  [in]  Первый массив.",
                "array2[]  [in]  Второй массив.",
                "start1  [in]  Начальный индекс элемента в первом массиве, с которого начнется сравнение. По умолчанию стартовый индекс - 0.",
                "start2  [in]  Начальный индекс элемента во втором массиве, с которого начнется сравнение. По умолчанию стартовый индекс - 0.",
                "count  [in]  Количество элементов, которые нужно сравнить. По умолчанию в сравнении участвуют все элементы обоих массивов (count=WHOLE_ARRAY)."
            ],
            "en": [
                "array1[]  [in]  First array.",
                "array2[]  [in]  Second array.",
                "start1  [in]  The element's initial index in the first array, from which comparison starts. The default start index - 0.",
                "start2  [in]  The element's initial index in the second array, from which comparison starts. The default start index - 0.",
                "count  [in]  Number of elements to be compared. All elements of both arrays participate in comparison by default (count=WHOLE_ARRAY)."
            ]
        },
        "description": {
            "ru": "(int) Возвращает результат сравнения двух массивов одинакового типа. Может использоваться для сравнения массивов простых типов или пользовательских структур, не имеющих сложных объектов - то есть не содержащих строк, динамических массивов, классов или других структур содержащих сложные объекты.",
            "en": "(int) The function returns the result of comparing two arrays of the same type. It can be used to compare arrays of simple types or custom structures without complex objects, that is the custom structures that do not contain strings, dynamic arrays, classes and other structures with complex objects."
        }
    },
    "ArrayCopy": {
        "group": 2,
        "label": "ArrayCopy",
        "body": "ArrayCopy$0",
        "code": [
            {
                "label": "ArrayCopy(void& dst_array[], const void& src_array[], int dst_start, int src_start, int count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "dst_array[]  [out]  Массив-приемник.",
                "src_array[]  [in]  Массив-источник.",
                "dst_start  [in]  Начальный индекс для приемного массива. По умолчанию, стартовый индекс - 0.",
                "src_start  [in]  Начальный индекс для исходного массива. По умолчанию, стартовый индекс - 0.",
                "count  [in]  Количество элементов, которые нужно скопировать. По умолчанию копируется весь массив (count=WHOLE_ARRAY)."
            ],
            "en": [
                "dst_array[]  [out]  Destination array",
                "src_array[]  [in]  Source array",
                "dst_start  [in]  Starting index from the destination array. By default, start index is 0.",
                "src_start  [in]  Starting index for the source array. By default, start index is 0.",
                "count  [in]  Number of elements that should be copied. By default, the whole array is copied (count=WHOLE_ARRAY)."
            ]
        },
        "description": {
            "ru": "(int) Производит копирование одного массива в другой.",
            "en": "(int) It copies an array into another one."
        }
    },
    "ArrayFill": {
        "group": 2,
        "label": "ArrayFill",
        "body": "ArrayFill$0",
        "code": [
            {
                "label": "ArrayFill(void& array[], int start, int count, void value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [out]  Массив простого типа (char, uchar, short, ushort, int, uint, long, ulong, bool, color, datetime, float, double).",
                "start  [in]  Индекс начального элемента (с какого элемента заполнять). При этом не учитывается установленный флаг серийности.",
                "count  [in]  Количество элементов, которое следует заполнить.",
                "value  [in]  Значение, которым заполняется массив."
            ],
            "en": [
                "array[]  [out]  Array of simple type (char, uchar, short, ushort, int, uint, long, ulong, bool, color, datetime, float, double).",
                "start  [in]  Starting index.  In such a case, specified AS_SERIES flag is ignored.",
                "count  [in]  Number of elements to fill.",
                "value  [in]  Value to fill the array with."
            ]
        },
        "description": {
            "ru": "(void) Заполняет числовой массив указанным значением.",
            "en": "(void) The function fills an array with the specified value."
        }
    },
    "ArrayFree": {
        "group": 2,
        "label": "ArrayFree",
        "body": "ArrayFree$0",
        "code": [
            {
                "label": "ArrayFree(void& array[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Динамический массив."
            ],
            "en": [
                "array[]  [in]  Dynamic array."
            ]
        },
        "description": {
            "ru": "(void) Освобождает буфер любого динамического массива и устанавливает размер нулевого измерения в 0.",
            "en": "(void) It frees up a buffer of any dynamic array and sets the size of the zero dimension to 0."
        }
    },
    "ArrayGetAsSeries": {
        "group": 2,
        "label": "ArrayGetAsSeries",
        "body": "ArrayGetAsSeries$0",
        "code": [
            {
                "label": "ArrayGetAsSeries(const void& array[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Проверяемый массив."
            ],
            "en": [
                "array  [in]  Checked array."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет направление индексации массива.",
            "en": "(bool) It checks direction of an array index."
        }
    },
    "ArrayInitialize": {
        "group": 2,
        "label": "ArrayInitialize",
        "body": "ArrayInitialize$0",
        "code": [
            {
                "label": "ArrayInitialize(char array[], char value)",
                "description": {
                    "ru": "Для инициализации массива типа char",
                    "en": "For initialization of an array of char type"
                }
            },
            {
                "label": "ArrayInitialize(short array[], short value)",
                "description": {
                    "ru": "Для инициализации массива типа short",
                    "en": "For initialization of an array of short type"
                }
            },
            {
                "label": "ArrayInitialize(int array[], int value)",
                "description": {
                    "ru": "Для инициализации массива типа int",
                    "en": "For initialization of an array of int type"
                }
            },
            {
                "label": "ArrayInitialize(long array[], long value)",
                "description": {
                    "ru": "Для инициализации массива типа long",
                    "en": "For initialization of an array of long type"
                }
            },
            {
                "label": "ArrayInitialize(float array[], float value)",
                "description": {
                    "ru": "Для инициализации массива типа float",
                    "en": "For initialization of an array of float type"
                }
            },
            {
                "label": "ArrayInitialize(double array[], double value)",
                "description": {
                    "ru": "Для инициализации массива типа double",
                    "en": "For initialization of an array of double type"
                }
            },
            {
                "label": "ArrayInitialize(bool array[], bool value)",
                "description": {
                    "ru": "Для инициализации массива типа bool",
                    "en": "For initialization of an array of bool type"
                }
            },
            {
                "label": "ArrayInitialize(uint array[], uint value)",
                "description": {
                    "ru": "Для инициализации массива типа uint",
                    "en": "For initialization of an array of uint type"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [out]  Числовой массив, который нужно инициализировать.",
                "value  [in]  Новое значение, которое нужно установить всем элементам массива."
            ],
            "en": [
                "array[]  [out]  Numeric array that should be initialized.",
                "value  [in]  New value that should be set to all array elements."
            ]
        },
        "description": {
            "ru": "(int) Инициализирует числовой массив указанным значением.",
            "en": "(int) The function initializes a numeric array by a preset value."
        }
    },
    "ArrayIsDynamic": {
        "group": 2,
        "label": "ArrayIsDynamic",
        "body": "ArrayIsDynamic$0",
        "code": [
            {
                "label": "ArrayIsDynamic(const void& array[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Проверяемый массив."
            ],
            "en": [
                "array[]  [in]  Checked array."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет, является ли массив динамическим.",
            "en": "(bool) The function checks whether an array is dynamic."
        }
    },
    "ArrayIsSeries": {
        "group": 2,
        "label": "ArrayIsSeries",
        "body": "ArrayIsSeries$0",
        "code": [
            {
                "label": "ArrayIsSeries(const void& array[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Проверяемый массив."
            ],
            "en": [
                "array[]  [in]  Checked array."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет, является ли массив таймсерией.",
            "en": "(bool) The function checks whether an array is a timeseries."
        }
    },
    "ArrayMaximum": {
        "group": 2,
        "label": "ArrayMaximum",
        "body": "ArrayMaximum$0",
        "code": [
            {
                "label": "ArrayMaximum(const void& array[], int start, int count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Числовой массив, в котором производится поиск.",
                "start  [in]  Начальный индекс для поиска.",
                "count  [in]  Количество элементов для поиска. По умолчанию, ищет во всем массиве (count=WHOLE_ARRAY)."
            ],
            "en": [
                "array[]  [in]  A numeric array, in which search is made.",
                "start  [in]  Index to start checking with.",
                "count  [in]  Number of elements for search. By default, searches in the entire array (count=WHOLE_ARRAY)."
            ]
        },
        "description": {
            "ru": "(int) Ищет максимальный элемент в первом измерении многомерного числового массива.",
            "en": "(int) Searches for the largest element in the first dimension of a multidimensional numeric array."
        }
    },
    "ArrayMinimum": {
        "group": 2,
        "label": "ArrayMinimum",
        "body": "ArrayMinimum$0",
        "code": [
            {
                "label": "ArrayMinimum(const void& array[], int start, int count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Числовой массив, в котором производится поиск.",
                "start  [in]  Начальный индекс для поиска.",
                "count  [in]  Количество элементов для поиска. По умолчанию, ищет во всем массиве (count=WHOLE_ARRAY)."
            ],
            "en": [
                "array[]  [in]  A numeric array, in which search is made.",
                "start  [in]  Index to start checking with.",
                "count  [in]  Number of elements for search. By default, searches in the entire array (count=WHOLE_ARRAY)."
            ]
        },
        "description": {
            "ru": "(int) Ищет минимальный  элемент в первом измерении многомерного числового массива.",
            "en": "(int) Searches for the lowest element in the first dimension of a multidimensional numeric array."
        }
    },
    "ArrayRange": {
        "group": 2,
        "label": "ArrayRange",
        "body": "ArrayRange$0",
        "code": [
            {
                "label": "ArrayRange(const void& array[], int rank_index)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Проверяемый массив.",
                "rank_index  [in]  Индекс измерения."
            ],
            "en": [
                "array[]  [in]  Checked array.",
                "rank_index  [in]  Index of dimension."
            ]
        },
        "description": {
            "ru": "(int) Возвращает число элементов в указанном измерении массива.",
            "en": "(int) The function returns the number of elements in a selected array dimension."
        }
    },
    "ArrayResize": {
        "group": 2,
        "label": "ArrayResize",
        "body": "ArrayResize$0",
        "code": [
            {
                "label": "ArrayResize(void& array[], int new_size, int reserve_size)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [out]  Массив для изменения размеров.",
                "new_size  [in]  Новый размер для первого измерения.",
                "reserve_size  [in]  Размер для дополнительного резерва."
            ],
            "en": [
                "array[]  [out] Array for changing sizes.",
                "new_size  [in]  New size for the first dimension.",
                "reserve_size  [in]  Distributed size to get reserve."
            ]
        },
        "description": {
            "ru": "(int) Устанавливает новый размер в первом измерении массива",
            "en": "(int) The function sets a new size for the first dimension"
        }
    },
    "ArraySetAsSeries": {
        "group": 2,
        "label": "ArraySetAsSeries",
        "body": "ArraySetAsSeries$0",
        "code": [
            {
                "label": "ArraySetAsSeries(const void& array[], bool flag)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in][out]  Числовой массив для установки.",
                "flag  [in]  Направление индексирования массива."
            ],
            "en": [
                "array[]  [in][out]  Numeric array to set.",
                "flag  [in]  Array indexing direction."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает флаг AS_SERIES указанному объекту динамического массива, индексация элементов массива будет производиться как в таймсериях.",
            "en": "(bool) The function sets the AS_SERIES flag to a selected object of a dynamic array, and elements will be indexed like in timeseries."
        }
    },
    "ArraySize": {
        "group": 2,
        "label": "ArraySize",
        "body": "ArraySize$0",
        "code": [
            {
                "label": "ArraySize(const void& array[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Массив любого типа."
            ],
            "en": [
                "array[]  [in]  Array of any type."
            ]
        },
        "description": {
            "ru": "(int) Возвращает количество элементов указанного массива.",
            "en": "(int) The function returns the number of elements of a selected array."
        }
    },
    "ArraySort": {
        "group": 2,
        "label": "ArraySort",
        "body": "ArraySort$0",
        "code": [
            {
                "label": "ArraySort(void& array[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in][out]  Числовой массив для сортировки."
            ],
            "en": [
                "array[]  [in][out]  Numeric array for sorting."
            ]
        },
        "description": {
            "ru": "(bool) Сортирует многомерный числовой массив по возрастанию значений в первом измерении.",
            "en": "(bool) Sorts the values in the first dimension of a multidimensional numeric array in the ascending order."
        }
    },
    "ArrayPrint": {
        "group": 2,
        "label": "ArrayPrint",
        "body": "ArrayPrint$0",
        "code": [
            {
                "label": "ArrayPrint(const void& array[], uint digits, const string separator, ulong start, ulong count, ulong flags)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Массив простого типа или простой структуры.",
                "digits  [in]  Количество знаков после запятой для вещественных типов. По умолчанию равно _Digits.",
                "separator  [in]  Разделитель между значениями полей элемента структуры. Значение по умолчанию NULL означает пустую строку, в этом случае разделителем является пробел.",
                "start  [in]  Индекс первого выводимого элемента массива.  По умолчанию выводится с нулевого индекса.",
                "count  [in]  Количество элементов массива, которые нужно вывести. По умолчанию выводится весь массив (count=WHOLE_ARRAY).",
                "flags  [in]  Комбинация флагов, задающая режим вывода."
            ],
            "en": [
                "array[]  [in]  Array of a simple type or a simple structure.",
                "digits  [in]  The number of decimal places for real types. The default value is _Digits.",
                "separator  [in]  Separator of the structure element field values. The default value NULL means an empty line. A space is used as a separator in that case.",
                "start  [in]  The index of the first printed array element.  It is printed from the zero index by default.",
                "count  [in]  Number of the array elements to be printed. The entire array is displayed by default (count=WHOLE_ARRAY).",
                "flags  [in]  Combination of flags setting the output mode."
            ]
        },
        "description": {
            "ru": "(void) Выводит в журнал массив простого типа или простой структуры.",
            "en": "(void) Prints an array of a simple type or a simple structure into journal."
        }
    },
    "ArrayInsert": {
        "group": 2,
        "label": "ArrayInsert",
        "body": "ArrayInsert$0",
        "code": [
            {
                "label": "ArrayInsert(void& dst_array[], const void& src_array[], uint dst_start, uint src_start, uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "dst_array[]  [in][out]  Массив-приемник, в который необходимо добавить элементы.",
                "src_array[]  [in]  Массив-источник, из которого необходимо добавить элементы.",
                "dst_start  [in]  Индекс в массиве-приемнике для вставки элементов из массива-источника.",
                "src_start  [in]  Индекс в массиве-приемнике, начиная с которого берутся элементы массива-источника для вставки.",
                "count  [in]  Количество добавляемых элементов из массива-источника. Значение WHOLE_ARRAY означает все элементы с указанного индекса до конца массива."
            ],
            "en": [
                "dst_array[]  [in][out]  Receiving array the elements should be added to.",
                "src_array[]  [in]  Source array the elements are to be added from.",
                "dst_start  [in]  Index in the receiving array for inserting elements from the source array.",
                "src_start  [in]  Index in the receiving array, starting from which the elements of the source array are taken for insertion.",
                "count  [in]  Number of elements to be added from the source array. The WHOLE_ARRAY means all elements from the specified index up to the end of the array."
            ]
        },
        "description": {
            "ru": "(bool) Вставляет в массив-приемник из массива-источника указанное число элементов, начиная с указанного индекса.",
            "en": "(bool) Inserts the specified number of elements from a source array to a receiving one starting from a specified index."
        }
    },
    "ArrayRemove": {
        "group": 2,
        "label": "ArrayRemove",
        "body": "ArrayRemove$0",
        "code": [
            {
                "label": "ArrayRemove(void& array[], uint start, uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in][out]  Массив.",
                "start  [in]  Индекс, начиная с которого удаляются элементы массива.",
                "count  [in]  Количество удаляемых элементов. Значение WHOLE_ARRAY означает удаление всех элементов с указанного индекса до конца массива."
            ],
            "en": [
                "array[]  [in][out]  Array.",
                "start  [in]  Index, starting from which the array elements are removed.",
                "count  [in]  Number of removed elements. The WHOLE_ARRAY value means removing all elements from the specified index up the end of the array."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет из массива указанное число элементов начиная с указанного индекса.",
            "en": "(bool) Removes the specified number of elements from the array starting with a specified index."
        }
    },
    "ArrayReverse": {
        "group": 2,
        "label": "ArrayReverse",
        "body": "ArrayReverse$0",
        "code": [
            {
                "label": "ArrayReverse(void& array[], uint start, uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in][out]  Массив.",
                "start  [in]  Индекс, начиная с которого разворачивается массив.",
                "count  [in]  Количество разворачиваемых элементов. Если указано значение WHOLE_ARRAY, то будут зеркально перемещены между собой все элементы массива, начиная с указанного индекса start и до конца массива."
            ],
            "en": [
                "array[]  [in][out]  Array.",
                "start  [in]  Index the array reversal starts from.",
                "count  [in]  Number of reversed elements. If WHOLE_ARRAY, then all array elements are moved in the inversed manner starting with the specified start index up to the end of the array."
            ]
        },
        "description": {
            "ru": "(bool) Разворачивает в массиве указанное число элементов начиная с указанного индекса.",
            "en": "(bool) Reverses the specified number of elements in the array starting with a specified index."
        }
    },
    "ArraySwap": {
        "group": 2,
        "label": "ArraySwap",
        "body": "ArraySwap$0",
        "code": [
            {
                "label": "ArraySwap(void& array1[], void& array2[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array1[]  [in][out]  Массив числового типа.",
                "array2[]  [in][out]  Массив числового типа."
            ],
            "en": [
                "array1[]  [in][out]  Array of numerical type.",
                "array2[]  [in][out]  Array of numerical type."
            ]
        },
        "description": {
            "ru": "(bool) Обменивает между собой содержимое двух динамических массивов одного типа. Для многомерных массивов количество элементов во всех измерениях кроме первого должно совпадать.",
            "en": "(bool) Swaps the contents of two dynamic arrays of the same type. For multidimensional arrays, the number of elements in all dimensions except the first one should match."
        }
    },
    "asin": {
        "group": 2,
        "label": "asin",
        "body": "asin$0",
        "code": [
            {
                "label": "asin(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]   Значение value между -1 и 1, арксинус которого должен быть вычислен."
            ],
            "en": [
                "val  [in]   The val value between -1 and 1, the arc sine of which is to be calculated."
            ]
        },
        "description": {
            "ru": "(double) Возвращает арксинус x в диапазоне от -π/2 до π/2 радианов.",
            "en": "(double) The function returns the arc sine of x within the range of -π/2 to π/2 radians."
        }
    },
    "atan": {
        "group": 2,
        "label": "atan",
        "body": "atan$0",
        "code": [
            {
                "label": "atan(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Число, представляющее тангенс."
            ],
            "en": [
                "value  [in]  A number representing a tangent."
            ]
        },
        "description": {
            "ru": "(double) Возвращает арктангенс x. Если x равен 0, функция возвращает 0.",
            "en": "(double) The function returns the arc tangent of x. If x is equal to 0, the function returns 0."
        }
    },
    "Bars": {
        "group": 2,
        "label": "Bars",
        "body": "Bars$0",
        "code": [
            {
                "label": "Bars(string symbol_name, ENUM_TIMEFRAMES timeframe)",
                "description": {
                    "ru": "Запросить количество всех баров в истории",
                    "en": "Request all of the history bars"
                }
            },
            {
                "label": "Bars(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time)",
                "description": {
                    "ru": "Запросить количество баров на заданном интервале",
                    "en": "Request the history bars for the selected time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "start_time  [in]  Bar time corresponding to the first element.",
                "stop_time  [in]  Bar time corresponding to the last element."
            ]
        },
        "description": {
            "ru": "(int) Возвращает количество баров в истории по соответствующему символу периоду. Существует 2 варианта функции.",
            "en": "(int) Returns the number of bars count in the history for a specified symbol and period. There are 2 variants of functions calls."
        }
    },
    "BarsCalculated": {
        "group": 2,
        "label": "BarsCalculated",
        "body": "BarsCalculated$0",
        "code": [
            {
                "label": "BarsCalculated(int indicator_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "indicator_handle  [in]  Хэндл индикатора, полученный соответствующей индикаторной функцией."
            ],
            "en": [
                "indicator_handle  [in]  The indicator handle, returned by the corresponding indicator function."
            ]
        },
        "description": {
            "ru": "(int) Возвращает количество рассчитанных данных для запрашиваемого индикатора.",
            "en": "(int) Returns the number of calculated data for the specified indicator."
        }
    },
    "CalendarCountryById": {
        "group": 2,
        "label": "CalendarCountryById",
        "body": "CalendarCountryById$0",
        "code": [
            {
                "label": "CalendarCountryById(const long country_id, MqlCalendarCountry& country)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "country_id  [in]  Идентификатор страны по стандарту ISO 3166-1.",
                "country  [out]  Переменная типа MqlCalendarCountry для получения описания страны."
            ],
            "en": [
                "country_id  [in]  Country ID (ISO 3166-1).",
                "country  [out]  MqlCalendarCountry type variable for receiving a country description."
            ]
        },
        "description": {
            "ru": "(bool) Получает описание страны по её идентификатору.",
            "en": "(bool) Get a country description by its ID."
        }
    },
    "CalendarEventById": {
        "group": 2,
        "label": "CalendarEventById",
        "body": "CalendarEventById$0",
        "code": [
            {
                "label": "CalendarEventById(ulong event_id, MqlCalendarEvent& event)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "event_id  [in]  Идентификатор события.",
                "event  [out]  Переменная типа MqlCalendarEvent для получения описания события."
            ],
            "en": [
                "event_id  [in]  Event ID.",
                "event  [out]  MqlCalendarEvent type variable for receiving an event description."
            ]
        },
        "description": {
            "ru": "(bool) Получает описание события по его идентификатору.",
            "en": "(bool) Get an event description by its ID."
        }
    },
    "CalendarValueById": {
        "group": 2,
        "label": "CalendarValueById",
        "body": "CalendarValueById$0",
        "code": [
            {
                "label": "CalendarValueById(ulong value_id, MqlCalendarValue& value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value_id  [in]  Идентификатор значения события.",
                "value  [out]  Переменная типа MqlCalendarValue для получения значения события. Смотри пример обработки событий календаря."
            ],
            "en": [
                "value_id  [in]  Event value ID.",
                "value  [out]  MqlCalendarValue type variable for receiving an event description. See the example of handling calendar events."
            ]
        },
        "description": {
            "ru": "(bool) Получает описание значения события по его идентификатору.",
            "en": "(bool) Get an event value description by its ID."
        }
    },
    "CalendarCountries": {
        "group": 2,
        "label": "CalendarCountries",
        "body": "CalendarCountries$0",
        "code": [
            {
                "label": "CalendarCountries(MqlCalendarCountry& countries[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "countries[]  [out]  Массив типа MqlCalendarCountry для получения описаний всех стран Календаря."
            ],
            "en": [
                "countries[]  [out]  An array of MqlCalendarCountry type for receiving all Calendar countries' descriptions."
            ]
        },
        "description": {
            "ru": "(int) Получает массив описаний стран, доступных в Календаре.",
            "en": "(int) Get the array of country names available in the Calendar."
        }
    },
    "CalendarEventByCountry": {
        "group": 2,
        "label": "CalendarEventByCountry",
        "body": "CalendarEventByCountry$0",
        "code": [
            {
                "label": "CalendarEventByCountry(string country_code, MqlCalendarEvent& events[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "country_code  [in]  Кодовое имя страны согласно ISO 3166-1 alpha-2",
                "events[]  [out]  Массив типа MqlCalendarEvent для получения описаний всех событий для указанной страны."
            ],
            "en": [
                "country_code  [in]  Country code name (ISO 3166-1 alpha-2)",
                "events[]  [out]  MqlCalendarEvent type array for receiving descriptions of all events for a specified country."
            ]
        },
        "description": {
            "ru": "(int) Получает массив описаний всех событий, доступных в Календаре, по указанному коду страны.",
            "en": "(int) Get the array of descriptions of all events available in the Calendar by a specified country code."
        }
    },
    "CalendarEventByCurrency": {
        "group": 2,
        "label": "CalendarEventByCurrency",
        "body": "CalendarEventByCurrency$0",
        "code": [
            {
                "label": "CalendarEventByCurrency(const string currency, MqlCalendarEvent& events[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "currency  [in]  Кодовое наименование валюты страны.",
                "events[]  [out]  Массив типа MqlCalendarEvent для получения описаний всех событий для указанной валюты."
            ],
            "en": [
                "currency  [in]  Country currency code name.",
                "events[]  [out]  MqlCalendarEvent type array for receiving descriptions of all events for a specified currency."
            ]
        },
        "description": {
            "ru": "(int) Получает массив описаний всех событий, доступных в Календаре, по указанной валюте.",
            "en": "(int) Get the array of descriptions of all events available in the Calendar by a specified currency."
        }
    },
    "CalendarValueHistoryByEvent": {
        "group": 2,
        "label": "CalendarValueHistoryByEvent",
        "body": "CalendarValueHistoryByEvent$0",
        "code": [
            {
                "label": "CalendarValueHistoryByEvent(ulong event_id, MqlCalendarValue& values[], datetime datetime_from, datetime datetime_to)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "event_id  [in]  Идентификатор события.",
                "values[]  [out]  Массив типа MqlCalendarValue для получения значений событий.  Смотри пример обработки событий календаря.",
                "datetime_from  [in]  Начальная дата диапазона времени, из которого выбираются события по заданному идентификатору, при этом datetime_from < datetime_to.",
                "datetime_to  [in]  Конечная дата диапазона времени, из которого выбираются события по заданному идентификатору. Если параметр datetime_to не задан (или равен 0), то будут возвращены все значения событий от заданной даты datetime_from, имеющиеся в базе Календаря, в том числе и значения событий, которые запланированы на будущее."
            ],
            "en": [
                "event_id  [in]  Event ID.",
                "values[]  [out]  MqlCalendarValue type array for receiving event values. See the example of handling calendar events.",
                "datetime_from  [in]  Initial date of a time range events are selected from by a specified ID, while datetime_from < datetime_to.",
                "datetime_to  [in]  End date of a time range events are selected from by a specified ID. If the datetime_to is not set (or is 0), all event values beginning from the specified datetime_from date in the Calendar database are returned (including the values of future events)."
            ]
        },
        "description": {
            "ru": "(bool) Получает массив значений по всем событиям на заданном диапазоне времени по идентификатору события.",
            "en": "(bool) Get the array of values for all events in a specified time range by an event ID."
        }
    },
    "CalendarValueHistory": {
        "group": 2,
        "label": "CalendarValueHistory",
        "body": "CalendarValueHistory$0",
        "code": [
            {
                "label": "CalendarValueHistory(MqlCalendarValue& values[], datetime datetime_from, datetime datetime_to, const string country_code, const string currency)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "values[]  [out]  Массив типа MqlCalendarValue для получения значений событий. Смотри пример обработки событий календаря.",
                "datetime_from  [in]  Начальная дата диапазона времени, из которого выбираются события по заданному идентификатору, при этом datetime_from < datetime_to.",
                "datetime_to  [in]  Конечная дата диапазона времени, из которого выбираются события по заданному идентификатору. Если параметр datetime_to не задан (или равен 0), то будут возвращены все значения событий от заданной даты datetime_from, имеющиеся в базе Календаря, в том числе и значения событий, которые запланированы на будущее.",
                "country_code  [in]  Кодовое имя страны согласно ISO 3166-1 alpha-2",
                "currency  [in]  Кодовое наименование валюты страны."
            ],
            "en": [
                "values[]  [out]  MqlCalendarValue type array for receiving event values. See the example of handling calendar events.",
                "datetime_from  [in]  Initial date of a time range events are selected from by a specified ID, while datetime_from < datetime_to.",
                "datetime_to  [in]  End date of a time range events are selected from by a specified ID. If the datetime_to is not set (or is 0), all event values beginning from the specified datetime_from date in the Calendar database are returned (including the values of future events).",
                "country_code  [in]  Country code name (ISO 3166-1 alpha-2)",
                "currency  [in]  Country currency code name."
            ]
        },
        "description": {
            "ru": "(bool) Получает массив значений по всем событиям на заданном диапазоне времени с фильтром по стране и/или валюте.",
            "en": "(bool) Get the array of values for all events in a specified time range with the ability to sort by country and/or currency."
        }
    },
    "CalendarValueLastByEvent": {
        "group": 2,
        "label": "CalendarValueLastByEvent",
        "body": "CalendarValueLastByEvent$0",
        "code": [
            {
                "label": "CalendarValueLastByEvent(ulong event_id, ulong& change_id, MqlCalendarValue& values[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "event_id  [in]  Идентификатор события.",
                "change_id  [in][out]  Идентификатор изменения.",
                "values[]  [out]  Массив типа MqlCalendarValue для получения значений события. Смотри пример обработки событий календаря."
            ],
            "en": [
                "event_id  [in]  Event ID.",
                "change_id  [in][out]  Change ID.",
                "values[]  [out]  MqlCalendarValue type array for receiving event values. See the example of handling calendar events."
            ]
        },
        "description": {
            "ru": "(int) Получает массив значений события по его ID c момента состояния базы Календаря с заданным change_id.",
            "en": "(int) Get the array of event values by its ID since the Calendar database status with a specified change_id."
        }
    },
    "CalendarValueLast": {
        "group": 2,
        "label": "CalendarValueLast",
        "body": "CalendarValueLast$0",
        "code": [
            {
                "label": "CalendarValueLast(ulong& change_id, MqlCalendarValue& values[], const string country_code, const string currency)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "change_id  [in][out]  Идентификатор изменения.",
                "values[]  [out]  Массив типа MqlCalendarValue для получения значений события. Смотри пример обработки событий календаря.",
                "country_code  [in]  Кодовое имя страны согласно ISO 3166-1 alpha-2",
                "currency  [in]  Кодовое наименование валюты страны."
            ],
            "en": [
                "change_id  [in][out]  Change ID.",
                "values[]  [out]  MqlCalendarValue type array for receiving event values. See the example of handling calendar events.",
                "country_code  [in]  Country code name (ISO 3166-1 alpha-2)",
                "currency  [in]  Country currency code name."
            ]
        },
        "description": {
            "ru": "(int) Получает массив значений по всем событиям с фильтрацией по стране и/или валюте с момента состояния базы Календаря с заданным change_id.",
            "en": "(int) Get the array of values for all events with the ability to sort by country and/or currency since the calendar database status with a specified change_id."
        }
    },
    "ceil": {
        "group": 2,
        "label": "ceil",
        "body": "ceil$0",
        "code": [
            {
                "label": "ceil(double val)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "val  [in]  Числовая величина."
            ],
            "en": [
                "val  [in]  Numeric value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает ближайшее сверху целое числовое значение.",
            "en": "(double) The function returns integer numeric value closest from above."
        }
    },
    "CharArrayToString": {
        "group": 2,
        "label": "CharArrayToString",
        "body": "CharArrayToString$0",
        "code": [
            {
                "label": "CharArrayToString(uchar array[], int start, int count, uint codepage)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Массив типа uchar.",
                "start  [in]  Позиция, с которой начинается копирование. По умолчанию 0.",
                "count  [in]  Количество элементов массива для копирования. Определяет длину результатной строки. По умолчанию -1, что означает копирование до конца массива, либо до встречи терминального 0.",
                "codepage  [in]  Значение кодовой страницы. Для наиболее употребимых кодовых страниц предусмотрены соответствующие константы."
            ],
            "en": [
                "array[]  [in]  Array of uchar type.",
                "start  [in]  Position from which copying starts. by default 0 is used.",
                "count  [in]  Number of array elements for copying. Defines the length of a resulting string. Default value is -1, which means copying up to the array end, or till terminal 0.",
                "codepage  [in]  The value of the code page. There is a number of built-in constants for the most used code pages."
            ]
        },
        "description": {
            "ru": "(string) Копирует и преобразует часть массива типа uchar в возвращаемую строку.",
            "en": "(string) It copies and converts part of array of uchar type into a returned string."
        }
    },
    "ChartApplyTemplate": {
        "group": 2,
        "label": "ChartApplyTemplate",
        "body": "ChartApplyTemplate$0",
        "code": [
            {
                "label": "ChartApplyTemplate(long chart_id, const string filename)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "filename  [in]  Имя файла, содержащего шаблон."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "filename  [in]  The name of the file containing the template."
            ]
        },
        "description": {
            "ru": "(bool) Применяет к графику указанный шаблон. Отданная команда поступает в очередь сообщений графика и выполняется только после обработки всех предыдущих команд.",
            "en": "(bool) Applies a specific template from a specified file to the chart. The command is added to chart messages queue and will be executed after processing of all previous commands."
        }
    },
    "ChartClose": {
        "group": 2,
        "label": "ChartClose",
        "body": "ChartClose$0",
        "code": [
            {
                "label": "ChartClose(long chart_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart."
            ]
        },
        "description": {
            "ru": "(bool) Закрывает указанный график.",
            "en": "(bool) Closes the specified chart."
        }
    },
    "ChartFirst": {
        "group": 2,
        "label": "ChartFirst",
        "body": "ChartFirst($0)",
        "code": [
            {
                "label": "ChartFirst()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(long) Возвращает идентификатор первого графика клиентского терминала.",
            "en": "(long) Returns the ID of the first chart of the client terminal."
        }
    },
    "ChartGetDouble": {
        "group": 2,
        "label": "ChartGetDouble",
        "body": "ChartGetDouble$0",
        "code": [
            {
                "label": "ChartGetDouble(long chart_id, int prop_id, int sub_window)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Returns the property value directly."
                }
            },
            {
                "label": "ChartGetDouble(long chart_id, int prop_id, int sub_window, double& double_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of a function. If successful, the value of the property is placed in a target variable double_var passed by reference."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "prop_id  [in]  Идентификатор свойства графика. Значение может быть одним из значений перечисления ENUM_CHART_PROPERTY_DOUBLE.",
                "sub_window  [in]  Номер подокна графика. Для первого варианта по умолчанию значение равно 0 (главное окно графика). Большинство свойств не требуют указания номера подокна.",
                "double_var  [out]  Переменная типа double, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "prop_id  [in]  Chart property ID. This value can be one of the ENUM_CHART_PROPERTY_DOUBLE values.",
                "sub_window  [in]  Number of the chart subwindow. For the first case, the default value is 0 (main chart window). The most of the properties do not require a subwindow number.",
                "double_var  [out]  Target variable of double type for the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает значение соответствующего свойства указанного графика. Свойство графика должно быть типа double. Существует 2 варианта функции.",
            "en": "(bool) Returns the value of a corresponding property of the specified chart. Chart property must be of double type. There are 2 variants of the function calls."
        }
    },
    "ChartGetInteger": {
        "group": 2,
        "label": "ChartGetInteger",
        "body": "ChartGetInteger$0",
        "code": [
            {
                "label": "ChartGetInteger(long chart_id, int prop_id, int sub_window)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Returns the property value directly."
                }
            },
            {
                "label": "ChartGetInteger(long chart_id, int prop_id, int sub_window, long& long_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of a function. If successful, the value of the property is placed in a target variable long_var passed by reference."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "prop_id  [in]  Идентификатор свойства графика. Значение может быть одним из значений перечисления ENUM_CHART_PROPERTY_INTEGER.",
                "sub_window  [in]  Номер подокна графика. Для первого варианта по умолчанию значение равно 0 (главное окно графика). Большинство свойств не требуют указания номера подокна.",
                "long_var  [out]  Переменная типа long, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "prop_id  [in]  Chart property ID. This value can be one of the  ENUM_CHART_PROPERTY_INTEGER values.",
                "sub_window  [in]  Number of the chart subwindow. For the first case, the default value is 0 (main chart window). The most of the properties do not require a subwindow number.",
                "long_var  [out]  Target variable of long type for the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает значение соответствующего свойства указанного графика. Свойство графика должно быть типов datetime, int или bool. Существует 2 варианта функции.",
            "en": "(bool) Returns the value of a corresponding property of the specified chart. Chart property must be of datetime, int or bool type. There are 2 variants of the function calls."
        }
    },
    "ChartGetString": {
        "group": 2,
        "label": "ChartGetString",
        "body": "ChartGetString$0",
        "code": [
            {
                "label": "ChartGetString(long chart_id, int prop_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Returns the property value directly."
                }
            },
            {
                "label": "ChartGetString(long chart_id, int prop_id, string& string_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of a function. If successful, the value of the property is placed in a target variable string_var passed by reference."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "prop_id  [in]  Идентификатор свойства графика. Значение может быть одним из значений перечисления ENUM_CHART_PROPERTY_STRING.",
                "string_var  [out]  Переменная типа string, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "prop_id  [in]  Chart property ID. This value can be one of the  ENUM_CHART_PROPERTY_STRING values.",
                "string_var  [out]  Target variable of string type for the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает значение соответствующего свойства указанного графика. Свойство графика должно быть типа string. Существует 2 варианта функции.",
            "en": "(bool) Returns the value of a corresponding property of the specified chart. Chart property must be of string type. There are 2 variants of the function call."
        }
    },
    "ChartID": {
        "group": 2,
        "label": "ChartID",
        "body": "ChartID($0)",
        "code": [
            {
                "label": "ChartID()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(long) Возвращает идентификатор текущего графика.",
            "en": "(long) Returns the ID of the current chart."
        }
    },
    "ChartIndicatorAdd": {
        "group": 2,
        "label": "ChartIndicatorAdd",
        "body": "ChartIndicatorAdd$0",
        "code": [
            {
                "label": "ChartIndicatorAdd(long chart_id, int sub_window, int indicator_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "sub_window  [in]  Номер подокна графика. 0 означает главное окно графика. Чтобы добавить индикатор в новое окно, параметр должен быть на единицу больше, чем индекс последнего существующего окна, то есть равен  CHART_WINDOWS_TOTAL. Если значение параметра превышает значение CHART_WINDOWS_TOTAL, то новое окно создано не будет, индикатор не будет добавлен.",
                "indicator_handle  [in]  Хэндл индикатора."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "sub_window  [in]  The number of the chart sub-window. 0 means the main chart window. To add an indicator in a new window, the parameter must be one greater than the index of the last existing window, i.e. equal to CHART_WINDOWS_TOTAL. If the value of the parameter is greater than CHART_WINDOWS_TOTAL, a new window will not be created, and the indicator will not be added.",
                "indicator_handle  [in]  The handle of the indicator."
            ]
        },
        "description": {
            "ru": "(bool) Добавляет на указанное окно графика индикатор с указанным хэндлом. Индикатор и график должны быть построены на одинаковых символе и таймфрейме.",
            "en": "(bool) Adds an indicator with the specified handle into a specified chart window. Indicator and chart should be generated on the same symbol and time frame."
        }
    },
    "ChartIndicatorDelete": {
        "group": 2,
        "label": "ChartIndicatorDelete",
        "body": "ChartIndicatorDelete$0",
        "code": [
            {
                "label": "ChartIndicatorDelete(long chart_id, int sub_window, const string indicator_shortname)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "sub_window  [in]  Номер подокна графика. 0 означает главное окно графика.",
                "indicator_shortname  [in]  Короткое имя индикатора, которое задается в свойстве INDICATOR_SHORTNAME функцией IndicatorSetString(). Получить короткое имя индикатора можно функцией ChartIndicatorName()."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 denotes the current chart.",
                "sub_window  [in]  Number of the chart subwindow. 0 denotes the main chart subwindow.",
                "indicator_shortname  [in]  The short name of the indicator which is set in the INDICATOR_SHORTNAME property with the IndicatorSetString() function. To get the short name of an indicator use the ChartIndicatorName() function."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет с указанного окна графика индикатор с указанным именем.",
            "en": "(bool) Removes an indicator with a specified name from the specified chart window."
        }
    },
    "ChartIndicatorGet": {
        "group": 2,
        "label": "ChartIndicatorGet",
        "body": "ChartIndicatorGet$0",
        "code": [
            {
                "label": "ChartIndicatorGet(long chart_id, int sub_window, const string indicator_shortname)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "sub_window  [in]  Номер подокна графика. 0 означает главное окно графика.",
                "indicator_shortname  [in]  Короткое имя индикатора, которое задается в свойстве INDICATOR_SHORTNAME функцией IndicatorSetString(). Получить короткое имя индикатора можно функцией ChartIndicatorName()."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "sub_window  [in]  The number of the chart subwindow. 0 means the main chart window.",
                "indicator_shortname  [in]  The short name if the indicator, which is set in the INDICATOR_SHORTNAME property using the IndicatorSetString() function. To get the short name of an indicator, use the ChartIndicatorName() function."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора с указанным коротким именем на указанном окне графика.",
            "en": "(int) Returns the handle of the indicator with the specified short name in the specified chart window."
        }
    },
    "ChartIndicatorName": {
        "group": 2,
        "label": "ChartIndicatorName",
        "body": "ChartIndicatorName$0",
        "code": [
            {
                "label": "ChartIndicatorName(long chart_id, int sub_window, int index)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "sub_window  [in]  Номер подокна графика. 0 означает главное окно графика.",
                "index  [in]  Индекс индикатора с списке индикаторов. Нумерация индикаторов начинается с нуля, то есть самый первый индикатор в списке имеет нулевой индекс. Количество индикаторов в списке можно получить функцией ChartIndicatorsTotal()."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 denotes the current chart.",
                "sub_window  [in]  Number of the chart subwindow. 0 denotes the main chart subwindow.",
                "index  [in]  the index of the indicator in the list of indicators. The numeration of indicators start with zero, i.e. the first indicator in the list has the 0 index. To obtain the number of indicators in the list use the ChartIndicatorsTotal() function."
            ]
        },
        "description": {
            "ru": "(string) Возвращает короткое имя индикатора по номеру в списке индикаторов на указанном окна графика.",
            "en": "(string) Returns the short name of the indicator by the number in the indicators list on the specified chart window."
        }
    },
    "ChartIndicatorsTotal": {
        "group": 2,
        "label": "ChartIndicatorsTotal",
        "body": "ChartIndicatorsTotal$0",
        "code": [
            {
                "label": "ChartIndicatorsTotal(long chart_id, int sub_window)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "sub_window  [in]  Номер подокна графика. 0 означает главное окно графика."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 denotes the current chart.",
                "sub_window  [in]  Number of the chart subwindow. 0 denotes the main chart subwindow."
            ]
        },
        "description": {
            "ru": "(int) Возвращает количество всех индикаторов, присоединенных к указанному окну графика.",
            "en": "(int) Returns the number of all indicators applied to the specified chart window."
        }
    },
    "ChartNavigate": {
        "group": 2,
        "label": "ChartNavigate",
        "body": "ChartNavigate$0",
        "code": [
            {
                "label": "ChartNavigate(long chart_id, ENUM_CHART_POSITION position, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "position  [in]  Позиция графика, относительно которой будет произведено смещение. Значение может быть одним из значений перечисления ENUM_CHART_POSITION.",
                "shift  [in]  Количество баров, на которое необходимо сместить график. Положительное значение означает смещение вправо (к концу графика), отрицательное значение означает смещение влево (к началу графика). Нулевое смещение имеет смысл, когда производится навигация к началу или концу графика."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "position  [in]  Chart position to perform a shift. Can be one of the ENUM_CHART_POSITION values.",
                "shift  [in]  Number of bars to shift the chart. Positive value means the right shift (to the end of chart), negative value means the left shift (to the beginning of chart). The zero shift can be used to navigate to the beginning or end of chart."
            ]
        },
        "description": {
            "ru": "(bool) Осуществляет сдвиг указанного графика на указанное количество баров относительно указанной позиции графика.",
            "en": "(bool) Performs shift of the specified chart by the specified number of bars relative to the specified position in the chart."
        }
    },
    "ChartNext": {
        "group": 2,
        "label": "ChartNext",
        "body": "ChartNext$0",
        "code": [
            {
                "label": "ChartNext(long chart_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 не означает текущий график. 0 означает \"вернуть идентификатор первого графика\"."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 does not mean the current chart. 0 means \"return the first chart ID\"."
            ]
        },
        "description": {
            "ru": "(long) Функция возвращает идентификатор графика, следующего за указанным.",
            "en": "(long) Returns the chart ID of the chart next to the specified one."
        }
    },
    "ChartOpen": {
        "group": 2,
        "label": "ChartOpen",
        "body": "ChartOpen$0",
        "code": [
            {
                "label": "ChartOpen(string symbol, ENUM_TIMEFRAMES period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символ графика. NULL означает символ текущего графика (к которому прикреплен эксперт).",
                "period  [in]  Период графика (таймфрейм). Может принимать одно из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика."
            ],
            "en": [
                "symbol  [in]  Chart symbol. NULL means the symbol of the  current chart (the Expert Advisor is attached to).",
                "period  [in]  Chart period (timeframe). Can be one of the ENUM_TIMEFRAMES values. 0 means the current chart period."
            ]
        },
        "description": {
            "ru": "(long) Открывает новый график с указанным символом и периодом.",
            "en": "(long) Opens a new chart with the specified symbol and period."
        }
    },
    "CharToString": {
        "group": 2,
        "label": "CharToString",
        "body": "CharToString$0",
        "code": [
            {
                "label": "CharToString(uchar char_code)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "char_code  [in]  Код символа ANSI."
            ],
            "en": [
                "char_code  [in]  Code of ANSI symbol."
            ]
        },
        "description": {
            "ru": "(string) Преобразование кода символа в односимвольную строку.",
            "en": "(string) Converting a symbol code into a one-character string"
        }
    },
    "ChartPeriod": {
        "group": 2,
        "label": "ChartPeriod",
        "body": "ChartPeriod$0",
        "code": [
            {
                "label": "ChartPeriod(long chart_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart."
            ]
        },
        "description": {
            "ru": "(ENUM_TIMEFRAMES) Возвращает значение периода указанного графика.",
            "en": "(ENUM_TIMEFRAMES) Returns the timeframe period of specified chart."
        }
    },
    "ChartPriceOnDropped": {
        "group": 2,
        "label": "ChartPriceOnDropped",
        "body": "ChartPriceOnDropped($0)",
        "code": [
            {
                "label": "ChartPriceOnDropped()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(double) Возвращает ценовую координату, соответствующую точке, в которой брошен мышкой данный эксперт или скрипт.",
            "en": "(double) Returns the price coordinate corresponding to the chart point the Expert Advisor or script has been dropped to."
        }
    },
    "ChartRedraw": {
        "group": 2,
        "label": "ChartRedraw",
        "body": "ChartRedraw$0",
        "code": [
            {
                "label": "ChartRedraw(long chart_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart."
            ]
        },
        "description": {
            "ru": "(void) Вызывает принудительную перерисовку указанного графика.",
            "en": "(void) This function calls a forced redrawing of a specified chart."
        }
    },
    "ChartSaveTemplate": {
        "group": 2,
        "label": "ChartSaveTemplate",
        "body": "ChartSaveTemplate$0",
        "code": [
            {
                "label": "ChartSaveTemplate(long chart_id, const string filename)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "filename  [in]  Имя файла для сохранения шаблона. Расширение \".tpl\" будет добавлено к имени файла автоматически, указывать его не требуется. Шаблон сохраняется в папку каталог_данных\\Profiles\\Templates\\ и может быть использован также и для ручного применения в терминале. Если шаблон с данным именем уже существует, то его содержимое будет переписано заново."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "filename  [in]  The filename to save the template. The \".tpl\" extension will be added to the filename automatically; there is no need to specify it. The template is saved in data_folder\\Profiles\\Templates\\ and can be used for manual application in the terminal. If a template with the same filename already exists, the contents of this file will be overwritten."
            ]
        },
        "description": {
            "ru": "(bool) Сохраняет текущие настройки графика в шаблон с указанным именем.",
            "en": "(bool) Saves current chart settings in a template with a specified name."
        }
    },
    "ChartScreenShot": {
        "group": 2,
        "label": "ChartScreenShot",
        "body": "ChartScreenShot$0",
        "code": [
            {
                "label": "ChartScreenShot(long chart_id, string filename, int width, int height, ENUM_ALIGN_MODE align_mode)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "filename  [in]  Имя файла скриншота. Не может превышать 63 символов. Скриншот помещается в директорию \\Files.",
                "width  [in]  Ширина скриншота в пикселях",
                "height  [in]  Высота скриншота в пикселях",
                "align_mode  [in]  Режим вывода узкого скриншота. Значение перечисления ENUM_ALIGN_MODE. ALIGN_RIGHT означает выравнивание по правой границе (вывод с конца). ALIGN_LEFT задает выравнивание по левой границе."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "filename  [in]  Screenshot file name. Cannot exceed 63 characters. Screenshot files are placed in the \\Files directory.",
                "width  [in]  Screenshot width in pixels.",
                "height  [in]  Screenshot height in pixels.",
                "align_mode  [in]  Output mode of a narrow screenshot. A value of the ENUM_ALIGN_MODE enumeration. ALIGN_RIGHT means align to the right margin (the output from the end). ALIGN_LEFT means Left justify."
            ]
        },
        "description": {
            "ru": "(bool) Функция обеспечивает скриншот указанного графика в его текущем состоянии в формате GIF, PNG или BMP в зависимости от указанного расширения.",
            "en": "(bool) The function provides a screenshot of the chart in its current state in the GIF, PNG or BMP format depending on specified extension."
        }
    },
    "ChartSetDouble": {
        "group": 2,
        "label": "ChartSetDouble",
        "body": "ChartSetDouble$0",
        "code": [
            {
                "label": "ChartSetDouble(long chart_id, int prop_id, double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "prop_id  [in]  Идентификатор свойства графика. Значение может быть одним из значений перечисления ENUM_CHART_PROPERTY_DOUBLE (кроме read-only свойств).",
                "value  [in]  Значение свойства."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "prop_id  [in]  Chart property ID. Can be one of the ENUM_CHART_PROPERTY_DOUBLE values (except the read-only properties).",
                "value  [in] Property value."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства указанного графика. Свойство графика должно быть типа double. Отданная команда поступает в очередь сообщений графика и выполняется только после обработки всех предыдущих команд.",
            "en": "(bool) Sets a value for a corresponding property of the specified chart. Chart property should be of a double type. The command is added to chart messages queue and will be executed after processing of all previous commands."
        }
    },
    "ChartSetInteger": {
        "group": 2,
        "label": "ChartSetInteger",
        "body": "ChartSetInteger$0",
        "code": [
            {
                "label": "ChartSetInteger(long chart_id, int prop_id, long value)",
                "description": {
                    "ru": "Задает значение соответствующего свойства указанного графика.",
                    "en": "Sets a value for a corresponding property of the specified chart."
                }
            },
            {
                "label": "ChartSetInteger(long chart_id, int prop_id, int sub_window, long value)",
                "description": {
                    "ru": "Задает значение соответствующего свойства указанного подокна.",
                    "en": "Sets a value for a corresponding property of the specified subwindow."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "prop_id  [in]  Идентификатор свойства графика. Значение может быть одним из значений перечисления ENUM_CHART_PROPERTY_INTEGER (кроме read-only свойств).",
                "sub_window  [in]  Номер подокна графика. Для первого варианта по умолчанию значение равно 0 (главное окно графика). Большинство свойств не требуют указания номера подокна.",
                "value  [in]  Значение свойства."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "prop_id  [in]  Chart property ID. It can be one of the ENUM_CHART_PROPERTY_INTEGER value (except the read-only properties).",
                "sub_window  [in]  Number of the chart subwindow. For the first case, the default value is 0 (main chart window). The most of the properties do not require a subwindow number.",
                "value  [in]  Property value."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства указанного графика. Свойство графика должно быть типов datetime, int, color, bool или char. Отданная команда поступает в очередь сообщений графика и выполняется только после обработки всех предыдущих команд.",
            "en": "(bool) Sets a value for a corresponding property of the specified chart. Chart property must be datetime, int, color, bool or char. The command is added to chart messages queue and will be executed after processing of all previous commands."
        }
    },
    "ChartSetString": {
        "group": 2,
        "label": "ChartSetString",
        "body": "ChartSetString$0",
        "code": [
            {
                "label": "ChartSetString(long chart_id, int prop_id, string str_value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "prop_id  [in]  Идентификатор свойства графика. Значение может быть одним из значений перечисления ENUM_CHART_PROPERTY_STRING (кроме read-only свойств).",
                "str_value  [in]  Строка для установки свойства. Длина строки не может превышать 2045 символов (лишние символы будут обрезаны)."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "prop_id  [in]  Chart property ID. Its value can be one of the ENUM_CHART_PROPERTY_STRING values (except the read-only properties).",
                "str_value  [in]  Property value string. String length cannot exceed 2045 characters (extra characters will be truncated)."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства указанного графика. Свойство графика должно быть типа string. Отданная команда поступает в очередь сообщений графика и выполняется только после обработки всех предыдущих команд.",
            "en": "(bool) Sets a value for a corresponding property of the specified chart. Chart property must be of the string type. The command is added to chart messages queue and will be executed after processing of all previous commands."
        }
    },
    "ChartSetSymbolPeriod": {
        "group": 2,
        "label": "ChartSetSymbolPeriod",
        "body": "ChartSetSymbolPeriod$0",
        "code": [
            {
                "label": "ChartSetSymbolPeriod(long chart_id, string symbol, ENUM_TIMEFRAMES period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "symbol  [in]  Символ графика. NULL означает символ текущего графика (к которому прикреплен эксперт)",
                "period  [in]  Период графика (таймфрейм). Может принимать одно из значений значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "symbol  [in]  Chart symbol. NULL value means the current chart symbol (Expert Advisor is attached to)",
                "period  [in]  Chart period (timeframe). Can be one of the ENUM_TIMEFRAMES values. 0 means the current chart period."
            ]
        },
        "description": {
            "ru": "(bool) Меняет значения символа и периода указанного графика. Функция работает асинхронно, то есть отдает команду и не ждет окончания ее выполнения. Отданная команда поступает в очередь сообщений графика и выполняется только после обработки всех предыдущих команд.",
            "en": "(bool) Changes the symbol and period of the specified chart. The function is asynchronous, i.e. it sends the command and does not wait for its execution completion. The command is added to chart messages queue and will be executed after processing of all previous commands."
        }
    },
    "ChartSymbol": {
        "group": 2,
        "label": "ChartSymbol",
        "body": "ChartSymbol$0",
        "code": [
            {
                "label": "ChartSymbol(long chart_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart."
            ]
        },
        "description": {
            "ru": "(string) Возвращает имя символа указанного графика.",
            "en": "(string) Returns the symbol name for the specified chart."
        }
    },
    "ChartTimeOnDropped": {
        "group": 2,
        "label": "ChartTimeOnDropped",
        "body": "ChartTimeOnDropped($0)",
        "code": [
            {
                "label": "ChartTimeOnDropped()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(datetime) Возвращает временную координату, соответствующую точке, в которой брошен мышкой данный эксперт или скрипт.",
            "en": "(datetime) Returns the time coordinate corresponding to the chart point the Expert Advisor or script has been dropped to."
        }
    },
    "ChartTimePriceToXY": {
        "group": 2,
        "label": "ChartTimePriceToXY",
        "body": "ChartTimePriceToXY$0",
        "code": [
            {
                "label": "ChartTimePriceToXY(long chart_id, int sub_window, datetime time, double price, int& x, int& y)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "sub_window  [in]  Номер подокна графика. 0 означает главное окно графика.",
                "time  [in]  Значение времени на графике, для которого будет получено значение в пикселах на оси X. Начало координат находится в левом верхнем углу главного окна графика.",
                "price  [in]   Значение цены на графике, для которого будет получено значение в пикселах на оси Y. Начало координат находится в левом верхнем углу главного окна графика.",
                "x  [out]  Переменная, в которую будет получено преобразование времени в координату X.",
                "y  [out]  Переменная, в которую будет получено преобразование цены в координату Y."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "sub_window  [in]  The number of the chart subwindow. 0 means the main chart window.",
                "time  [in]  The time value on the chart, for which the value in pixels along the X axis will be received. The origin is in the upper left corner of the main chart window.",
                "price  [in]   The price value on the chart, for which the value in pixels along the Y axis will be received. The origin is in the upper left corner of the main chart window.",
                "x  [out]  The variable, into which the conversion of time to X will be received.",
                "y  [out]  The variable, into which the conversion of price to Y will be received."
            ]
        },
        "description": {
            "ru": "(bool) Преобразует координаты графика из представления время/цена в координаты по оси X и Y.",
            "en": "(bool) Converts the coordinates of a chart from the time/price representation to the X and Y coordinates."
        }
    },
    "ChartWindowFind": {
        "group": 2,
        "label": "ChartWindowFind",
        "body": "ChartWindowFind$0",
        "code": [
            {
                "label": "ChartWindowFind(long chart_id, string indicator_shortname)",
                "description": {
                    "ru": "1. Функция ищет на указанном графике подокно с указанным \"коротким именем\" индикатора (короткое имя выводится слева вверху подокна) и в случае удачи возвращает номер подокна.",
                    "en": "1. The function searches in the indicated chart for the subwindow with the specified \"short name\" of the indicator (the short name is displayed in the left top part of the subwindow), and it returns the subwindow number in case of success."
                }
            },
            {
                "label": "ChartWindowFind()",
                "description": {
                    "ru": "2. Функция должна вызываться из пользовательского индикатора и возвращает номер подокна, в котором этот индикатор работает.",
                    "en": "2. The function must be called from a custom indicator. It returns the number of the subwindow where the indicator is working."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "indicator_shortname  [in]  Короткое имя индикатора."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 denotes the current chart.",
                "indicator_shortname  [in]  Short name of the indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает номер подокна, в котором находится индикатор. Существует 2 варианта функции.",
            "en": "(int) The function returns the number of a subwindow where an indicator is drawn. There are 2 variants of the function."
        }
    },
    "ChartWindowOnDropped": {
        "group": 2,
        "label": "ChartWindowOnDropped",
        "body": "ChartWindowOnDropped($0)",
        "code": [
            {
                "label": "ChartWindowOnDropped()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает номер подокна графика, на которое брошен мышкой данный эксперт или скрипт. 0 означает главное окно графика.",
            "en": "(int) Returns the number (index) of the chart subwindow the Expert Advisor or script has been dropped to. 0 means the main chart window."
        }
    },
    "ChartXOnDropped": {
        "group": 2,
        "label": "ChartXOnDropped",
        "body": "ChartXOnDropped($0)",
        "code": [
            {
                "label": "ChartXOnDropped()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает координату по оси X, соответствующую точке, в которой брошен мышкой данный эксперт или скрипт.",
            "en": "(int) Returns the X coordinate of the chart point the Expert Advisor or script has been dropped to."
        }
    },
    "ChartXYToTimePrice": {
        "group": 2,
        "label": "ChartXYToTimePrice",
        "body": "ChartXYToTimePrice$0",
        "code": [
            {
                "label": "ChartXYToTimePrice(long chart_id, int x, int y, int& sub_window, datetime& time, double& price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "x  [in]  Координата X.",
                "y  [in]  Координата Y.",
                "sub_window  [out]  Переменная, в которую будет записан номер подокна графика. 0 означает главное окно графика.",
                "time  [out]  Значение времени на графике, для которого будет получено значение в пикселах на оси X. Начало координат находится в левом верхнем углу главного окна графика.",
                "price  [out]   Значение цены на графике, для которого будет получено значение в пикселах на оси Y. Начало координат находится в левом верхнем углу главного окна графика."
            ],
            "en": [
                "chart_id  [in]  Chart ID. 0 means the current chart.",
                "x  [in]  The X coordinate.",
                "y  [in]  The Y coordinate.",
                "sub_window  [out]  The variable, into which the chart subwindow number will be written. 0 means the main chart window.",
                "time  [out]  The time value on the chart, for which the value in pixels along the X axis will be received. The origin is in the upper left corner of the main chart window.",
                "price  [out]  The price value on the chart, for which the value in pixels along the Y axis will be received. The origin is in the upper left corner of the main chart window."
            ]
        },
        "description": {
            "ru": "(bool) Преобразует координаты  X и Y графика в значения время и цена.",
            "en": "(bool) Converts the X and Y coordinates on a chart to the time and price values."
        }
    },
    "ChartYOnDropped": {
        "group": 2,
        "label": "ChartYOnDropped",
        "body": "ChartYOnDropped($0)",
        "code": [
            {
                "label": "ChartYOnDropped()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает координату по оси Y, соответствующую точке, в которой брошен мышкой данный эксперт или скрипт.",
            "en": "(int) Returns the Y coordinateof the chart point the Expert Advisor or script has been dropped to."
        }
    },
    "CheckPointer": {
        "group": 2,
        "label": "CheckPointer",
        "body": "CheckPointer$0",
        "code": [
            {
                "label": "CheckPointer(object* anyobject)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "anyobject  [in]  Указатель объекта."
            ],
            "en": [
                "anyobject  [in]  Object pointer."
            ]
        },
        "description": {
            "ru": "(ENUM_POINTER_TYPE) Возвращает тип указателя объекта.",
            "en": "(ENUM_POINTER_TYPE) The function returns the type of the object pointer."
        }
    },
    "CLBufferCreate": {
        "group": 2,
        "label": "CLBufferCreate",
        "body": "CLBufferCreate$0",
        "code": [
            {
                "label": "CLBufferCreate(int context, uint size, uint flags)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на context OpenCL.",
                "size  [in]  Размер буфера в байтах.",
                "flags  [in]  Свойства буфера, задаваемые через комбинацию флагов:  CL_MEM_READ_WRITE, CL_MEM_WRITE_ONLY, CL_MEM_READ_ONLY, CL_MEM_ALLOC_HOST_PTR."
            ],
            "en": [
                "context  [in]  A handle to context OpenCL.",
                "size  [in]  Buffer size in bytes.",
                "flags  [in]  Buffer properties that are set using a combination of flags: CL_MEM_READ_WRITE, CL_MEM_WRITE_ONLY, CL_MEM_READ_ONLY, CL_MEM_ALLOC_HOST_PTR."
            ]
        },
        "description": {
            "ru": "(int) Создает буфер OpenCL и возвращает хендл на него.",
            "en": "(int) Creates an OpenCL buffer and returns its handle."
        }
    },
    "CLBufferFree": {
        "group": 2,
        "label": "CLBufferFree",
        "body": "CLBufferFree$0",
        "code": [
            {
                "label": "CLBufferFree(int buffer)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "buffer  [in]  Хендл на буфер OpenCL."
            ],
            "en": [
                "buffer  [in]  A handle to an OpenCL buffer."
            ]
        },
        "description": {
            "ru": "(void) Удаляет буфер OpenCL.",
            "en": "(void) Deletes an OpenCL buffer."
        }
    },
    "CLBufferRead": {
        "group": 2,
        "label": "CLBufferRead",
        "body": "CLBufferRead$0",
        "code": [
            {
                "label": "CLBufferRead(int buffer, const void& data[], uint buffer_offset, uint data_offset, uint data_count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "buffer  [in]  Хендл буфера OpenCL.",
                "data[]  [in]  Массив для получения значений из буфера OpenCL. Передается по ссылке.",
                "buffer_offset  [in]  Смещение в OpenCL буфере в байтах, с которого начинается чтение. По умолчанию чтение начинается с начала буфера.",
                "data_offset  [in]  Индекс первого элемента массива для записи значений буфера OpenCL. По умолчанию запись прочитанных значений в массив начинается с нулевого индекса.",
                "data_count  [in]  Количество значений, которые нужно прочитать. По умолчанию читается весь буфер OpenCL."
            ],
            "en": [
                "buffer  [in]   A handle of the OpenCL buffer.",
                "data[]  [in]  An array for receiving values from the OpenCL buffer. Passed by reference.",
                "buffer_offset  [in]  An offset in the OpenCL buffer in bytes, from which reading begins. By default, reading start with the very beginning of the buffer.",
                "data_offset  [in]  The index of the first array element for writing the values of the OpenCL buffer. By default, writing of the read values into an array starts from the zero index.",
                "data_count  [in]  The number of values that should be read. The whole OpenCL buffer is read by default."
            ]
        },
        "description": {
            "ru": "(uint) Читает буфер OpenCL в массив и возвращает количество прочитанных элементов.",
            "en": "(uint) Reads an OpenCL buffer into an array and returns the number of read elements."
        }
    },
    "CLBufferWrite": {
        "group": 2,
        "label": "CLBufferWrite",
        "body": "CLBufferWrite$0",
        "code": [
            {
                "label": "CLBufferWrite(int buffer, const void& data[], uint buffer_offset, uint data_offset, uint data_count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "buffer  [in]  Хендл буфера OpenCL.",
                "data[]  [in]  Массив значений, которые необходимо записать в буфер OpenCL. Передается по ссылке.",
                "buffer_offset  [in]  Смещение в OpenCL буфере в байтах, с которого начинается запись. По умолчанию запись идет с самого начала буфера.",
                "data_offset  [in]  Индекс первого элемента массива, начиная с которого берутся значения из массива для записи в OpenCL буфер. По умолчанию значения берутся с самого начала массива.",
                "data_count  [in]  Количество значений, которые нужно записать. По умолчанию все значения массива."
            ],
            "en": [
                "buffer  [in]  A handle of the OpenCL buffer.",
                "data[]  [in]  An array of values that should be written in the OpenCL buffer. Passed by reference.",
                "buffer_offset  [in]  An offset in the OpenCL buffer in bytes, from which writing begins. By default, writing start with the very beginning of the buffer.",
                "data_offset  [in]  The index of the first array element, starting from which values from the array are written in the OpenCL buffer. By default, values from the very beginning of the array are taken.",
                "data_count  [in]  The number of values that should be written. All the values of the array, by default."
            ]
        },
        "description": {
            "ru": "(uint) Записывает массив в буфер OpenCL и возвращает количество записанных элементов.",
            "en": "(uint) Writes into the OpenCL buffer and returns the number of written elements."
        }
    },
    "CLContextCreate": {
        "group": 2,
        "label": "CLContextCreate",
        "body": "CLContextCreate$0",
        "code": [
            {
                "label": "CLContextCreate(int device)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "device  [in]  Номер OpenCL-устройства в системе по порядку."
            ],
            "en": [
                "device  [in]  The ordinal number of the OpenCL-device in the system."
            ]
        },
        "description": {
            "ru": "(int) Создает контекст OpenCL и возвращает хендл на него.",
            "en": "(int) Creates an OpenCL context and returns its handle."
        }
    },
    "CLContextFree": {
        "group": 2,
        "label": "CLContextFree",
        "body": "CLContextFree$0",
        "code": [
            {
                "label": "CLContextFree(int context)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл контекста OpenCL."
            ],
            "en": [
                "context  [in]  Handle of the OpenCL context."
            ]
        },
        "description": {
            "ru": "(void) Удаляет контекст OpenCL.",
            "en": "(void) Removes an OpenCL context."
        }
    },
    "CLExecute": {
        "group": 2,
        "label": "CLExecute",
        "body": "CLExecute$0",
        "code": [
            {
                "label": "CLExecute(int kernel)",
                "description": {
                    "ru": "1. Запуск функции kernel на одном ядре",
                    "en": "1. Launching kernel functions using one kernel"
                }
            },
            {
                "label": "CLExecute(int kernel, uint work_dim, const uint& global_work_offset[], const uint& global_work_size[])",
                "description": {
                    "ru": "2. Запуск нескольких копий kernel (OpenCL функция) с описанием пространства задач",
                    "en": "2. Launching several kernel copies (OpenCL function) with task space description"
                }
            },
            {
                "label": "CLExecute(int kernel, uint work_dim, const uint& global_work_offset[], const uint& global_work_size[], const uint& local_work_size[])",
                "description": {
                    "ru": "3. Запуск нескольких копий kernel (OpenCL функция) с описанием пространства задач и указанием размера локального подмножества задач в группе",
                    "en": "3. Launching several kernel copies (OpenCL function) with task space description and specification of the size of the group's local task subset"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "kernel  [in]  Хендл на кернел OpenCL.",
                "work_dim  [in]  Размерность пространства задач.",
                "global_work_offset[]  [in]  Начальное смещение в пространстве задач.",
                "global_work_size[]  [in]  Размер подмножества задач.",
                "local_work_size[]  [in]  Размер локального подмножества задач в группе."
            ],
            "en": [
                "kernel  [in]  Handle to the OpenCL kernel.",
                "work_dim  [in]  Dimension of the tasks space.",
                "global_work_offset[]  [in]  Initial offset in the tasks space.",
                "global_work_size[]  [in]  The size of a subset of tasks.",
                "local_work_size[]  [in]  The size of the group's local task subset."
            ]
        },
        "description": {
            "ru": "(bool) Выполняет OpenCL программу. Существует 3 варианта функции:",
            "en": "(bool) The function runs an OpenCL program. There are 3 versions of the function:"
        }
    },
    "CLGetDeviceInfo": {
        "group": 2,
        "label": "CLGetDeviceInfo",
        "body": "CLGetDeviceInfo$0",
        "code": [
            {
                "label": "CLGetDeviceInfo(int handle, int property_id, uchar& data[], uint& size)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "handle  [in]  Номер OpenCL устройства или хендл OpenCL, созданный функцией CLContextCreate().",
                "property_id  [in]  Идентификатор свойства, которое необходимо получить об устройстве OpenCL. Может быть одним из предопределенных значений, перечисленных в таблице ниже.",
                "data[]  [out]  Массив для получения данных о запрашиваемом свойстве.",
                "size  [out]  Размер полученных данных в массиве data[]."
            ],
            "en": [
                "handle  [in]  OpenCL device index or OpenCL handle created by CLContextCreate() function.",
                "property_id  [in]  ID of the OpenCL device property that should be received. The values can be of one of the predetermined ones listed in the table below.",
                "data[]  [out]  The array for receiving data on the requested property.",
                "size  [out]  Size of the received data in the array data[]."
            ]
        },
        "description": {
            "ru": "(bool) Получает свойство устройства из OpenCL драйвера.",
            "en": "(bool) The function receives device property from OpenCL driver."
        }
    },
    "CLGetInfoInteger": {
        "group": 2,
        "label": "CLGetInfoInteger",
        "body": "CLGetInfoInteger$0",
        "code": [
            {
                "label": "CLGetInfoInteger(int handle, ENUM_OPENCL_PROPERTY_INTEGER prop)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "handle  [in]  Хендл на объект OpenCL или номер OpenCL устройства. Нумерация OpenCL устройств начинается с нуля.",
                "prop  [in]  Тип запрашиваемого свойства из перечисления ENUM_OPENCL_PROPERTY_INTEGER, значение которого нужно получить."
            ],
            "en": [
                "handle  [in]  A handle to the OpenCL object or number of the OpenCL device. Numbering of OpenCL devices starts with zero.",
                "prop  [in]  The type of a requested property from the ENUM_OPENCL_PROPERTY_INTEGER enumeration, the value of which you want to obtain."
            ]
        },
        "description": {
            "ru": "(long) Возвращает значение целочисленного свойства для OpenCL-объекта или устройства.",
            "en": "(long) Returns the value of an integer property for an OpenCL object or device."
        }
    },
    "CLHandleType": {
        "group": 2,
        "label": "CLHandleType",
        "body": "CLHandleType$0",
        "code": [
            {
                "label": "CLHandleType(int handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "handle  [in]  Хендл на объект OpenCL: контекст, кернел, буфер или программа OpenCL."
            ],
            "en": [
                "handle  [in]  A handle to an OpenCL object: a context, a kernel or an OpenCL program."
            ]
        },
        "description": {
            "ru": "(ENUM_OPENCL_HANDLE_TYPE) Возвращает тип OpenCL хендла в виде значения из перечисления ENUM_OPENCL_HANDLE_TYPE.",
            "en": "(ENUM_OPENCL_HANDLE_TYPE) Returns the type of an OpenCL handle as a value of the ENUM_OPENCL_HANDLE_TYPE enumeration."
        }
    },
    "CLKernelCreate": {
        "group": 2,
        "label": "CLKernelCreate",
        "body": "CLKernelCreate$0",
        "code": [
            {
                "label": "CLKernelCreate(int program, const string kernel_name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "program  [in]  Хендл на объект программы OpenCL.",
                "kernel_name  [in]  Имя функции кернел, то есть имя точки входа в соответствующей OpenCL-программе, с которой начинается выполнение."
            ],
            "en": [
                "program  [in]  Handle to an object of the OpenCL program.",
                "kernel_name  [in]  The name of the kernel function in the appropriate OpenCL program, in which execution begins."
            ]
        },
        "description": {
            "ru": "(int) Создает точку входа в программу OpenCL и возвращает хендл на неё.",
            "en": "(int) Creates the OpenCL program kernel and returns its handle."
        }
    },
    "CLKernelFree": {
        "group": 2,
        "label": "CLKernelFree",
        "body": "CLKernelFree$0",
        "code": [
            {
                "label": "CLKernelFree(int kernel_name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "kernel_name  [in]  Хендл объекта кернел."
            ],
            "en": [
                "kernel_name  [in]  Handle of the kernel object."
            ]
        },
        "description": {
            "ru": "(void) Удаляет функцию запуска OpenCL.",
            "en": "(void) Removes an OpenCL start function."
        }
    },
    "CLProgramCreate": {
        "group": 2,
        "label": "CLProgramCreate",
        "body": "CLProgramCreate$0",
        "code": [
            {
                "label": "CLProgramCreate(int context, const string source)",
                "description": {
                    "ru": "Создает OpenCL программу из исходного кода.",
                    "en": "Creates an OpenCL program from a source code."
                }
            },
            {
                "label": "CLProgramCreate(int context, const string source, string & build_log)",
                "description": {
                    "ru": "Перегруженная версия функции создает OpenCL программу и записывает сообщения компилятора в переданную строку.",
                    "en": "An overloaded function version creates an OpenCL program and writes compiler messages into the passed string."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл контекста OpenCL.",
                "source  [in]  Строка с исходным кодом OpenCL программы.",
                "build_log  [in]  Строка для получения сообщений компилятора OpenCL."
            ],
            "en": [
                "context  [in]  Handle of the OpenCL context.",
                "source  [in]  String with the source code of the OpenCL program.",
                "build_log  [in]  A string for receiving the OpenCL compiler messages."
            ]
        },
        "description": {
            "ru": "(int) Создает OpenCL программу из исходного кода.",
            "en": "(int) Creates an OpenCL program from a source code."
        }
    },
    "CLProgramFree": {
        "group": 2,
        "label": "CLProgramFree",
        "body": "CLProgramFree$0",
        "code": [
            {
                "label": "CLProgramFree(int program)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "program  [in]  Хендл объекта OpenCL."
            ],
            "en": [
                "program  [in]  Handle of the OpenCL object."
            ]
        },
        "description": {
            "ru": "(void) Удаляет OpenCL программу.",
            "en": "(void) Removes an OpenCL program."
        }
    },
    "CLSetKernelArg": {
        "group": 2,
        "label": "CLSetKernelArg",
        "body": "CLSetKernelArg$0",
        "code": [
            {
                "label": "CLSetKernelArg(int kernel, uint arg_index, void arg_value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "kernel  [in]  Хендл на кернел программы OpenCL.",
                "arg_index  [in]  Номер аргумента функции, нумерация начинается с нуля.",
                "arg_value  [in]  Значение аргумента функции."
            ],
            "en": [
                "kernel  [in]  Handle to a kernel of the OpenCL program.",
                "arg_index  [in]  The number of the function argument, numbering starts with zero.",
                "arg_value  [in]  The value of the function argument."
            ]
        },
        "description": {
            "ru": "(bool) Выставляет параметр для функции OpenCL.",
            "en": "(bool) Sets a parameter for the OpenCL function."
        }
    },
    "CLSetKernelArgMem": {
        "group": 2,
        "label": "CLSetKernelArgMem",
        "body": "CLSetKernelArgMem$0",
        "code": [
            {
                "label": "CLSetKernelArgMem(int kernel, uint arg_index, int cl_mem_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "kernel  [in]  Хендл на кернел программы OpenCL.",
                "arg_index  [in]  Номер аргумента функции, нумерация начинается с нуля.",
                "cl_mem_handle  [in]  Хендл на буфер OpenCL."
            ],
            "en": [
                "kernel  [in]  Handle to a kernel of the OpenCL program.",
                "arg_index  [in]  The number of the function argument, numbering starts with zero.",
                "cl_mem_handle  [in]  A handle to an OpenCL buffer."
            ]
        },
        "description": {
            "ru": "(bool) Выставляет буфер OpenCL в качестве параметра функции OpenCL.",
            "en": "(bool) Sets an OpenCL buffer as a parameter of the OpenCL function."
        }
    },
    "ColorToARGB": {
        "group": 2,
        "label": "ColorToARGB",
        "body": "ColorToARGB$0",
        "code": [
            {
                "label": "ColorToARGB(color clr, uchar alpha)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "clr  [in]  Значение цвета в переменной типа color.",
                "alpha  [in]  Значение альфа-канала, для получения цвета в формате ARGB. Задается значением от 0 (цвет накладываемого пикселя совсем не меняет отображения нижележащего пикселя) до 255 (цвет накладывается полностью и перекрывает собою цвет нижележащего пикселя). Прозрачность цвета в процентом выражении вычисляется как  (1-alpha/255)*100%, то есть чем меньше значение альфа-канала, тем более прозрачен цвет."
            ],
            "en": [
                "clr  [in]  Color value in color type variable.",
                "alpha  [in]  The value of the alpha channel used to receive the color in ARGB format. The value may be set from 0 (a color of a foreground pixel does not change the display of an underlying one) up to 255 (a color of an underlying pixel is completely replaced by the foreground pixel's one). Color transparency in percentage terms is calculated as (1-alpha/255)*100%. In other words, the lesser value of the alpha channel leads to more transparent color."
            ]
        },
        "description": {
            "ru": "(uint) Преобразует тип color в тип uint для получения ARGB-представления цвета. ARGB формат цвета используется при создании графического ресурса, вывода текста и в классе стандартной библиотеки CCanvas.",
            "en": "(uint) The function converts color type into uint type to get ARGB representation of the color. ARGB color format is used to generate a graphical resource, text display, as well as for CCanvas standard library class."
        }
    },
    "ColorToString": {
        "group": 2,
        "label": "ColorToString",
        "body": "ColorToString$0",
        "code": [
            {
                "label": "ColorToString(color color_value, bool color_name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "color_value  [in]  Значение цвета в переменной типа color.",
                "color_name  [in]  Признак необходимости возвращать имя цвета, в случае, если значение цвета совпадает с одной из предопределенных цветовых констант."
            ],
            "en": [
                "color_value  [in]  Color value in color type variable.",
                "color_name  [in]  Return color name if it is identical to one of predefined color constants."
            ]
        },
        "description": {
            "ru": "(string) Преобразует значение цвета в строку вида \"R,G,B\".",
            "en": "(string) It converts color value into string of \"R,G,B\" form."
        }
    },
    "Comment": {
        "group": 2,
        "label": "Comment",
        "body": "Comment$0",
        "code": [
            {
                "label": "Comment(any values)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 1,
        "hm": 0,
        "parameters": {
            "ru": [
                "values  [in]   Любые значения, разделенные запятыми. Для разделения выводимой информации на несколько строк можно использовать символ перевода строки \"\\n\" либо \"\\r\\n\". Количество параметров не может превышать 64. Общая длина выводимого сообщения (включая служебные неотображаемые символы) не может превышать 2045 символов (лишние символы будут обрезаны при выводе)."
            ],
            "en": [
                "values  [in]   Any values, separated by commas. To delimit output information into several lines, a line break symbol \"\\n\" or \"\\r\\n\" is used. Number of parameters cannot exceed 64. Total length of the input comment (including invisible symbols) cannot exceed 2045 characters (excess symbols will be cut out during output)."
            ]
        },
        "description": {
            "ru": "(void) Выводит комментарий, определенный пользователем, в левый верхний угол графика.",
            "en": "(void) This function outputs a comment defined by a user in the top left corner of a chart."
        }
    },
    "CopyBuffer": {
        "group": 2,
        "label": "CopyBuffer",
        "body": "CopyBuffer$0",
        "code": [
            {
                "label": "CopyBuffer(int indicator_handle, int buffer_num, int start_pos, int count, double buffer[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopyBuffer(int indicator_handle, int buffer_num, datetime start_time, int count, double buffer[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopyBuffer(int indicator_handle, int buffer_num, datetime start_time, datetime stop_time, double buffer[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "indicator_handle  [in]  Хэндл индикатора, полученный соответствующей индикаторной функцией.",
                "buffer_num  [in]  Номер индикаторного буфера.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "buffer[]  [out]  Массив типа double."
            ],
            "en": [
                "indicator_handle  [in]  The indicator handle, returned by the corresponding indicator function.",
                "buffer_num  [in]  The indicator buffer number.",
                "start_pos  [in]  The position of the first element to copy.",
                "count  [in]  Data count to copy.",
                "start_time  [in]  Bar time, corresponding to the first element.",
                "stop_time  [in]  Bar time, corresponding to the last element.",
                "buffer[]  [out]  Array of double type."
            ]
        },
        "description": {
            "ru": "(int) Получает в массив buffer данные указанного буфера указанного индикатора в указанном количестве.",
            "en": "(int) Gets data of a specified buffer of a certain indicator in the necessary quantity."
        }
    },
    "CopyClose": {
        "group": 2,
        "label": "CopyClose",
        "body": "CopyClose$0",
        "code": [
            {
                "label": "CopyClose(string symbol_name, ENUM_TIMEFRAMES timeframe, int start_pos, int count, double close_array[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopyClose(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, int count, double close_array[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopyClose(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time, double close_array[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "close_array[]  [out]  Массив типа double."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "start_pos  [in]  The start position for the first element to copy.",
                "count  [in]  Data count to copy.",
                "start_time  [in]  The start time for the first element to copy.",
                "stop_time  [in]  Bar time, corresponding to the last element to copy.",
                "close_array[]  [out]  Array of double type."
            ]
        },
        "description": {
            "ru": "(int) Функция получает в массив close_array исторические данные цен закрытия баров для указанной пары символ-период в указанном количестве. Необходимо отметить, что отсчет элементов от стартовой позиции ведется от настоящего к прошлому, то есть стартовая позиция, равная 0, означает текущий бар.",
            "en": "(int) The function gets into close_array the history data of bar close prices for the selected symbol-period pair in the specified quantity. It should be noted that elements ordering is from present to past, i.e., starting position of 0 means the current bar."
        }
    },
    "CopyHigh": {
        "group": 2,
        "label": "CopyHigh",
        "body": "CopyHigh$0",
        "code": [
            {
                "label": "CopyHigh(string symbol_name, ENUM_TIMEFRAMES timeframe, int start_pos, int count, double high_array[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopyHigh(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, int count, double high_array[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopyHigh(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time, double high_array[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "high_array[]  [out]  Массив типа double."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "start_pos  [in]  The start position for the first element to copy.",
                "count  [in]  Data count to copy.",
                "start_time  [in]  The start time for the first element to copy.",
                "stop_time  [in]  Bar time, corresponding to the last element to copy.",
                "high_array[]  [out]  Array of double type."
            ]
        },
        "description": {
            "ru": "(int) Функция получает в массив high_array исторические данные максимальных цен баров для указанной пары символ-период в указанном количестве. Необходимо отметить, что отсчет элементов от стартовой позиции ведется от настоящего к прошлому, то есть стартовая позиция, равная 0, означает текущий бар.",
            "en": "(int) The function gets into high_array the history data of highest bar prices for the selected symbol-period pair in the specified quantity. It should be noted that elements ordering is from present to past, i.e., starting position of 0 means the current bar."
        }
    },
    "CopyLow": {
        "group": 2,
        "label": "CopyLow",
        "body": "CopyLow$0",
        "code": [
            {
                "label": "CopyLow(string symbol_name, ENUM_TIMEFRAMES timeframe, int start_pos, int count, double low_array[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopyLow(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, int count, double low_array[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopyLow(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time, double low_array[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "low_array[]  [out]  Массив типа double."
            ],
            "en": [
                "symbol_name  [in]  Symbol.",
                "timeframe  [in]  Period.",
                "start_pos  [in]  The start position for the first element to copy.",
                "count  [in]  Data count to copy.",
                "start_time  [in]  Bar time, corresponding to the first element to copy.",
                "stop_time  [in]  Bar time, corresponding to the last element to copy.",
                "low_array[]  [out]  Array of double type."
            ]
        },
        "description": {
            "ru": "(int) Функция получает в массив low_array исторические данные минимальных цен баров для указанной пары символ-период в указанном количестве. Необходимо отметить, что отсчет элементов от стартовой позиции ведется от настоящего к прошлому, то есть стартовая позиция, равная 0, означает текущий бар.",
            "en": "(int) The function gets into low_array the history data of minimal bar prices for the selected symbol-period pair in the specified quantity. It should be noted that elements ordering is from present to past, i.e., starting position of 0 means the current bar."
        }
    },
    "CopyOpen": {
        "group": 2,
        "label": "CopyOpen",
        "body": "CopyOpen$0",
        "code": [
            {
                "label": "CopyOpen(string symbol_name, ENUM_TIMEFRAMES timeframe, int start_pos, int count, double open_array[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopyOpen(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, int count, double open_array[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopyOpen(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time, double open_array[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "open_array[]  [out]  Массив типа double."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "start_pos  [in]  The start position for the first element to copy.",
                "count  [in]  Data count to copy.",
                "start_time  [in]  The start time for the first element to copy.",
                "stop_time  [in]  The start time for the last element to copy.",
                "open_array[]  [out]  Array of double type."
            ]
        },
        "description": {
            "ru": "(int) Функция получает в массив open_array исторические данные цен открытия баров для указанной пары символ-период в указанном количестве. Необходимо отметить, что отсчет элементов от стартовой позиции ведется от настоящего к прошлому, то есть стартовая позиция, равная 0, означает текущий бар.",
            "en": "(int) The function gets into open_array the history data of bar open prices for the selected symbol-period pair in the specified quantity. It should be noted that elements ordering is from present to past, i.e., starting position of 0 means the current bar."
        }
    },
    "CopyRates": {
        "group": 2,
        "label": "CopyRates",
        "body": "CopyRates$0",
        "code": [
            {
                "label": "CopyRates(string symbol_name, ENUM_TIMEFRAMES timeframe, int start_pos, int count, MqlRates rates_array[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopyRates(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, int count, MqlRates rates_array[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopyRates(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time, MqlRates rates_array[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "rates_array[]  [out]  Массив типа MqlRates."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "start_time  [in]  Bar time for the first element to copy.",
                "start_pos  [in]  The start position for the first element to copy.",
                "count  [in]  Data count to copy.",
                "stop_time  [in]  Bar time, corresponding to the last element to copy.",
                "rates_array[]  [out]  Array of MqlRates type."
            ]
        },
        "description": {
            "ru": "(int) Получает в массив rates_array исторические данные структуры MqlRates указанного символа-периода в указанном количестве. Отсчет элементов от стартовой позиции ведется от настоящего к прошлому, то есть стартовая позиция, равная 0, означает текущий бар.",
            "en": "(int) Gets history data of MqlRates structure of a specified symbol-period in specified quantity into the rates_array array. The elements ordering of the copied data is from present to the past, i.e., starting position of 0 means the current bar."
        }
    },
    "CopyRealVolume": {
        "group": 2,
        "label": "CopyRealVolume",
        "body": "CopyRealVolume$0",
        "code": [
            {
                "label": "CopyRealVolume(string symbol_name, ENUM_TIMEFRAMES timeframe, int start_pos, int count, long volume_array[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopyRealVolume(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, int count, long volume_array[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopyRealVolume(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time, long volume_array[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "volume_array[]  [out]  Массив типа  long."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "start_pos  [in]  The start position for the first element to copy.",
                "count  [in]  Data count to copy.",
                "start_time  [in]  The start time for the first element to copy.",
                "stop_time  [in]  Bar time, corresponding to the last element to copy.",
                "volume_array[]  [out]  Array of  long type."
            ]
        },
        "description": {
            "ru": "(int) Функция получает в массив volume_array исторические данные торговых объемов для указанной пары символ-период в указанном количестве. Необходимо отметить, что отсчет элементов от стартовой позиции ведется от настоящего к прошлому, то есть стартовая позиция, равная 0, означает текущий бар.",
            "en": "(int) The function gets into volume_array the history data of trade volumes for the selected symbol-period pair in the specified quantity. It should be noted that elements ordering is from present to past, i.e., starting position of 0 means the current bar."
        }
    },
    "CopySpread": {
        "group": 2,
        "label": "CopySpread",
        "body": "CopySpread$0",
        "code": [
            {
                "label": "CopySpread(string symbol_name, ENUM_TIMEFRAMES timeframe, int start_pos, int count, int spread_array[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopySpread(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, int count, int spread_array[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopySpread(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time, int spread_array[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "spread_array[]  [out]  Массив типа int."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "start_pos  [in]  The start position for the first element to copy.",
                "count  [in]  Data count to copy.",
                "start_time  [in]  The start time for the first element to copy.",
                "stop_time  [in]  Bar time, corresponding to the last element to copy.",
                "spread_array[]  [out]  Array of int type."
            ]
        },
        "description": {
            "ru": "(int) Функция получает в массив spread_array исторические данные спредов для указанной пары символ-период в указанном количестве. Необходимо отметить, что отсчет элементов от стартовой позиции ведется от настоящего к прошлому, то есть стартовая позиция, равная 0, означает текущий бар.",
            "en": "(int) The function gets into spread_array the history data of spread values for the selected symbol-period pair in the specified quantity. It should be noted that elements ordering is from present to past, i.e., starting position of 0 means the current bar."
        }
    },
    "CopyTicks": {
        "group": 2,
        "label": "CopyTicks",
        "body": "CopyTicks$0",
        "code": [
            {
                "label": "CopyTicks(string symbol_name, MqlTick& ticks_array[], uint flags, ulong from, uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "ticks_array[]  [out]  Массив типа MqlTick для приема тиков.",
                "flags  [in]  Флаг, определяющий тип запрашиваемых тиков. COPY_TICKS_INFO – тики, вызванные изменениями Bid и/или Ask, COPY_TICKS_TRADE – тики с изменения Last и Volume, COPY_TICKS_ALL – все тики. При любом типе запроса в оставшиеся поля структуры MqlTick дописываются значения предыдущего тика.",
                "from  [in]  Дата, начиная с которой запрашиваются тики. Указывается в миллисекундах с 01.01.1970. Если параметр from=0, то отдаются последние count тиков.",
                "count  [in]  Количество запрашиваемых тиков. Если параметры from и count не указаны, то в массив ticks_array[] будут записаны все доступные последние тики, но не более 2000."
            ],
            "en": [
                "symbol_name  [in]  Symbol.",
                "ticks_array[]  [out]  An array of the MqlTick type for receiving ticks.",
                "flags  [in]  A flag to define the type of the requested ticks. COPY_TICKS_INFO – ticks with Bid and/or Ask changes, COPY_TICKS_TRADE – ticks with changes in Last and Volume, COPY_TICKS_ALL – all ticks. For any type of request, the values of the previous tick are added to the remaining fields of the MqlTick structure.",
                "from  [in]   The date from which you want to request ticks. In milliseconds since 1970.01.01. If from=0, the last count ticks will be returned.",
                "count  [in]  The number of requested ticks. If the 'from' and 'count' parameters are not specified, all available recent ticks (but not more than 2000) will be written to ticks_array[]."
            ]
        },
        "description": {
            "ru": "(int) Функция получает в массив ticks_array тики в формате MqlTick, при этом индексация ведётся от прошлого к настоящему, то есть тик с индексом 0 является самым старым в массиве. Для анализа тика необходимо проверять поле flags, которое сообщает, что именно было изменено в данном тике.",
            "en": "(int) The function receives ticks in the MqlTick format into ticks_array. In this case, ticks are indexed from the past to the present, i.e. the 0 indexed tick is the oldest one in the array. For tick analysis, check the flags field, which shows what exactly has changed in the tick."
        }
    },
    "CopyTickVolume": {
        "group": 2,
        "label": "CopyTickVolume",
        "body": "CopyTickVolume$0",
        "code": [
            {
                "label": "CopyTickVolume(string symbol_name, ENUM_TIMEFRAMES timeframe, int start_pos, int count, long volume_array[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopyTickVolume(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, int count, long volume_array[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopyTickVolume(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time, long volume_array[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "volume_array[]  [out]  Массив типа long."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "start_pos  [in]  The start position for the first element to copy.",
                "count  [in]  Data count to copy.",
                "start_time  [in]  The start time for the first element to copy.",
                "stop_time  [in]  Bar time, corresponding to the last element to copy.",
                "volume_array[]  [out]  Array of  long type."
            ]
        },
        "description": {
            "ru": "(int) Функция получает в массив volume_array исторические данные тиковых объемов для указанной пары символ-период в указанном количестве. Необходимо отметить, что отсчет элементов от стартовой позиции ведется от настоящего к прошлому, то есть стартовая позиция, равная 0, означает текущий бар.",
            "en": "(int) The function gets into volume_array the history data of tick volumes for the selected symbol-period pair in the specified quantity. It should be noted that elements ordering is from present to past, i.e., starting position of 0 means the current bar."
        }
    },
    "CopyTime": {
        "group": 2,
        "label": "CopyTime",
        "body": "CopyTime$0",
        "code": [
            {
                "label": "CopyTime(string symbol_name, ENUM_TIMEFRAMES timeframe, int start_pos, int count, datetime time_array[])",
                "description": {
                    "ru": "Обращение по начальной позиции и количеству требуемых элементов",
                    "en": "Call by the first position and the number of required elements"
                }
            },
            {
                "label": "CopyTime(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, int count, datetime time_array[])",
                "description": {
                    "ru": "Обращение по начальной дате и количеству требуемых элементов",
                    "en": "Call by the start date and the number of required elements"
                }
            },
            {
                "label": "CopyTime(string symbol_name, ENUM_TIMEFRAMES timeframe, datetime start_time, datetime stop_time, datetime time_array[])",
                "description": {
                    "ru": "Обращение по начальной и конечной датам требуемого интервала времени",
                    "en": "Call by the start and end dates of a required time interval"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "start_pos  [in]  Номер первого копируемого элемента.",
                "count  [in]  Количество копируемых элементов.",
                "start_time  [in]  Время бара, соответствующее первому элементу.",
                "stop_time  [in]  Время бара, соответствующее последнему элементу.",
                "time_array[]  [out]  Массив типа datetime."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "start_pos  [in]  The start position for the first element to copy.",
                "count  [in]  Data count to copy.",
                "start_time  [in]  The start time for the first element to copy.",
                "stop_time  [in]  Bar time corresponding to the last element to copy.",
                "time_array[]  [out]  Array of datetime type."
            ]
        },
        "description": {
            "ru": "(int) Функция получает в массив time_array исторические данные времени открытия баров для указанной пары символ-период в указанном количестве. Необходимо отметить, что отсчет элементов от стартовой позиции ведется от настоящего к прошлому, то есть стартовая позиция, равная 0, означает текущий бар.",
            "en": "(int) The function gets to time_array history data of bar opening time for the specified symbol-period pair in the specified quantity. It should be noted that elements ordering is from present to past, i.e., starting position of 0 means the current bar."
        }
    },
    "cos": {
        "group": 2,
        "label": "cos",
        "body": "cos$0",
        "code": [
            {
                "label": "cos(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Угол в радианах."
            ],
            "en": [
                "value  [in]  Angle in radians."
            ]
        },
        "description": {
            "ru": "(double) Функция возвращает косинус угла.",
            "en": "(double) The function returns the cosine of an angle."
        }
    },
    "CryptDecode": {
        "group": 2,
        "label": "CryptDecode",
        "body": "CryptDecode$0",
        "code": [
            {
                "label": "CryptDecode(ENUM_CRYPT_METHOD method, const uchar& data[], const uchar& key[], uchar& result[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "method  [in]  Метод преобразования. Может быть одним из значений перечисления ENUM_CRYPT_METHOD.",
                "data[]  [in]  Массив-источник.",
                "key[]  [in]  Ключ шифрования.",
                "result[]  [out]  Массив-приемник."
            ],
            "en": [
                "method  [in]  Data transformation method. Can be one of the values of ENUM_CRYPT_METHOD enumeration.",
                "data[]  [in]  Source array.",
                "key[]  [in]  Key array.",
                "result[]  [out]  Destination array."
            ]
        },
        "description": {
            "ru": "(int) Производит обратное преобразование данных массива, полученного при помощи функции CryptEncode().",
            "en": "(int) Performs the inverse transformation of the data from array, tranformed by CryptEncode()."
        }
    },
    "CryptEncode": {
        "group": 2,
        "label": "CryptEncode",
        "body": "CryptEncode$0",
        "code": [
            {
                "label": "CryptEncode(ENUM_CRYPT_METHOD method, const uchar& data[], const uchar& key[], uchar& result[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "method  [in]  Метод преобразования. Может быть одним из значений перечисления ENUM_CRYPT_METHOD.",
                "data[]  [in]  Массив-источник.",
                "key[]  [in]  Ключ шифрования.",
                "result[]  [out]  Массив-приемник."
            ],
            "en": [
                "method  [in]  Data transformation method. Can be one of the values of ENUM_CRYPT_METHOD enumeration.",
                "data[]  [in]  Source array.",
                "key[]  [in]  Key array.",
                "result[]  [out]  Destination array."
            ]
        },
        "description": {
            "ru": "(int) Преобразует данные массива-источника в массив-приемник указанным методом.",
            "en": "(int) Transforms the data from array with the specified method."
        }
    },
    "CustomSymbolCreate": {
        "group": 2,
        "label": "CustomSymbolCreate",
        "body": "CustomSymbolCreate$0",
        "code": [
            {
                "label": "CustomSymbolCreate(const string symbol_name, const string symbol_path, const string symbol_origin)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Имя пользовательского символа. Не должно содержать групп или подгрупп, в котором символ находится.",
                "symbol_path  [in]  Имя группы, в которой создается символ.",
                "symbol_origin  [in]  Имя символа, из которого будут скопированы свойства создаваемого пользовательского символа. После создания пользовательского символа можно изменить любое свойство на нужное значение соответствующими функциями."
            ],
            "en": [
                "symbol_name  [in]  Custom symbol name. It should not contain groups or subgroups the symbol is located in.",
                "symbol_path  [in]  The group name a symbol is located in.",
                "symbol_origin  [in]  Name of a symbol the properties of a created custom symbol are to be copied from. After creating a custom symbol, any property value can be changed to a necessary one using the appropriate functions."
            ]
        },
        "description": {
            "ru": "(bool) Создает пользовательский символ с указанным именем в указанной группе.",
            "en": "(bool) Creates a custom symbol with the specified name in the specified group."
        }
    },
    "CustomSymbolDelete": {
        "group": 2,
        "label": "CustomSymbolDelete",
        "body": "CustomSymbolDelete$0",
        "code": [
            {
                "label": "CustomSymbolDelete(const string symbol_name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Имя пользовательского символа. Не должно совпадать с именем уже существующего символа."
            ],
            "en": [
                "symbol_name  [in]  Custom symbol name. It should not match the name of an already existing symbol."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет пользовательский символ с указанным именем.",
            "en": "(bool) Deletes a custom symbol with the specified name."
        }
    },
    "CustomSymbolSetInteger": {
        "group": 2,
        "label": "CustomSymbolSetInteger",
        "body": "CustomSymbolSetInteger$0",
        "code": [
            {
                "label": "CustomSymbolSetInteger(const string symbol_name, ENUM_SYMBOL_INFO_INTEGER property_id, long property_value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Имя пользовательского символа.",
                "property_id  [in]  Идентификатор свойства символа. Значение может быть одним из значений перечисления ENUM_SYMBOL_INFO_INTEGER.",
                "property_value  [in]  Переменная типа long, содержащая значение свойства."
            ],
            "en": [
                "symbol_name  [in]  Custom symbol name.",
                "property_id  [in]  Symbol property ID. The value can be one of the values of the ENUM_SYMBOL_INFO_INTEGER enumeration.",
                "property_value  [in]  A long type variable containing the property value."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает для пользовательского символа значение свойства целочисленного типа.",
            "en": "(bool) Sets the integer type property value for a custom symbol."
        }
    },
    "CustomSymbolSetDouble": {
        "group": 2,
        "label": "CustomSymbolSetDouble",
        "body": "CustomSymbolSetDouble$0",
        "code": [
            {
                "label": "CustomSymbolSetDouble(const string symbol_name, ENUM_SYMBOL_INFO_DOUBLE property_id, double property_value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Имя пользовательского символа.",
                "property_id  [in]  Идентификатор свойства символа. Значение может быть одним из значений перечисления ENUM_SYMBOL_INFO_DOUBLE.",
                "property_value  [in]  Переменная типа double, содержащая значение свойства."
            ],
            "en": [
                "symbol_name  [in]  Custom symbol name.",
                "property_id  [in]  Symbol property ID. The value can be one of the values of the ENUM_SYMBOL_INFO_DOUBLE enumeration.",
                "property_value  [in]  A double type variable containing the property value."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает для пользовательского символа значение свойства вещественного типа.",
            "en": "(bool) Sets the real type property value for a custom symbol."
        }
    },
    "CustomSymbolSetString": {
        "group": 2,
        "label": "CustomSymbolSetString",
        "body": "CustomSymbolSetString$0",
        "code": [
            {
                "label": "CustomSymbolSetString(const string symbol_name, ENUM_SYMBOL_INFO_STRING property_id, string property_value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Имя пользовательского символа.",
                "property_id  [in]  Идентификатор свойства символа. Значение может быть одним из значений перечисления ENUM_SYMBOL_INFO_STRING.",
                "property_value  [in]  Переменная типа string, содержащая значение свойства."
            ],
            "en": [
                "symbol_name  [in]  Custom symbol name.",
                "property_id  [in]  Symbol property ID. The value can be one of the values of the ENUM_SYMBOL_INFO_STRING enumeration.",
                "property_value  [in]  A string type variable containing the property value."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает для пользовательского символа значение свойства строкового типа.",
            "en": "(bool) Sets the string type property value for a custom symbol."
        }
    },
    "CustomSymbolSetMarginRate": {
        "group": 2,
        "label": "CustomSymbolSetMarginRate",
        "body": "CustomSymbolSetMarginRate$0",
        "code": [
            {
                "label": "CustomSymbolSetMarginRate(const string symbol_name, ENUM_ORDER_TYPE order_type, double initial_margin_rate, double maintenance_margin_rate)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Имя пользовательского символа.",
                "order_type  [in]  Тип ордера.",
                "initial_margin_rate  [in] Переменная типа double  со значением коэффициента взимания начальной маржи. Начальная маржа – это размер гарантийной суммы под совершение сделки объемом в 1 лот соответствующего направления. Умножая коэффициент на начальную маржу, мы можем получить размер средств, который будет зарезервирован на счете при размещении ордера указанного типа.",
                "maintenance_margin_rate  [in] Переменная типа double со значением коэффициента взимания поддерживающей маржи. Поддерживающая маржа – это размер минимальной суммы для поддержания открытой позиции объемом в 1 лот соответствующего направления. Умножая коэффициент на поддерживающую маржу, мы можем получить размер средств, который будет зарезервирован на счете после срабатывания ордера указанного типа."
            ],
            "en": [
                "symbol_name  [in]  Custom symbol name.",
                "order_type  [in]  Order type.",
                "initial_margin_rate  [in] A double type variable with an initial margin rate. Initial margin is a security deposit for 1 lot deal in the appropriate direction. Multiplying the rate by the initial margin, we receive the amount of funds to be reserved on the account when placing an order of the specified type.",
                "maintenance_margin_rate  [in] A double type variable with a maintenance margin rate. Maintenance margin is a minimum amount for maintaining an open position of 1 lot in the appropriate direction. Multiplying the rate by the maintenance margin, we receive the amount of funds to be reserved on the account after an order of the specified type is activated."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает для пользовательского символа коэффициенты взимания маржи в зависимости от типа и направления ордера.",
            "en": "(bool) Sets the margin rates depending on the order type and direction for a custom symbol."
        }
    },
    "CustomSymbolSetSessionQuote": {
        "group": 2,
        "label": "CustomSymbolSetSessionQuote",
        "body": "CustomSymbolSetSessionQuote$0",
        "code": [
            {
                "label": "CustomSymbolSetSessionQuote(const string symbol_name, ENUM_DAY_OF_WEEK day_of_week, uint session_index, datetime from, datetime to)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Имя пользовательского символа.",
                "day_of_week  [in]  День недели, значение из перечисления ENUM_DAY_OF_WEEK.",
                "session_index  [in]  Порядковый номер сессии, для которой нужно установить время начала и время окончания. Индексация сессий начинается с 0.",
                "from  [in]  Время начала сессии в секундах от 00 часов 00 минут, значение даты в переменной будет проигнорировано.",
                "to  [in]  Время окончания сессии  в секундах от 00 часов 00 минут, значение даты в переменной будет проигнорировано."
            ],
            "en": [
                "symbol_name  [in]  Custom symbol name.",
                "day_of_week  [in]  Week day, value from the ENUM_DAY_OF_WEEK enumeration.",
                "session_index  [in]  Index of the session, for which start and end times are to be set. Session indexing starts from 0.",
                "from  [in]  Session start time in seconds from 00:00, data value in the variable is ignored.",
                "to  [in]  Session end time in seconds from 00:00, data value in the variable is ignored."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает время начала и время окончания указанной котировочной сессии для указанных символа и дня недели.",
            "en": "(bool) Sets the start and end time of the specified quotation session for the specified symbol and week day."
        }
    },
    "CustomSymbolSetSessionTrade": {
        "group": 2,
        "label": "CustomSymbolSetSessionTrade",
        "body": "CustomSymbolSetSessionTrade$0",
        "code": [
            {
                "label": "CustomSymbolSetSessionTrade(const string symbol_name, ENUM_DAY_OF_WEEK day_of_week, uint session_index, datetime from, datetime to)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Имя пользовательского символа.",
                "day_of_week  [in]  День недели, значение из перечисления ENUM_DAY_OF_WEEK.",
                "session_index  [in]  Порядковый номер сессии, для которой нужно установить время начала и время окончания. Индексация сессий начинается с 0.",
                "from  [in]  Время начала сессии в секундах от 00 часов 00 минут, значение даты в переменной будет проигнорировано.",
                "to  [in]  Время окончания сессии  в секундах от 00 часов 00 минут, значение даты в переменной будет проигнорировано."
            ],
            "en": [
                "symbol_name  [in]  Custom symbol name.",
                "day_of_week  [in]  Week day, value from the ENUM_DAY_OF_WEEK enumeration.",
                "session_index  [in]  Index of the session, for which start and end times are to be set. Session indexing starts from 0.",
                "from  [in]  Session start time in seconds from 00:00, data value in the variable is ignored.",
                "to  [in]  Session end time in seconds from 00:00, data value in the variable is ignored."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает время начала и время окончания указанной торговой сессии для указанных символа и дня недели.",
            "en": "(bool) Sets the start and end time of the specified trading session for the specified symbol and week day."
        }
    },
    "CustomRatesDelete": {
        "group": 2,
        "label": "CustomRatesDelete",
        "body": "CustomRatesDelete$0",
        "code": [
            {
                "label": "CustomRatesDelete(const string symbol, datetime from, datetime to)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя пользовательского инструмента.",
                "from  [in]  Время первого бара в ценовой истории из указанного диапазона, подлежащего удалению.",
                "to  [in]  Время последнего бара в ценовой истории из указанного диапазона, подлежащего удалению."
            ],
            "en": [
                "symbol  [in]  Custom symbol name.",
                "from  [in]  Time of the first bar in the price history within the specified range to be removed.",
                "to  [in]  Time of the last bar in the price history within the specified range to be removed."
            ]
        },
        "description": {
            "ru": "(int) Удаляет все бары в указанном временном интервале из ценовой истории пользовательского инструмента.",
            "en": "(int) Deletes all bars from the price history of the custom symbol in the specified time interval."
        }
    },
    "CustomRatesReplace": {
        "group": 2,
        "label": "CustomRatesReplace",
        "body": "CustomRatesReplace$0",
        "code": [
            {
                "label": "CustomRatesReplace(const string symbol, datetime from, datetime to, const MqlRates& rates[], uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя пользовательского инструмента.",
                "from  [in]  Время первого бара в ценовой истории из указанного диапазона, подлежащего обновлению.",
                "to  [in]  Время последнего бара в ценовой истории из указанного диапазона, подлежащего обновлению.",
                "rates[]  [in]   Массив исторических данных типа MqlRates для таймфрейма M1.",
                "count  [in]  Количество элементов из массива rates[], которые будут использованы для замены. Значение WHOLE_ARRAY означает, что для замены необходимо использовать все элементы массива rates[]."
            ],
            "en": [
                "symbol  [in]  Custom symbol name.",
                "from  [in]  Time of the first bar in the price history within the specified range to be updated.",
                "to  [in]  Time of the last bar in the price history within the specified range to be updated.",
                "rates[]  [in]   Array of the MqlRates type history data for M1.",
                "count  [in]  Number of the rates[] array elements to be used for replacement. WHOLE_ARRAY means that all rates[] array elements should be used for replacement."
            ]
        },
        "description": {
            "ru": "(int) Полностью заменяет ценовую историю пользовательского инструмента в указанном временном интервале данными из массива типа MqlRates.",
            "en": "(int) Fully replaces the price history of the custom symbol within the specified time interval with the data from the MqlRates type array."
        }
    },
    "CustomRatesUpdate": {
        "group": 2,
        "label": "CustomRatesUpdate",
        "body": "CustomRatesUpdate$0",
        "code": [
            {
                "label": "CustomRatesUpdate(const string symbol, const MqlRates& rates[], uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя пользовательского инструмента.",
                "rates[]  [in]  Массив исторических данных типа MqlRates для таймфрейма M1.",
                "count  [in]  Количество элементов из массива rates[], которые будут использованы для обновления. Значение WHOLE_ARRAY означает, что необходимо использовать все элементы массива rates[]."
            ],
            "en": [
                "symbol  [in]  Custom symbol name.",
                "rates[]  [in]  Array of the MqlRates type history data for M1.",
                "count  [in]  Number of the rates[] array elements to be used for update. WHOLE_ARRAY means that all rates[] array elements should be used."
            ]
        },
        "description": {
            "ru": "(int) Добавляет в историю пользовательского инструмента отсутствующие бары и заменяет существующие данными из массива типа MqlRates.",
            "en": "(int) Adds missing bars to the custom symbol history and replaces existing data with  the ones from the MqlRates type array."
        }
    },
    "CustomTicksAdd": {
        "group": 2,
        "label": "CustomTicksAdd",
        "body": "CustomTicksAdd$0",
        "code": [
            {
                "label": "CustomTicksAdd(const string symbol, const MqlTick& ticks[], uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя пользовательского инструмента.",
                "ticks[]  [in]   Массив тиковых данных типа MqlTick, упорядоченных по времени в порядке возрастания, то есть требуется чтобы ticks[k].time_msc <= ticks[n].time_msc, если k<n.",
                "count  [in]  Количество элементов из массива ticks[], которые будут использованы для добавления. Значение WHOLE_ARRAY означает, что необходимо использовать все элементы массива ticks[]."
            ],
            "en": [
                "symbol  [in]  The name of the custom symbol.",
                "ticks[]  [in]   An array of tick data of the MqlTick type arranged in order of time from earlier data to more recent ones, i.e. ticks[k].time_msc <= ticks[n].time_msc, if k<n.",
                "count  [in]  Number of the ticks[] array elements to be used for adding. WHOLE_ARRAY means that all ticks[] array elements should be used."
            ]
        },
        "description": {
            "ru": "(int) Добавляет в ценовую историю пользовательского инструмента данные из массива типа MqlTick. Пользовательский символ должен быть выбран в окне MarketWatch (Обзор рынка).",
            "en": "(int) Adds data from an array of the MqlTick type to the price history of a custom symbol. The custom symbol must be selected in the Market Watch window."
        }
    },
    "CustomTicksDelete": {
        "group": 2,
        "label": "CustomTicksDelete",
        "body": "CustomTicksDelete$0",
        "code": [
            {
                "label": "CustomTicksDelete(const string symbol, long from_msc, long to_msc)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя пользовательского инструмента.",
                "from_msc  [in]  Время первого тика в ценовой истории из указанного диапазона, подлежащего удалению. Время в миллисекундах с 01.01.1970.",
                "to_msc  [in]  Время последнего тика в ценовой истории из указанного диапазона, подлежащего удалению. Время в миллисекундах с 01.01.1970."
            ],
            "en": [
                "symbol  [in]  Custom symbol name.",
                "from_msc  [in]  Time of the first tick in the price history within the specified range to be removed. Time in milliseconds since 01.01.1970.",
                "to_msc  [in]  Time of the last tick in the price history within the specified range to be removed. Time in milliseconds since 01.01.1970."
            ]
        },
        "description": {
            "ru": "(int) Удаляет все тики в указанном временном интервале из ценовой истории пользовательского инструмента.",
            "en": "(int) Deletes all ticks from the price history of the custom symbol in the specified time interval."
        }
    },
    "CustomTicksReplace": {
        "group": 2,
        "label": "CustomTicksReplace",
        "body": "CustomTicksReplace$0",
        "code": [
            {
                "label": "CustomTicksReplace(const string symbol, long from_msc, long to_msc, const MqlTick& ticks[], uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя пользовательского инструмента.",
                "from_msc  [in]  Время первого тика в ценовой истории из указанного диапазона, подлежащего удалению. Время в миллисекундах с 01.01.1970.",
                "to_msc  [in]  Время последнего тика в ценовой истории из указанного диапазона, подлежащего удалению. Время в миллисекундах с 01.01.1970.",
                "ticks[]  [in]   Массив тиковых данных типа MqlTick, упорядоченных по времени в порядке возрастания.",
                "count  [in]  Количество элементов из массива ticks[], которые будут использованы для замены в указанном интервале времени. Значение WHOLE_ARRAY означает, что необходимо использовать все элементы массива ticks[]."
            ],
            "en": [
                "symbol  [in]  Custom symbol name.",
                "from_msc  [in]  Time of the first tick in the price history within the specified range to be removed. Time in milliseconds since 01.01.1970.",
                "to_msc  [in]  Time of the last tick in the price history within the specified range to be removed. Time in milliseconds since 01.01.1970.",
                "ticks[]  [in]   Array of the MqlTick type tick data ordered in time in ascending order.",
                "count  [in]  Number of the ticks[] array elements to be used for replacement in the specified time interval. WHOLE_ARRAY means that all ticks[] array elements should be used."
            ]
        },
        "description": {
            "ru": "(int) Полностью заменяет ценовую историю пользовательского инструмента в указанном временном интервале данными из массива типа MqlTick.",
            "en": "(int) Fully replaces the price history of the custom symbol within the specified time interval with the data from the MqlTick type array."
        }
    },
    "CustomBookAdd": {
        "group": 2,
        "label": "CustomBookAdd",
        "body": "CustomBookAdd$0",
        "code": [
            {
                "label": "CustomBookAdd(const string symbol, const MqlBookInfo& books[], uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя пользовательского инструмента.",
                "books[]  [in]   Массив данных типа MqlBookInfo, полностью описывающих состояние стакана цен — все заявки на покупку и продажу. Переданное состояние стакана цен полностью заменяет предыдущее.",
                "count  [in]   Количество элементов массива books[], которое должно быть передано в функцию. По умолчанию используется весь массив."
            ],
            "en": [
                "symbol  [in]  Custom symbol name.",
                "books[]  [in]   The array of MqlBookInfo type data fully describing the Depth of Market status — all buy and sell requests. The passed Depth of Market status completely replaces the previous one.",
                "count  [in]   The number of 'books' array elements to be passed to the function. The entire array is used by default."
            ]
        },
        "description": {
            "ru": "(int) Передает состояние стакана цен по пользовательскому инструменту. Функция позволяет транслировать стакан цен так, как если бы он приходил от сервера брокера.",
            "en": "(int) Passes the status of the Depth of Market for a custom symbol. The function allows broadcasting the Depth of Market as if the prices arrive from a broker's server."
        }
    },
    "DatabaseOpen": {
        "group": 2,
        "label": "DatabaseOpen",
        "body": "DatabaseOpen$0",
        "code": [
            {
                "label": "DatabaseOpen(string filename, uint flags)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "filename  [in]  Имя файла относительно папки \"MQL5\\Files\".",
                "flags  [in]  Комбинация флагов из перечисления ENUM_DATABASE_OPEN_FLAGS."
            ],
            "en": [
                "filename  [in]  File name relative to the \"MQL5\\Files\" folder.",
                "flags  [in]  Combination of flags from the ENUM_DATABASE_OPEN_FLAGS enumeration."
            ]
        },
        "description": {
            "ru": "(int) Открывает или создаёт базу данных в указанном файле.",
            "en": "(int) Opens or creates a database in a specified file."
        }
    },
    "DatabaseClose": {
        "group": 2,
        "label": "DatabaseClose",
        "body": "DatabaseClose$0",
        "code": [
            {
                "label": "DatabaseClose(int database)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, полученный в DatabaseOpen()."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen()."
            ]
        },
        "description": {
            "ru": "(void) Закрывает базу данных.",
            "en": "(void) Closes a database."
        }
    },
    "DatabaseImport": {
        "group": 2,
        "label": "DatabaseImport",
        "body": "DatabaseImport$0",
        "code": [
            {
                "label": "DatabaseImport(int database, const string table, const string filename, uint flags, const string separator, ulong skip_rows, const string skip_comments)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, который получен в DatabaseOpen().",
                "table  [in]  Имя таблицы, в которую будут добавлены данные из файла.",
                "filename  [in]  CSV-файл или ZIP-архив для чтения данных, имя может содержать подпапки и задается относительно папки MQL5\\Files.",
                "flags  [in]  Комбинация флагов.",
                "separator  [in]  Разделитель данных в CSV-файле.",
                "skip_rows  [in]  Количество начальных строк, которые необходимо пропустить при чтении данных из файла.",
                "skip_comments  [in]  Строка из символов для обозначения строк как комментариев. Если в начале строки найден любой символ из skip_comments,  то такая строка считается комментарием и не импортируется."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen().",
                "table  [in]  Name of a table the data from a file is to be added to.",
                "filename  [in]  CSV file or ZIP archive for reading data. The name may contain subdirectories and is set relative to the MQL5\\Files folder.",
                "flags  [in]  Combination of flags.",
                "separator  [in]  Data separator in CSV file.",
                "skip_rows  [in]  Number of initial strings to be skipped when reading data from the file.",
                "skip_comments  [in]  String of characters for designating strings as comments. If any character from skip_comments is detected at the beginning of a string, such a string is considered a comment and is not imported."
            ]
        },
        "description": {
            "ru": "(long) Импортирует в таблицу данные из файла.",
            "en": "(long) Imports data from a file into a table."
        }
    },
    "DatabaseExport": {
        "group": 2,
        "label": "DatabaseExport",
        "body": "DatabaseExport$0",
        "code": [
            {
                "label": "DatabaseExport(int database, const string table_or_sql, const string filename, uint flags, const string separator)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, который получен в DatabaseOpen().",
                "table_or_sql  [in]  Имя таблицы или текст SQL-запроса, результаты которого будут экспортированы в указанный файл.",
                "filename  [in]  Имя файла для экспорта данных. Путь задается относительно папки MQL5\\Files.",
                "flags  [in]  Комбинация флагов, определяющая вывод в файл.",
                "separator  [in]  Разделитель данных. Если указан NULL, то в качестве разделителя будет использоваться символ табуляции '\\t'.  Пустая строка \"\" считается допустимым разделителем, но полученный CSV-файл не может быть прочитан как таблица – это будет набор строк."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen().",
                "table_or_sql  [in]   A name of a table or a text of an SQL request whose results are to be exported to a specified file.",
                "filename  [in]  A file name for data export. The path is set relative to the MQL5\\Files folder.",
                "flags  [in]  Combination of flags defining the output to a file.",
                "separator  [in]  Data separator. If NULL is specified, the '\\t' tabulation character is used as a separator.  An empty string \"\" is considered a valid separator but the obtained CSV file cannot be read as a table – it is considered as a set of strings."
            ]
        },
        "description": {
            "ru": "(long) Экспортирует таблицу или результат выполнения SQL-запроса в CSV-файл. Файл создается в кодировке UTF-8.",
            "en": "(long) Exports a table or an SQL request execution result to a CSV file. The file is created in the UTF-8 encoding."
        }
    },
    "DatabasePrint": {
        "group": 2,
        "label": "DatabasePrint",
        "body": "DatabasePrint$0",
        "code": [
            {
                "label": "DatabasePrint(int database, const string table_or_sql, uint flags)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, который получен в DatabaseOpen().",
                "table_or_sql  [in]  Имя таблицы или текст SQL-запроса, результаты которого выведены в журнал экспертов.",
                "flags  [in]  Комбинация флагов, определяющая форматирование вывода."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen().",
                "table_or_sql  [in]  A name of a table or a text of an SQL request whose results are displayed in the Experts journal.",
                "flags  [in]  Combination of flags defining the output formatting."
            ]
        },
        "description": {
            "ru": "(long) Печатает таблицу или результат выполнения SQL-запроса в журнал экспертов.",
            "en": "(long) Prints a table or an SQL request execution result in the Experts journal."
        }
    },
    "DatabaseTableExists": {
        "group": 2,
        "label": "DatabaseTableExists",
        "body": "DatabaseTableExists$0",
        "code": [
            {
                "label": "DatabaseTableExists(int database, string table)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, который получен в DatabaseOpen().",
                "table  [in]  Имя таблицы."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen().",
                "table  [in]  Table name."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет наличие таблицы в базе данных.",
            "en": "(bool) Checks the presence of the table in a database."
        }
    },
    "DatabaseExecute": {
        "group": 2,
        "label": "DatabaseExecute",
        "body": "DatabaseExecute$0",
        "code": [
            {
                "label": "DatabaseExecute(int database, string sql)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, который получен в DatabaseOpen().",
                "sql  [in]  SQL запрос."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen().",
                "sql  [in]  SQL request."
            ]
        },
        "description": {
            "ru": "(bool) Исполняет запрос к указанной базе данных.",
            "en": "(bool) Executes a request to a specified database."
        }
    },
    "DatabasePrepare": {
        "group": 2,
        "label": "DatabasePrepare",
        "body": "DatabasePrepare$0",
        "code": [
            {
                "label": "DatabasePrepare(int database, string sql,  request parameters)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 3,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, который получен в DatabaseOpen().",
                "sql  [in]  SQL запрос, который может содержать автоподставляемые параметры с именами ?1,?2,...",
                "parameters  [in]  Автоматически подставляемые параметры запроса."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen().",
                "sql  [in]  SQL request that may contain automatically substituted parameters named ?1,?2,...",
                "parameters  [in]  Automatically substituted request parameters."
            ]
        },
        "description": {
            "ru": "(int) Создает хендл запроса, который затем может быть исполнен с помощью DatabaseRead().",
            "en": "(int) Creates a handle of a request, which can then be executed using DatabaseRead()."
        }
    },
    "DatabaseReset": {
        "group": 2,
        "label": "DatabaseReset",
        "body": "DatabaseReset$0",
        "code": [
            {
                "label": "DatabaseReset(int request)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, который получен в DatabasePrepare()."
            ],
            "en": [
                "request  [in]  The handle of the request obtained in DatabasePrepare()."
            ]
        },
        "description": {
            "ru": "(int) Сбрасывает запрос в начальное состояние, как после вызова DatabasePrepare().",
            "en": "(int) Resets a request, like after calling DatabasePrepare()."
        }
    },
    "DatabaseBind": {
        "group": 2,
        "label": "DatabaseBind",
        "body": "DatabaseBind$0",
        "code": [
            {
                "label": "DatabaseBind(int request, int index, T value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, созданного в DatabasePrepare().",
                "index  [in]  Индекс параметра в запросе, для которого нужно установить значение. Нумерация начинается с нуля.",
                "value  [in]  Значение параметра, которое необходимо установить. Разрешенные типы: bool, char, uchar, short, ushart, int, uint, color, datetime, long, ulong, float, double, string."
            ],
            "en": [
                "request  [in]  The handle of a request created in DatabasePrepare().",
                "index  [in]  The parameter index in the request a value should be set for. The numbering starts with zero.",
                "value  [in]  The value to be set. Extended types: bool, char, uchar, short, ushart, int, uint, color, datetime, long, ulong, float, double, string."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает значение параметра в запросе.",
            "en": "(bool) Sets a parameter value in a request."
        }
    },
    "DatabaseBindArray": {
        "group": 2,
        "label": "DatabaseBindArray",
        "body": "DatabaseBindArray$0",
        "code": [
            {
                "label": "DatabaseBindArray(int request, int index, T& array[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, созданного в DatabasePrepare().",
                "index  [in]  Индекс параметра в запросе, для которого нужно установить значение. Нумерация начинается с нуля.",
                "array[]  [in]  Массив, который необходимо установить в качестве значения параметра запроса."
            ],
            "en": [
                "request  [in]  The handle of a request created in DatabasePrepare().",
                "index  [in]  The parameter index in the request a value should be set for. The numbering starts with zero.",
                "array[]  [in]  The array to be set as a request parameter value."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает массив в качестве значения параметра.",
            "en": "(bool) Sets an array as a parameter value."
        }
    },
    "DatabaseRead": {
        "group": 2,
        "label": "DatabaseRead",
        "body": "DatabaseRead$0",
        "code": [
            {
                "label": "DatabaseRead(int request)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, который получен в DatabasePrepare()."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare()."
            ]
        },
        "description": {
            "ru": "(bool) Выполняет переход к следующей записи в результате запроса.",
            "en": "(bool) Moves to the next entry as a result of a request."
        }
    },
    "DatabaseReadBind": {
        "group": 2,
        "label": "DatabaseReadBind",
        "body": "DatabaseReadBind$0",
        "code": [
            {
                "label": "DatabaseReadBind(int request, void& struct_object)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, созданного в DatabasePrepare().",
                "struct_object  [out]  Ссылка на структуру, в которую будут прочитаны данные из текущей записи. Структура должна иметь в качестве членов только числовые типы и/или строки (массивы не разрешены) и не может быть наследником."
            ],
            "en": [
                "request  [in]  The handle of a request created in DatabasePrepare().",
                "struct_object  [out]  The reference to the structure the data from the current record is to be read to. The structure should only have numerical types and/or strings (arrays are not allowed) as members and cannot be a descendant."
            ]
        },
        "description": {
            "ru": "(bool) Выполняет переход к следующей записи и читает из неё данные в структуру.",
            "en": "(bool) Moves to the next record and reads data into the structure from it."
        }
    },
    "DatabaseFinalize": {
        "group": 2,
        "label": "DatabaseFinalize",
        "body": "DatabaseFinalize$0",
        "code": [
            {
                "label": "DatabaseFinalize(int request)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare()."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare()."
            ]
        },
        "description": {
            "ru": "(void) Удаляет запрос, созданный в DatabasePrepare().",
            "en": "(void) Removes a request created in DatabasePrepare()."
        }
    },
    "DatabaseTransactionBegin": {
        "group": 2,
        "label": "DatabaseTransactionBegin",
        "body": "DatabaseTransactionBegin$0",
        "code": [
            {
                "label": "DatabaseTransactionBegin(int database)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, полученный в DatabaseOpen()."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen()."
            ]
        },
        "description": {
            "ru": "(bool) Начинает выполнение транзакции.",
            "en": "(bool) Starts transaction execution."
        }
    },
    "DatabaseTransactionCommit": {
        "group": 2,
        "label": "DatabaseTransactionCommit",
        "body": "DatabaseTransactionCommit$0",
        "code": [
            {
                "label": "DatabaseTransactionCommit(int database)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, полученный в DatabaseOpen()."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen()."
            ]
        },
        "description": {
            "ru": "(bool) Завершает выполнение транзакции.",
            "en": "(bool) Completes transaction execution."
        }
    },
    "DatabaseTransactionRollback": {
        "group": 2,
        "label": "DatabaseTransactionRollback",
        "body": "DatabaseTransactionRollback$0",
        "code": [
            {
                "label": "DatabaseTransactionRollback(int database)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "database  [in]  Хендл базы данных, полученный в DatabaseOpen()."
            ],
            "en": [
                "database  [in]  Database handle received in DatabaseOpen()."
            ]
        },
        "description": {
            "ru": "(bool) Выполняет откат транзакций.",
            "en": "(bool) Rolls back transactions."
        }
    },
    "DatabaseColumnsCount": {
        "group": 2,
        "label": "DatabaseColumnsCount",
        "body": "DatabaseColumnsCount$0",
        "code": [
            {
                "label": "DatabaseColumnsCount(int request)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare()."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare()."
            ]
        },
        "description": {
            "ru": "(int) Получает количество полей в запросе.",
            "en": "(int) Gets the number of fields in a request."
        }
    },
    "DatabaseColumnName": {
        "group": 2,
        "label": "DatabaseColumnName",
        "body": "DatabaseColumnName$0",
        "code": [
            {
                "label": "DatabaseColumnName(int request, int column, string& name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare().",
                "column  [in]  Номер поля в запросе. Нумерация полей начинается с нуля и не может превышать значение DatabaseColumnsCount() - 1.",
                "name  [out]  Переменная для записи имени поля."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare().",
                "column  [in]  Field index in the request. Field numbering starts from zero and cannot exceed DatabaseColumnsCount() - 1.",
                "name  [out]  Variable for writing the field name."
            ]
        },
        "description": {
            "ru": "(bool) Получает имя поля по номеру.",
            "en": "(bool) Gets a field name by index."
        }
    },
    "DatabaseColumnType": {
        "group": 2,
        "label": "DatabaseColumnType",
        "body": "DatabaseColumnType$0",
        "code": [
            {
                "label": "DatabaseColumnType(int request, int column)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare().",
                "column  [in]  Номер поля в запросе. Нумерация полей начинается с нуля и не может превышать значение DatabaseColumnsCount() - 1."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare().",
                "column  [in]  Field index in the request. Field numbering starts from zero and cannot exceed DatabaseColumnsCount() - 1."
            ]
        },
        "description": {
            "ru": "(ENUM_DATABASE_FIELD_TYPE) Получает тип поля по номеру.",
            "en": "(ENUM_DATABASE_FIELD_TYPE) Gets a field type by index."
        }
    },
    "DatabaseColumnSize": {
        "group": 2,
        "label": "DatabaseColumnSize",
        "body": "DatabaseColumnSize$0",
        "code": [
            {
                "label": "DatabaseColumnSize(int request, int column)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare().",
                "column  [in]  Номер поля в запросе. Нумерация полей начинается с нуля и не может превышать значение DatabaseColumnsCount() - 1."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare().",
                "column  [in]  Field index in the request. Field numbering starts from zero and cannot exceed DatabaseColumnsCount() - 1."
            ]
        },
        "description": {
            "ru": "(int) Получает размер поля в байтах.",
            "en": "(int) Gets a field size in bytes."
        }
    },
    "DatabaseColumnText": {
        "group": 2,
        "label": "DatabaseColumnText",
        "body": "DatabaseColumnText$0",
        "code": [
            {
                "label": "DatabaseColumnText(int request, int column, string& value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare().",
                "column  [in]  Номер поля в запросе. Нумерация полей начинается с нуля и не может превышать значение DatabaseColumnsCount() - 1.",
                "value  [out]  Ссылка на переменную для записи значения поля."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare().",
                "column  [in]  Field index in the request. Field numbering starts from zero and cannot exceed DatabaseColumnsCount() - 1.",
                "value  [out]  Reference to the variable for writing the field value."
            ]
        },
        "description": {
            "ru": "(bool) Получает из текущей записи значение поля в виде строки.",
            "en": "(bool) Gets a field value as a string from the current record."
        }
    },
    "DatabaseColumnInteger": {
        "group": 2,
        "label": "DatabaseColumnInteger",
        "body": "DatabaseColumnInteger$0",
        "code": [
            {
                "label": "DatabaseColumnInteger(int request, int column, int& value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare().",
                "column  [in]  Номер поля в запросе. Нумерация полей начинается с нуля и не может превышать значение DatabaseColumnsCount() - 1.",
                "value  [out]  Ссылка на переменную для записи значения поля."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare().",
                "column  [in]  Field index in the request. Field numbering starts from zero and cannot exceed DatabaseColumnsCount() - 1.",
                "value  [out]  Reference to the variable for writing the field value."
            ]
        },
        "description": {
            "ru": "(bool) Получает из текущей записи значение типа int.",
            "en": "(bool) Gets the int type value from the current record."
        }
    },
    "DatabaseColumnLong": {
        "group": 2,
        "label": "DatabaseColumnLong",
        "body": "DatabaseColumnLong$0",
        "code": [
            {
                "label": "DatabaseColumnLong(int request, int column, long& value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare().",
                "column  [in]  Номер поля в запросе. Нумерация полей начинается с нуля и не может превышать значение DatabaseColumnsCount() - 1.",
                "value  [out]  Ссылка на переменную для записи значения поля."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare().",
                "column  [in]  Field index in the request. Field numbering starts from zero and cannot exceed DatabaseColumnsCount() - 1.",
                "value  [out]  Reference to the variable for writing the field value."
            ]
        },
        "description": {
            "ru": "(bool) Получает из текущей записи значение типа long.",
            "en": "(bool) Gets the long type value from the current record."
        }
    },
    "DatabaseColumnDouble": {
        "group": 2,
        "label": "DatabaseColumnDouble",
        "body": "DatabaseColumnDouble$0",
        "code": [
            {
                "label": "DatabaseColumnDouble(int request, int column, double& value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare().",
                "column  [in]  Номер поля в запросе. Нумерация полей начинается с нуля и не может превышать значение DatabaseColumnsCount() - 1.",
                "value  [out]  Ссылка на переменную для записи значения поля."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare().",
                "column  [in]  Field index in the request. Field numbering starts from zero and cannot exceed DatabaseColumnsCount() - 1.",
                "value  [out]  Reference to the variable for writing the field value."
            ]
        },
        "description": {
            "ru": "(bool) Получает из текущей записи значение типа double.",
            "en": "(bool) Gets the double type value from the current record."
        }
    },
    "DatabaseColumnBlob": {
        "group": 2,
        "label": "DatabaseColumnBlob",
        "body": "DatabaseColumnBlob$0",
        "code": [
            {
                "label": "DatabaseColumnBlob(int request, int column, void& data[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Хендл запроса, полученный в DatabasePrepare().",
                "column  [in]  Номер поля в запросе. Нумерация полей начинается с нуля и не может превышать значение DatabaseColumnsCount() - 1.",
                "data[]  [out]  Ссылка на массив для записи значения поля."
            ],
            "en": [
                "request  [in]  Request handle received in DatabasePrepare().",
                "column  [in]  Field index in the request. Field numbering starts from zero and cannot exceed DatabaseColumnsCount() - 1.",
                "data[]  [out]  Reference to the array for writing the field value."
            ]
        },
        "description": {
            "ru": "(bool) Получает из текущей записи значение поля в виде массива.",
            "en": "(bool) Gets a field value as an array from the current record."
        }
    },
    "DebugBreak": {
        "group": 2,
        "label": "DebugBreak",
        "body": "DebugBreak($0)",
        "code": [
            {
                "label": "DebugBreak()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Программная точка останова при отладке.",
            "en": "(void) It is a program breakpoint in debugging."
        }
    },
    "Digits": {
        "group": 2,
        "label": "Digits",
        "body": "Digits($0)",
        "code": [
            {
                "label": "Digits()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает количество десятичных знаков после запятой, определяющее точность измерения цены символа текущего графика.",
            "en": "(int) Returns the number of decimal digits determining the accuracy of price of the current chart symbol."
        }
    },
    "DoubleToString": {
        "group": 2,
        "label": "DoubleToString",
        "body": "DoubleToString$0",
        "code": [
            {
                "label": "DoubleToString(double value, int digits)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Величина с плавающей точкой.",
                "digits  [in]  Формат точности. Если значение digits лежит в диапазоне от 0 до 16, то будет получено строковое представление числа с указанным количество знаков после запятой. Если значение digits лежит в диапазоне от -1 до -16, то будет получено строковое представление числа в научном формате с указанным количеством знаков после запятой. Во всех остальных случаях строковое представление числа будет содержать 8 знаков после запятой."
            ],
            "en": [
                "value  [in]  Value with a floating point.",
                "digits  [in]  Accuracy format. If the digits value is in the range between 0 and 16, a string presentation of a number with the specified number of digits after the point will be obtained. If the digits value is in the range between -1 and -16, a string representation of a number in the scientific format with the specified number of digits after the decimal point will be obtained. In all other cases the string value will contain 8 digits after the decimal point."
            ]
        },
        "description": {
            "ru": "(string) Преобразование числового значения в текстовую строку.",
            "en": "(string) Converting numeric value into text string."
        }
    },
    "DXContextCreate": {
        "group": 2,
        "label": "DXContextCreate",
        "body": "DXContextCreate$0",
        "code": [
            {
                "label": "DXContextCreate(uint width, uint height)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "width  [in]  Ширина кадра в пикселях.",
                "height  [in]  Высота кадра в пикселях."
            ],
            "en": [
                "width  [in]  Frame width in pixels.",
                "height  [in]  Frame height in pixels."
            ]
        },
        "description": {
            "ru": "(int) Создает графический контекст для отрисовки кадров указанного размера.",
            "en": "(int) Creates a graphic context for rendering frames of a specified size."
        }
    },
    "DXContextSetSize": {
        "group": 2,
        "label": "DXContextSetSize",
        "body": "DXContextSetSize$0",
        "code": [
            {
                "label": "DXContextSetSize(int context, uint& width, uint& height)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "width  [in]  Ширина кадра в пикселях.",
                "height  [in]  Высота кадра в пикселях."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "width  [in]  Frame width in pixels.",
                "height  [in]  Frame height in pixels."
            ]
        },
        "description": {
            "ru": "(bool) Изменяет размер кадра графического контекста, созданного в DXContextCreate().",
            "en": "(bool) Changes a frame size of a graphic context created in DXContextCreate()."
        }
    },
    "DXContextClearColors": {
        "group": 2,
        "label": "DXContextClearColors",
        "body": "DXContextClearColors$0",
        "code": [
            {
                "label": "DXContextClearColors(int context, const DXVector& color)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "color  [in]  Цвет для отрисовки."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "color  [in]  Rendering color."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает для буфера отрисовки все пиксели в указанный цвет.",
            "en": "(bool) Sets a specified color to all pixels for the rendering buffer."
        }
    },
    "DXContextClearDepth": {
        "group": 2,
        "label": "DXContextClearDepth",
        "body": "DXContextClearDepth$0",
        "code": [
            {
                "label": "DXContextClearDepth(int context)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate()."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate()."
            ]
        },
        "description": {
            "ru": "(bool) Очищает буфер глубины.",
            "en": "(bool) Clears the depth buffer."
        }
    },
    "DXContextGetColors": {
        "group": 2,
        "label": "DXContextGetColors",
        "body": "DXContextGetColors$0",
        "code": [
            {
                "label": "DXContextGetColors(int context, uint& image[], int image_width, int image_height, int image_offset_x, int image_offset_y)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "image[]  [out]  Массив пикселей размера image_width*image_height в формате ARGB.",
                "image_width  [in]  Ширина изображения в пикселях.",
                "image_height  [in]  Высота изображения в пикселях.",
                "image_offset_x  [in]  Смещение по горизонтали.",
                "image_offset_y  [in]  Смещение по вертикали."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "image[]  [out]  The array of image_width*image_height pixels in ARGB format.",
                "image_width  [in]  Image width in pixels.",
                "image_height  [in]  Image height in pixels.",
                "image_offset_x  [in]  X offset.",
                "image_offset_y  [in]  Y offset."
            ]
        },
        "description": {
            "ru": "(bool) Получает из графического контекста изображение указанного размера и смещения.",
            "en": "(bool) Gets an image of a specified size and offset from a graphic context."
        }
    },
    "DXContextGetDepth": {
        "group": 2,
        "label": "DXContextGetDepth",
        "body": "DXContextGetDepth$0",
        "code": [
            {
                "label": "DXContextGetDepth(int context, float& image[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "image[]  [out]  Массив значений буфера глубины отрисованного кадра."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "image[]  [out]  Array of the rendered frame depth buffer values."
            ]
        },
        "description": {
            "ru": "(bool) Получает буфер глубины отрисованного кадра.",
            "en": "(bool) Gets the depth buffer of a rendered frame."
        }
    },
    "DXBufferCreate": {
        "group": 2,
        "label": "DXBufferCreate",
        "body": "DXBufferCreate$0",
        "code": [
            {
                "label": "DXBufferCreate(int context, ENUM_DX_BUFFER_TYPE buffer_type, const void& data[], uint start, uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "buffer_type  [in]  Тип буфера из перечисления ENUM_DX_BUFFER_TYPE.",
                "data[]  [in]  Данные для создания буфера.",
                "start  [in]  Индекс первого элемента массива, начиная с которого берутся значения из массива для создания буфера. По умолчанию берутся данные с начала массива.",
                "count  [in]  Количество значений.  По умолчанию используется весь массив (count=WHOLE_ARRAY)."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "buffer_type  [in]  Buffer type from the ENUM_DX_BUFFER_TYPE enumeration.",
                "data[]  [in]  Data for creating a buffer.",
                "start  [in]  Index of the first element of the array, starting from which the array values are used to create a buffer. By default, the data is taken from the beginning of the array.",
                "count  [in]  Number of values.  By default, the entire array is used (count=WHOLE_ARRAY)."
            ]
        },
        "description": {
            "ru": "(int) Создает буфер указанного типа на основе массива данных.",
            "en": "(int) Creates a buffer of a specified type based on a data array."
        }
    },
    "DXTextureCreate": {
        "group": 2,
        "label": "DXTextureCreate",
        "body": "DXTextureCreate$0",
        "code": [
            {
                "label": "DXTextureCreate(int context, ENUM_DX_FORMAT format, uint width, uint height, const void& data[], uint data_x, uint data_y, uint data_width, uint data_height)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "format  [in]  Формат цвета пикселя, задаваемый из перечисления ENUM_DX_FORMAT.",
                "width  [in]  Ширина изображения, на основе которого создается текстура.",
                "height  [in]  Высота изображения, на основе которого создается текстура.",
                "data[]  [in]  Массив пикселей изображения, на основе которого создается текстура.",
                "data_x  [in]  X-координата прямоугольника (смещение по горизонтали), из которого будет создана текстура.",
                "data_y  [in]  Y-координата прямоугольника (смещение по вертикали), из которого будет создана текстура.",
                "data_width  [in]  Ширина прямоугольника, из которого будет создана текстура.",
                "data_height  [in]  Высота прямоугольника, из которого будет создана текстура."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "format  [in]  Pixel color format set from the ENUM_DX_FORMAT enumeration.",
                "width  [in]  Width of an image a texture is based on.",
                "height  [in]  Height of an image a texture is based on.",
                "data[]  [in]  Pixel array of an image a texture is based on.",
                "data_x  [in]  X coordinate of a rectangle (X offset) used to create a texture.",
                "data_y  [in]  Y coordinate of a rectangle (Y offset) used to create a texture.",
                "data_width  [in]  Width of a rectangle used to create a texture.",
                "data_height  [in]  Height of a rectangle used to create a texture."
            ]
        },
        "description": {
            "ru": "(int) Создает 2-мерную текстуру из прямоугольника заданного размера, вырезанного из переданного изображения.",
            "en": "(int) Creates a 2D texture out of a rectangle of a specified size cut from a passed image."
        }
    },
    "DXInputCreate": {
        "group": 2,
        "label": "DXInputCreate",
        "body": "DXInputCreate$0",
        "code": [
            {
                "label": "DXInputCreate(int context, uint input_size)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "input_size  [in]  Размер структуры параметров в байтах."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "input_size  [in]  Size of the parameter structure in bytes."
            ]
        },
        "description": {
            "ru": "(int) Создает входные параметры шейдера.",
            "en": "(int) Creates shader inputs."
        }
    },
    "DXInputSet": {
        "group": 2,
        "label": "DXInputSet",
        "body": "DXInputSet$0",
        "code": [
            {
                "label": "DXInputSet(int input, const void& data)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "input  [in]  Хендл входных параметров шейдера, полученного в DXInputCreate().",
                "data  [in]  Данные для установки входных параметров шейдера."
            ],
            "en": [
                "input  [in]  Handle of inputs for a shader obtained in DXInputCreate().",
                "data  [in]  Data for setting shader inputs."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает входные параметры шейдера.",
            "en": "(bool) Sets shader inputs."
        }
    },
    "DXShaderCreate": {
        "group": 2,
        "label": "DXShaderCreate",
        "body": "DXShaderCreate$0",
        "code": [
            {
                "label": "DXShaderCreate(int context, ENUM_DX_SHADER_TYPE shader_type, const string source, const string entry_point, string& compile_error)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "shader_type  [out]  Значение из перечисления ENUM_DX_SHADER_TYPE.",
                "source  [in]  Исходный код шейдера, написанный на HLSL 5.",
                "entry_point  [in]  Точка входа – название функции в исходном коде.",
                "compile_error  [in]  Строка для получения ошибок компиляции."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "shader_type  [out]  The value from the ENUM_DX_SHADER_TYPE enumeration.",
                "source  [in]  Shader source code in HLSL 5.",
                "entry_point  [in]  Entry point – function name in a source code.",
                "compile_error  [in]  String for receiving compilation errors."
            ]
        },
        "description": {
            "ru": "(int) Создает шейдер указанного типа.",
            "en": "(int) Creates a shader of a specified type."
        }
    },
    "DXShaderSetLayout": {
        "group": 2,
        "label": "DXShaderSetLayout",
        "body": "DXShaderSetLayout$0",
        "code": [
            {
                "label": "DXShaderSetLayout(int shader, const DXVertexLayout& layout[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "shader  [in]  Хендл вершинного шейдера, созданного в DXShaderCreate().",
                "layout[]  [in]  Массив описания полей вершин."
            ],
            "en": [
                "shader  [in]  Handle of a vertex shader created in DXShaderCreate().",
                "layout[]  [in]  Array of vertex fields description."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает разметку вершин для вершинного шейдера.",
            "en": "(bool) Sets vertex layout for the vertex shader."
        }
    },
    "DXShaderInputsSet": {
        "group": 2,
        "label": "DXShaderInputsSet",
        "body": "DXShaderInputsSet$0",
        "code": [
            {
                "label": "DXShaderInputsSet(int shader, const int& inputs[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "shader  [in]  Хендл шейдера, созданного в DXShaderCreate().",
                "inputs[]  [in]  Массив хендлов входных параметров, созданных с помощью DXInputCreate()."
            ],
            "en": [
                "shader  [in]  Handle of a shader created in DXShaderCreate().",
                "inputs[]  [in]  Array of input handles created using DXInputCreate()."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает входные параметры шейдера.",
            "en": "(bool) Sets shader inputs."
        }
    },
    "DXShaderTexturesSet": {
        "group": 2,
        "label": "DXShaderTexturesSet",
        "body": "DXShaderTexturesSet$0",
        "code": [
            {
                "label": "DXShaderTexturesSet(int shader, const  int& textures[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "shader  [in]  Хендл шейдера, созданного в DXShaderCreate().",
                "textures[]  [in]  Массив хендлов текстур, созданных с помощью DXTextureCreate()."
            ],
            "en": [
                "shader  [in]  Handle of a shader created in DXShaderCreate().",
                "textures[]  [in]  Array of texture handles created using DXTextureCreate()."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает текстуры для шейдера.",
            "en": "(bool) Sets shader textures."
        }
    },
    "DXDraw": {
        "group": 2,
        "label": "DXDraw",
        "body": "DXDraw$0",
        "code": [
            {
                "label": "DXDraw(int context, uint start, uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "start  [in]  Индекс первой вершины для отрисовки.",
                "count  [in]  Количество вершин для отрисовки."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "start  [in]  Index of the first vertex for rendering.",
                "count  [in]  Number of vertices to render."
            ]
        },
        "description": {
            "ru": "(bool) Отрисовывает вершины вершинного буфера, установленного в DXBufferSet().",
            "en": "(bool) Renders the vertices of the vertex buffer set in DXBufferSet()."
        }
    },
    "DXDrawIndexed": {
        "group": 2,
        "label": "DXDrawIndexed",
        "body": "DXDrawIndexed$0",
        "code": [
            {
                "label": "DXDrawIndexed(int context, uint start, uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "start  [in]  Индекс первого примитива для отрисовки.",
                "count  [in]  Количество примитивов для отрисовки."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "start  [in]  Index of the first primitive for rendering.",
                "count  [in]  Number of primitives for rendering."
            ]
        },
        "description": {
            "ru": "(bool) Отрисовывает графические примитивы, описанные индексным буфером из DXBufferSet().",
            "en": "(bool) Renders graphic primitives described by the index buffer from DXBufferSet()."
        }
    },
    "DXPrimiveTopologySet": {
        "group": 2,
        "label": "DXPrimiveTopologySet",
        "body": "DXPrimiveTopologySet$0",
        "code": [
            {
                "label": "DXPrimiveTopologySet(int context, ENUM_DX_PRIMITIVE_TOPOLOGY primitive_topology)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "primitive_topology  [in]  Значение из перечисления ENUM_DX_PRIMITIVE_TOPOLOGY."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "primitive_topology  [in]  The value from the ENUM_DX_PRIMITIVE_TOPOLOGY enumeration."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает тип примитивов для отрисовки с помощью DXDrawIndexed().",
            "en": "(bool) Sets the type of primitives for rendering using DXDrawIndexed()."
        }
    },
    "DXBufferSet": {
        "group": 2,
        "label": "DXBufferSet",
        "body": "DXBufferSet$0",
        "code": [
            {
                "label": "DXBufferSet(int context, int buffer, uint start, uint count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "buffer  [in]  Хендл вершинного или индексного буфера, созданного в DXBufferCreate().",
                "start  [in]  Индекс первого элемента буфера. По умолчанию используются данные с начала буфера.",
                "count  [in]  Количество значений, которые нужно использовать. По умолчанию все значения буфера."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "buffer  [in]  Handle of the vertex or index buffer created in DXBufferCreate().",
                "start  [in]  Index of the buffer first element. The data from the beginning of the buffer is used by default.",
                "count  [in]  Number of values to be used. The default is all buffer values."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает буфер для текущей отрисовки.",
            "en": "(bool) Sets a buffer for the current rendering."
        }
    },
    "DXShaderSet": {
        "group": 2,
        "label": "DXShaderSet",
        "body": "DXShaderSet$0",
        "code": [
            {
                "label": "DXShaderSet(int context, int shader)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "context  [in]  Хендл на графический контекст, созданный в DXContextCreate().",
                "shader  [in]  Хендл шейдера, созданного в DXShaderCreate()."
            ],
            "en": [
                "context  [in]  Handle for a graphic context created in DXContextCreate().",
                "shader  [in]  Handle of a shader created in DXShaderCreate()."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает шейдер для отрисовки.",
            "en": "(bool) Sets a shader for rendering."
        }
    },
    "DXHandleType": {
        "group": 2,
        "label": "DXHandleType",
        "body": "DXHandleType$0",
        "code": [
            {
                "label": "DXHandleType(int handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "handle  [in]     Хендл."
            ],
            "en": [
                "handle  [in]     Handle."
            ]
        },
        "description": {
            "ru": "(ENUM_DX_HANDLE_TYPE) Возвращает тип хендла.",
            "en": "(ENUM_DX_HANDLE_TYPE) Returns a handle type."
        }
    },
    "DXRelease": {
        "group": 2,
        "label": "DXRelease",
        "body": "DXRelease$0",
        "code": [
            {
                "label": "DXRelease(int handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "handle  [in]  Освобождаемый хендл."
            ],
            "en": [
                "handle  [in]  Released handle."
            ]
        },
        "description": {
            "ru": "(bool) Освобождает хендл.",
            "en": "(bool) Releases a handle."
        }
    },
    "EnumToString": {
        "group": 2,
        "label": "EnumToString",
        "body": "EnumToString$0",
        "code": [
            {
                "label": "EnumToString(any_enum value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Значение перечисления любого типа."
            ],
            "en": [
                "value  [in]  Any type enumeration value."
            ]
        },
        "description": {
            "ru": "(string) Преобразование значения перечисления любого типа в текстовое представление.",
            "en": "(string) Converting an enumeration value of any type to a text form."
        }
    },
    "EventChartCustom": {
        "group": 2,
        "label": "EventChartCustom",
        "body": "EventChartCustom$0",
        "code": [
            {
                "label": "EventChartCustom(long chart_id, ushort custom_event_id, long lparam, double dparam, string sparam)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "custom_event_id  [in]  Идентификатор пользовательского события. Этот идентификатор автоматически добавляется к значению CHARTEVENT_CUSTOM и преобразуется к целому типу.",
                "lparam  [in]  Параметр события типа long, передаваемый функции OnChartEvent.",
                "dparam  [in]  Параметр события типа double, передаваемый функции OnChartEvent.",
                "sparam  [in]  Параметр события типа string, передаваемый функции OnChartEvent. Если строка имеет длину больше, чем 63 символа, то строка усекается."
            ],
            "en": [
                "chart_id  [in] Chart identifier. 0 means the current chart.",
                "custom_event_id  [in] ID of the user events. This identifier is automatically added to the value CHARTEVENT_CUSTOM and converted to the integer type.",
                "lparam  [in] Event parameter of the long type passed to the OnChartEvent function.",
                "dparam  [in] Event parameter of the double type passed to the OnChartEvent function.",
                "sparam  [in] Event parameter of the string type passed to the OnChartEvent function. If the string is longer than 63 characters, it is truncated."
            ]
        },
        "description": {
            "ru": "(bool) Генерирует пользовательское событие для указанного графика.",
            "en": "(bool) The function generates a custom event for the specified chart."
        }
    },
    "EventKillTimer": {
        "group": 2,
        "label": "EventKillTimer",
        "body": "EventKillTimer($0)",
        "code": [
            {
                "label": "EventKillTimer()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Указывает клиентскому терминалу, что необходимо остановить генерацию событий от таймера для данного эксперта или индикатора.",
            "en": "(void) Specifies the client terminal that is necessary to stop the generation of events from Timer."
        }
    },
    "EventSetMillisecondTimer": {
        "group": 2,
        "label": "EventSetMillisecondTimer",
        "body": "EventSetMillisecondTimer$0",
        "code": [
            {
                "label": "EventSetMillisecondTimer(int milliseconds)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "milliseconds  [in]  Количество миллисекунд, определяющее периодичность возникновения событий от таймера."
            ],
            "en": [
                "milliseconds  [in]  Number of milliseconds defining the frequency of timer events."
            ]
        },
        "description": {
            "ru": "(bool) Указывает клиентскому терминалу, что для данного эксперта или индикатора необходимо генерировать события таймера с периодичностью менее одной секунды.",
            "en": "(bool) The function indicates to the client terminal that timer events should be generated at intervals less than one second for this Expert Advisor or indicator."
        }
    },
    "EventSetTimer": {
        "group": 2,
        "label": "EventSetTimer",
        "body": "EventSetTimer$0",
        "code": [
            {
                "label": "EventSetTimer(int seconds)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "seconds  [in]  Количество секунд, определяющее периодичность возникновения событий от таймера."
            ],
            "en": [
                "seconds  [in] Number of seconds that determine the frequency of the timer event occurrence."
            ]
        },
        "description": {
            "ru": "(bool) Указывает клиентскому терминалу, что для данного эксперта или индикатора необходимо генерировать события от таймера с указанной периодичностью.",
            "en": "(bool) The function indicates to the client terminal, that for this indicator or Expert Advisor, events from the timer must be generated with the specified periodicity."
        }
    },
    "exp": {
        "group": 2,
        "label": "exp",
        "body": "exp$0",
        "code": [
            {
                "label": "exp(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Число, определяющее степень."
            ],
            "en": [
                "value  [in]  A number specifying the power."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение числа e в степени d.",
            "en": "(double) The function returns the value of e raised to the power of d."
        }
    },
    "ExpertRemove": {
        "group": 2,
        "label": "ExpertRemove",
        "body": "ExpertRemove($0)",
        "code": [
            {
                "label": "ExpertRemove()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Прекращает работу эксперта и выгружает его с графика.",
            "en": "(void) The function stops an Expert Advisor and unloads it from a chart."
        }
    },
    "fabs": {
        "group": 2,
        "label": "fabs",
        "body": "fabs$0",
        "code": [
            {
                "label": "fabs(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Числовая величина."
            ],
            "en": [
                "value  [in]  Numeric value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает абсолютное значение (значение по модулю) переданного ей числа.",
            "en": "(double) The function returns the absolute value (modulus) of the specified numeric value."
        }
    },
    "FileClose": {
        "group": 2,
        "label": "FileClose",
        "body": "FileClose$0",
        "code": [
            {
                "label": "FileClose(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(void) Закрытие файла, ранее открытого функцией FileOpen().",
            "en": "(void) Close the file previously opened by FileOpen()."
        }
    },
    "FileCopy": {
        "group": 2,
        "label": "FileCopy",
        "body": "FileCopy$0",
        "code": [
            {
                "label": "FileCopy(const string src_file_name, int common_flag, const string dst_file_name, int mode_flags)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "src_file_name  [in]  Имя файла для копирования.",
                "common_flag  [in]  Флаг, определяющий местоположение файла. Если common_flag=FILE_COMMON, то файл находится в общей папке всех клиентских терминалов \\Terminal\\Common\\Files. В противном случае файл находится в локальной папке (например, common_flag=0).",
                "dst_file_name  [in]  Имя результатного файла.",
                "mode_flags  [in]  Флаги доступа. Параметр может содержать только 2 флага: FILE_REWRITE и/или FILE_COMMON - остальные флаги игнорируются. Если файл уже существует и при этом не был указан флаг FILE_REWRITE, то файл не будет переписан, и функция возвратит false."
            ],
            "en": [
                "src_file_name  [in]  File name to copy.",
                "common_flag  [in]  Flag determining the location of the file. If common_flag = FILE_COMMON, then the file is located in a shared folder for all client terminals \\Terminal\\Common\\Files. Otherwise, the file is located in a local folder (for example, common_flag=0).",
                "dst_file_name  [in]  Result file name.",
                "mode_flags  [in]  Access flags. The parameter can contain only 2 flags: FILE_REWRITE and/or FILE_COMMON - other flags are ignored. If the file already exists, and the FILE_REWRITE flag hasn't been specified, then the file will not be rewritten, and the function will return false."
            ]
        },
        "description": {
            "ru": "(bool) Копирует исходный файл из локальной или общей папки в другой файл.",
            "en": "(bool) The function copies the original file from a local or shared folder to another file."
        }
    },
    "FileDelete": {
        "group": 2,
        "label": "FileDelete",
        "body": "FileDelete$0",
        "code": [
            {
                "label": "FileDelete(const string file_name, int common_flag)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_name  [in]  Имя файла.",
                "common_flag  [in]  Флаг, определяющий местоположение файла. Если common_flag=FILE_COMMON, то файл находится в общей папке всех клиентских терминалов \\Terminal\\Common\\Files. В противном случае файл находится в локальной папке."
            ],
            "en": [
                "file_name  [in]  File name.",
                "common_flag  [in]  Flag determining the file location. If common_flag = FILE_COMMON, then the file is located in a shared folder for all client terminals \\Terminal\\Common\\Files. Otherwise, the file is located in a local folder."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет указанный файл в локальной папке клиентского терминала.",
            "en": "(bool) Deletes the specified file in a local folder of the client terminal."
        }
    },
    "FileFindClose": {
        "group": 2,
        "label": "FileFindClose",
        "body": "FileFindClose$0",
        "code": [
            {
                "label": "FileFindClose(long search_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "search_handle  [in]  Хэндл поиска, полученный функцией FileFindFirst()."
            ],
            "en": [
                "search_handle  [in]  Search handle, retrieved by FileFindFirst()."
            ]
        },
        "description": {
            "ru": "(void) Закрывает хэндл поиска.",
            "en": "(void) The function closes the search handle."
        }
    },
    "FileFindFirst": {
        "group": 2,
        "label": "FileFindFirst",
        "body": "FileFindFirst$0",
        "code": [
            {
                "label": "FileFindFirst(const string file_filter, string& returned_filename, int common_flag)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_filter  [in]  Фильтр поиска. В фильтре может быть указана поддиректория (или последовательность вложенных поддиректорий) относительно директории \\Files, в которой необходимо проводить перебор файлов.",
                "returned_filename  [out]  Возвращаемый параметр, куда в случае удачи помещается имя первого найденного файла или поддиректории. Возвращается только имя файла (включая расширение) без указания директорий и поддиректорий, независимо от того, указывались ли они в фильтре для поиска.",
                "common_flag  [in]  Флаг, определяющий местоположение файла. Если common_flag=FILE_COMMON, то файл находится в общей папке всех клиентских терминалов \\Terminal\\Common\\Files. В противном случае файл находится в локальной папке."
            ],
            "en": [
                "file_filter  [in]  Search filter. A subdirectory (or sequence of nested subdirectories) relative to the \\Files directory, in which files should be searched for, can be specified in the filter.",
                "returned_filename  [out]  The returned parameter, where, in case of success, the name of the first found file or subdirectory is placed. Only the file name is returned (including the extension), the directories and subdirectories are not included no matter if they are specified or not in the search filter.",
                "common_flag  [in]  Flag determining the location of the file. If common_flag = FILE_COMMON, then the file is located in a shared folder for all client terminals \\Terminal\\Common\\Files. Otherwise, the file is located in a local folder."
            ]
        },
        "description": {
            "ru": "(long) Начинает перебор файлов и поддиректорий в соответствующей директории в соответствии с указанным фильтром.",
            "en": "(long) The function starts the search of files or subdirectories in a directory in accordance with the specified filter."
        }
    },
    "FileFindNext": {
        "group": 2,
        "label": "FileFindNext",
        "body": "FileFindNext$0",
        "code": [
            {
                "label": "FileFindNext(long search_handle, string& returned_filename)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "search_handle  [in]  Хэндл поиска, полученный функцией FileFindFirst().",
                "returned_filename  [out] Имя следующего найденного файла или поддиректории. Возвращается только имя файла (включая расширение) без указания директорий и поддиректорий, независимо от того, указывались ли они в фильтре для поиска."
            ],
            "en": [
                "search_handle  [in]  Search handle, retrieved by FileFindFirst().",
                "returned_filename  [out] The name of the next file or subdirectory found. Only the file name is returned (including the extension), the directories and subdirectories are not included no matter if they are specified or not in the search filter."
            ]
        },
        "description": {
            "ru": "(bool) Продолжает поиск, начатый функцией FileFindFirst().",
            "en": "(bool) The function continues the search started by FileFindFirst()."
        }
    },
    "FileFlush": {
        "group": 2,
        "label": "FileFlush",
        "body": "FileFlush$0",
        "code": [
            {
                "label": "FileFlush(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(void) Сброс на диск всех данных, оставшихся в файловом буфере ввода-вывода.",
            "en": "(void) Writes to a disk all data remaining in the input/output file buffer."
        }
    },
    "FileGetInteger": {
        "group": 2,
        "label": "FileGetInteger",
        "body": "FileGetInteger$0",
        "code": [
            {
                "label": "FileGetInteger(int file_handle, ENUM_FILE_PROPERTY_INTEGER property_id)",
                "description": {
                    "ru": "1. Получение свойств по хэндлу файла.",
                    "en": "1. Get a property by the handle of a file."
                }
            },
            {
                "label": "FileGetInteger(const string file_name, ENUM_FILE_PROPERTY_INTEGER property_id, bool common_folder)",
                "description": {
                    "ru": "2. Получение свойств по имени файла.",
                    "en": "2. Get a property by the file name."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "file_name  [in]  Имя файла.",
                "property_id  [in]  Идентификатор свойства файла. Значение может быть одним из значений перечисления ENUM_FILE_PROPERTY_INTEGER. Если используется второй вариант функции, то можно получать значения только следующих свойств: FILE_EXISTS, FILE_CREATE_DATE, FILE_MODIFY_DATE, FILE_ACCESS_DATE и FILE_SIZE.",
                "common_folder  [in]  Указывает на местоположение файла. Если параметр равен false, то просматривается каталог данных терминала, в противном случае предполагается, что файл находится в общей папке всех клиентских терминалов \\Terminal\\Common\\Files (FILE_COMMON)."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "file_name  [in]  File name.",
                "property_id  [in]  File property ID. The value can be one of the values of the ENUM_FILE_PROPERTY_INTEGER enumeration. If the second variant of the function is used, you can receive only the values of the following properties: FILE_EXISTS, FILE_CREATE_DATE, FILE_MODIFY_DATE, FILE_ACCESS_DATE and FILE_SIZE.",
                "common_folder  [in]  Points to the file location. If the parameter is false, terminal data folder is viewed. Otherwise it is assumed that the file is in the shared folder of all terminals \\Terminal\\Common\\Files (FILE_COMMON)."
            ]
        },
        "description": {
            "ru": "(long) Получает целочисленное свойство файла. Существует 2 варианта функции.",
            "en": "(long) Gets an integer property of a file. There are two variants of the function."
        }
    },
    "FileIsEnding": {
        "group": 2,
        "label": "FileIsEnding",
        "body": "FileIsEnding$0",
        "code": [
            {
                "label": "FileIsEnding(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(bool) Определяет конец файла в процессе чтения.",
            "en": "(bool) Defines the end of a file in the process of reading."
        }
    },
    "FileIsExist": {
        "group": 2,
        "label": "FileIsExist",
        "body": "FileIsExist$0",
        "code": [
            {
                "label": "FileIsExist(const string file_name, int common_flag)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_name  [in]  Имя проверяемого файла.",
                "common_flag  [in]  Флаг, определяющий местоположение файла. Если common_flag=FILE_COMMON, то файл находится в общей папке всех клиентских терминалов \\Terminal\\Common\\Files. В противном случае файл находится в локальной папке."
            ],
            "en": [
                "file_name  [in]  The name of the file being checked",
                "common_flag  [in]  Flag determining the location of the file. If common_flag = FILE_COMMON, then the file is located in a shared folder for all client terminals \\Terminal\\Common\\Files. Otherwise, the file is located in a local folder."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет существование файла.",
            "en": "(bool) Checks the existence of a file."
        }
    },
    "FileIsLineEnding": {
        "group": 2,
        "label": "FileIsLineEnding",
        "body": "FileIsLineEnding$0",
        "code": [
            {
                "label": "FileIsLineEnding(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(bool) Определяет конец строки в текстовом файле в процессе чтения.",
            "en": "(bool) Defines the line end in a text file in the process of reading."
        }
    },
    "FileMove": {
        "group": 2,
        "label": "FileMove",
        "body": "FileMove$0",
        "code": [
            {
                "label": "FileMove(const string src_file_name, int common_flag, const string dst_file_name, int mode_flags)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "src_file_name  [in]  Имя файла для перемещения/переименования.",
                "common_flag  [in]  Флаг, определяющий местоположение файла. Если common_flag=FILE_COMMON, то файл находится в общей папке всех клиентских терминалов \\Terminal\\Common\\Files. В противном случае файл находится в локальной папке.(common_flag=0).",
                "dst_file_name  [in]  Имя результатного файла.",
                "mode_flags  [in]  Флаги доступа. Параметр может содержать только 2 флага: FILE_REWRITE и/или FILE_COMMON - остальные флаги игнорируются. Если файл уже существует и при этом не был указан флаг FILE_REWRITE, то файл не будет переписан, и функция возвратит false."
            ],
            "en": [
                "src_file_name  [in]  File name to move/rename.",
                "common_flag  [in]  Flag determining the location of the file. If common_flag = FILE_COMMON, then the file is located in a shared folder for all client terminals \\Terminal\\Common\\Files. Otherwise, the file is located in a local folder (common_flag=0).",
                "dst_file_name  [in]  File name after operation",
                "mode_flags  [in]  Access flags. The parameter can contain only 2 flags: FILE_REWRITE and/or FILE_COMMON - other flags are ignored. If the file already exists and the FILE_REWRITE flag isn't specified, the file will not be rewritten, and the function will return false."
            ]
        },
        "description": {
            "ru": "(bool) Перемещает файл из локальной или общей папки в другую папку.",
            "en": "(bool) Moves a file from a local or shared folder to another folder."
        }
    },
    "FileOpen": {
        "group": 2,
        "label": "FileOpen",
        "body": "FileOpen$0",
        "code": [
            {
                "label": "FileOpen(string file_name, int open_flags, short delimiter, uint codepage)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_name  [in]  Имя открываемого файла, может содержать подпапки. Если файл открывается для записи, то указанные подпапки будут созданы в случае их отсутствия.",
                "open_flags  [in] комбинация флагов, определяющая режим работы с файлом. Флаги определены следующим образом:  FILE_READ файл открывается для чтения  FILE_WRITE файл открывается для записи  FILE_BIN двоичный режим чтения-записи (без преобразования из строки и в строку)  FILE_CSV файл типа csv (все записанные элементы преобразуются к строкам соответствующего типа, unicode или ansi, и разделяются разделителем)  FILE_TXT простой текстовый файл (тот же csv, однако разделитель не принимается во внимание)  FILE_ANSI строки типа ANSI (однобайтовые символы)  FILE_UNICODE строки типа UNICODE (двухбайтовые символы)  FILE_SHARE_READ совместный доступ по чтению со стороны нескольких программ  FILE_SHARE_WRITE совместный доступ по записи со стороны нескольких программ  FILE_COMMON расположение файла в общей папке всех клиентских терминалов \\Terminal\\Common\\Files.",
                "delimiter  [in]  значение, используемое в качестве разделителя в txt или csv-файле. Если для csv-файла разделитель не указан, то по умолчанию используется символ табуляции. Если для txt-файла разделитель не указан, то никакой разделитель не используется. Если в качестве разделителя явно задано значение 0, то никакой разделитель не используется.",
                "codepage  [in]  Значение кодовой страницы. Для наиболее употребимых кодовых страниц предусмотрены соответствующие константы."
            ],
            "en": [
                "file_name  [in]  The name of the file can contain subfolders. If the file is opened for writing, these subfolders will be created if there are no such ones.",
                "open_flags  [in]  combination of flags determining the operation mode for the file. The flags are defined as follows: FILE_READ file is opened for reading FILE_WRITE file is opened for writing FILE_BIN binary read-write mode (no conversion from a string and to a string) FILE_CSV file of csv type (all recorded items are converted to the strings of unicode or ansi type, and are separated by a delimiter) FILE_TXT a simple text file (the same as csv, but the delimiter is not taken into account) FILE_ANSI lines of ANSI type (single-byte symbols)  FILE_UNICODE lines of UNICODE type (double-byte characters) FILE_SHARE_READ shared reading from several programs FILE_SHARE_WRITE shared writing from several programs FILE_COMMON location of the file in a shared folder for all client terminals \\Terminal\\Common\\Files",
                "delimiter  [in]  value to be used as a separator in txt or csv-file. If the csv-file delimiter is not specified, it defaults to a tab. If the txt-file delimiter is not specified, then no separator is used. If the separator is clearly set to 0, then no separator is used.",
                "codepage  [in]  The value of the code page. For the most-used code pages provide appropriate constants."
            ]
        },
        "description": {
            "ru": "(int) Функция открывает файл с указанным именем и указанными флагами.",
            "en": "(int) The function opens the file with the specified name and flag."
        }
    },
    "FileReadArray": {
        "group": 2,
        "label": "FileReadArray",
        "body": "FileReadArray$0",
        "code": [
            {
                "label": "FileReadArray(int file_handle, void& array[], int start, int count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "array[]  [out]  Массив, куда данные будут загружены.",
                "start  [in]  Стартовая позиция для чтения из массива.",
                "count  [in]  Количество элементов для чтения."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "array[]  [out] An array where the data will be loaded.",
                "start  [in]  Start position to read from the array.",
                "count  [in]  Number of elements to read. By default, reads the entire array (count=WHOLE_ARRAY)."
            ]
        },
        "description": {
            "ru": "(uint) Читает массивы любых типов, кроме строковых (может быть массив структур, не содержащих строки и динамические массивы), из бинарного файла с текущего положения файлового указателя.",
            "en": "(uint) Reads from a file of BIN type arrays of any type except string (may be an array of structures, not containing strings, and dynamic arrays)."
        }
    },
    "FileReadBool": {
        "group": 2,
        "label": "FileReadBool",
        "body": "FileReadBool$0",
        "code": [
            {
                "label": "FileReadBool(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(bool) Читает из файла типа CSV строку от текущего положения до разделителя (либо до конца текстовой строки) и преобразует прочитанную строку в значение типа bool.",
            "en": "(bool) Reads from the file of CSV type string from the current position to a delimiter (or till the end of the text line) and converts the read string to a bool type value."
        }
    },
    "FileReadDatetime": {
        "group": 2,
        "label": "FileReadDatetime",
        "body": "FileReadDatetime$0",
        "code": [
            {
                "label": "FileReadDatetime(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(datetime) Читает из файла типа CSV строку одного из форматов: \"YYYY.MM.DD HH:MI:SS\", \"YYYY.MM.DD\" или \"HH:MI:SS\" - и преобразует её в значение типа datetime.",
            "en": "(datetime) Reads from the file of CSV type a string of one of the formats: \"YYYY.MM.DD HH:MI:SS\", \"YYYY.MM.DD\" or \"HH:MI:SS\" - and converts it into a value of datetime type."
        }
    },
    "FileReadDouble": {
        "group": 2,
        "label": "FileReadDouble",
        "body": "FileReadDouble$0",
        "code": [
            {
                "label": "FileReadDouble(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(double) Читает число двойной точности с плавающей точкой (double) из бинарного файла с текущего положения файлового указателя.",
            "en": "(double) Reads a double-precision floating point number (double) from the current position of the binary file."
        }
    },
    "FileReadFloat": {
        "group": 2,
        "label": "FileReadFloat",
        "body": "FileReadFloat$0",
        "code": [
            {
                "label": "FileReadFloat(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функциейFileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(float) Читает число одинарной точности с плавающей точкой (float) из текущей позиции бинарного файла.",
            "en": "(float) Reads the single-precision floating point number (float) from the current position of the binary file."
        }
    },
    "FileReadInteger": {
        "group": 2,
        "label": "FileReadInteger",
        "body": "FileReadInteger$0",
        "code": [
            {
                "label": "FileReadInteger(int file_handle, int size)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "size  [in]  Количество байт (до 4 включительно), которые нужно прочитать. Предусмотрены соответствующие константы: CHAR_VALUE=1, SHORT_VALUE=2 и INT_VALUE=4, таким образом функция может прочитать целое значение типа char, short или int."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "size  [in]  Number of bytes (up to 4 inclusive) that should be read. The corresponding constants are provided: CHAR_VALUE = 1, SHORT_VALUE = 2 and INT_VALUE = 4, so the function can read the whole value of char, short or int type."
            ]
        },
        "description": {
            "ru": "(int) Читает из бинарного файла значение типа int, short или char в зависимости от указанной длины в байтах. Чтение производится с текущего положения файлового указателя.",
            "en": "(int) The function reads int, short or char value from the current position of the file pointer depending on the length specified in bytes."
        }
    },
    "FileReadLong": {
        "group": 2,
        "label": "FileReadLong",
        "body": "FileReadLong$0",
        "code": [
            {
                "label": "FileReadLong(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(long) Читает целое число типа long (8 байт) из текущей позиции бинарного файла.",
            "en": "(long) The function reads an integer of long type (8 bytes) from the current position of the binary file."
        }
    },
    "FileReadNumber": {
        "group": 2,
        "label": "FileReadNumber",
        "body": "FileReadNumber$0",
        "code": [
            {
                "label": "FileReadNumber(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(double) Читает из файла типа CSV строку от текущего положения до разделителя (либо до конца текстовой строки) и преобразует прочитанную строку в значение типа double.",
            "en": "(double) The function reads from the CSV file a string from the current position till a separator (or till the end of a text string) and converts the read string to a value of double type."
        }
    },
    "FileReadString": {
        "group": 2,
        "label": "FileReadString",
        "body": "FileReadString$0",
        "code": [
            {
                "label": "FileReadString(int file_handle, int length)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "length  [in]  Количество символов для чтения."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "length  [in]  Number of characters to read."
            ]
        },
        "description": {
            "ru": "(string) Читает из файла строку с текущего положения файлового указателя.",
            "en": "(string) The function reads a string from the current position of a file pointer in a file."
        }
    },
    "FileReadStruct": {
        "group": 2,
        "label": "FileReadStruct",
        "body": "FileReadStruct$0",
        "code": [
            {
                "label": "FileReadStruct(int file_handle, const void& struct_object, int size)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель открытого бинарного файла.",
                "struct_object  [out]  Ссылка на объект указанной структуры. Структура не должна содержать строки, динамические массивы, виртуальные функции, а также указатели на объекты и функции.",
                "size  [in]  Количество байт, которые нужно прочитать. Если размер не указан или указано большее количество байт, чем размер структуры, то используется точный размер указанной структуры."
            ],
            "en": [
                "file_handle  [in] File descriptor of an open bin-file.",
                "struct_object  [out]  The object of this structure. The structure should not contain strings, dynamic arrays or virtual functions.",
                "size  [in]  Number of bytes that should be read. If size is not specified or the indicated value is greater than the size of the structure, the exact size of the specified structure is used."
            ]
        },
        "description": {
            "ru": "(uint) Считывает из бинарного файла содержимое в структуру, переданную в качестве параметра. Чтение производится с текущего положения файлового указателя.",
            "en": "(uint) The function reads contents into a structure passed as a parameter from a binary-file, starting with the current position of the file pointer."
        }
    },
    "FileSeek": {
        "group": 2,
        "label": "FileSeek",
        "body": "FileSeek$0",
        "code": [
            {
                "label": "FileSeek(int file_handle, long offset, ENUM_FILE_POSITION origin)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "offset  [in]  Смещение в байтах (может принимать и отрицательное значение).",
                "origin  [in]  Точка отсчета для смещения. Может принимать одно из значений перечисления ENUM_FILE_POSITION."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "offset  [in] The shift in bytes (may take a negative value).",
                "origin  [in] The starting point for the displacement. Can be one of values of ENUM_FILE_POSITION."
            ]
        },
        "description": {
            "ru": "(bool) Перемещает положение файлового указателя на указанное количество байт относительно указанного положения.",
            "en": "(bool) The function moves the position of the file pointer by a specified number of bytes relative to the specified position."
        }
    },
    "FileSize": {
        "group": 2,
        "label": "FileSize",
        "body": "FileSize$0",
        "code": [
            {
                "label": "FileSize(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(ulong) Возвращает размер файла в байтах.",
            "en": "(ulong) The function returns the file size in bytes."
        }
    },
    "FileTell": {
        "group": 2,
        "label": "FileTell",
        "body": "FileTell$0",
        "code": [
            {
                "label": "FileTell(int file_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen()."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen()."
            ]
        },
        "description": {
            "ru": "(ulong) Возвращает текущее положение файлового указателя соответствующего открытого файла.",
            "en": "(ulong) The file returns the current position of the file pointer of an open file."
        }
    },
    "FileWrite": {
        "group": 2,
        "label": "FileWrite",
        "body": "FileWrite$0",
        "code": [
            {
                "label": "FileWrite(int file_handle, list parameters)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 2,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "parameters  [in]  Список параметров, разделенных запятыми, для записи в файл. Количество выводимых в файл параметров не должно превышать 63."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "parameters  [in] The list of parameters separated by commas, to write to the file. The number of written parameters can be up to 63."
            ]
        },
        "description": {
            "ru": "(uint) Запись данных в файл типа CSV или TXT, разделитель между данными вставляется автоматически, если он не равен 0. После записи в файл добавляется признак конца строки \"\\r\\n\".",
            "en": "(uint) The function is intended for writing of data into a CSV file, delimiter being inserted automatically unless it is equal to 0. After writing into the file, the line end character \"\\r\\n\" will be added."
        }
    },
    "FileWriteArray": {
        "group": 2,
        "label": "FileWriteArray",
        "body": "FileWriteArray$0",
        "code": [
            {
                "label": "FileWriteArray(int file_handle, const void& array[], int start, int count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "array[]  [out]  Массив для записи.",
                "start  [in]  Начальный индекс в массиве (номер первого записываемого элемента).",
                "count  [in]  Количество записываемых элементов (WHOLE_ARRAY означает, что записываются все элементы начиная с номера start до конца массива)."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "array[]  [out] Array for recording.",
                "start  [in]  Initial index in the array (number of the first recorded element).",
                "count  [in]  Number of items to write (WHOLE_ARRAY means that all items starting with the number start until the end of the array will be written)."
            ]
        },
        "description": {
            "ru": "(uint) Записывает в бинарный файл массивы любых типов, кроме строковых (может быть массив структур, не содержащих строки и динамические массивы).",
            "en": "(uint) The function writes arrays of any type except for string to a BIN file (can be an array of structures not containing strings or dynamic arrays)."
        }
    },
    "FileWriteDouble": {
        "group": 2,
        "label": "FileWriteDouble",
        "body": "FileWriteDouble$0",
        "code": [
            {
                "label": "FileWriteDouble(int file_handle, double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "value  [in]  Значение типа double."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "value  [in]   The value of double type."
            ]
        },
        "description": {
            "ru": "(uint) Записывает в бинарный файл значение параметра типа double с текущего положения файлового указателя.",
            "en": "(uint) The function writes the value of a double parameter to a a bin-file, starting from the current position of the file pointer."
        }
    },
    "FileWriteFloat": {
        "group": 2,
        "label": "FileWriteFloat",
        "body": "FileWriteFloat$0",
        "code": [
            {
                "label": "FileWriteFloat(int file_handle, float value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "value  [in]  Значение типа float."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "value  [in] The value of float type."
            ]
        },
        "description": {
            "ru": "(uint) Записывает в бинарный файл значение параметра типа float с текущего положения файлового указателя.",
            "en": "(uint) The function writes the value of the float parameter to a bin-file, starting from the current position of the file pointer."
        }
    },
    "FileWriteInteger": {
        "group": 2,
        "label": "FileWriteInteger",
        "body": "FileWriteInteger$0",
        "code": [
            {
                "label": "FileWriteInteger(int file_handle, int value, int size)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "value  [in]  Целое значение.",
                "size  [in]  Количество байт (до 4 включительно), которые нужно записать. Предусмотрены соответствующие константы: CHAR_VALUE=1, SHORT_VALUE=2 и INT_VALUE=4, таким образом функция может записать целое значение типа char, uchar, short, ushort, int или uint"
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "value  [in] Integer value.",
                "size  [in] Number of bytes (up to 4 inclusive), that should be written. The corresponding constants are provided: CHAR_VALUE=1, SHORT_VALUE=2 and INT_VALUE=4, so the function can write the integer value of char, uchar, short, ushort, int, or uint type."
            ]
        },
        "description": {
            "ru": "(uint) Записывает в бинарный файл значение параметра типа int с текущего положения файлового указателя.",
            "en": "(uint) The function writes the value of the int parameter to a bin-file, starting from the current position of the file pointer."
        }
    },
    "FileWriteLong": {
        "group": 2,
        "label": "FileWriteLong",
        "body": "FileWriteLong$0",
        "code": [
            {
                "label": "FileWriteLong(int file_handle, long value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "value  [in]  Значение типа long."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "value  [in] Value of type long."
            ]
        },
        "description": {
            "ru": "(uint) Записывает в бинарный файл значение параметра типа long с текущего положения файлового указателя.",
            "en": "(uint) The function writes the value of the long-type parameter to a bin-file, starting from the current position of the file pointer."
        }
    },
    "FileWriteString": {
        "group": 2,
        "label": "FileWriteString",
        "body": "FileWriteString$0",
        "code": [
            {
                "label": "FileWriteString(int file_handle, const string text_string, int length)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "text_string  [in]  Строка.",
                "length  [in]  Количество символов, которые нужно записать. Параметр необходим для записи строки в файл типа BIN. Если размер не указан, то записывается вся строка без завершающего 0. Если указан размер меньший, чем длина строки, то записывается часть строки без завершающего 0. Если указан размер больший, чем длина строки, то строка дописывается соответствующим количеством нулей. Для файлов типа CSV и TXT этот параметр игнорируется и строка записывается полностью."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "text_string  [in]  String.",
                "length  [in] The number of characters that you want to write. This option is needed for writing a string into a BIN file. If the size is not specified, then the entire string without the trailer 0 is written. If you specify a size smaller than the length of the string, then a part of the string without the trailer 0 is written. If you specify a size greater than the length of the string, the string is filled by the appropriate number of zeros. For files of CSV and TXT type, this parameter is ignored and the string is written entirely."
            ]
        },
        "description": {
            "ru": "(uint) Записывает в файл типа BIN, CSV или TXT значение параметра типа string с текущего положения файлового указателя. При записи в файл типа CSV или TXT, если в строке присутствует символ '\\n' (LF) без предшествующего символа '\\r' (CR), то перед символом '\\n' дописывается отсутствующий символ '\\r'.",
            "en": "(uint) The function writes the value of a string-type parameter into a BIN, CSV or TXT file starting from the current position of the file pointer. When writing to a CSV or TXT file: if there is a symbol in the string '\\n' (LF) without previous character '\\r' (CR), then before '\\n' the missing '\\r' is added."
        }
    },
    "FileWriteStruct": {
        "group": 2,
        "label": "FileWriteStruct",
        "body": "FileWriteStruct$0",
        "code": [
            {
                "label": "FileWriteStruct(int file_handle, const void& struct_object, int size)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "file_handle  [in]  Файловый описатель, возвращаемый функцией FileOpen().",
                "struct_object  [in]  Ссылка на объект указанной структуры. Структура не должна содержать строки, динамические массивы, виртуальные функции, а также указатели на объекты и функции.",
                "size  [in]  Количество байт, которые нужно записать. Если размер не указан или указано большее количество байт, чем размер структуры, то записывается вся структура полностью."
            ],
            "en": [
                "file_handle  [in]  File descriptor returned by FileOpen().",
                "struct_object  [in] Reference to the object of this structure. The structure should not contain strings, dynamic arrays or virtual functions.",
                "size  [in] Number of bytes that you want to record. If size is not specified or the specified number of bytes is greater than the size of the structure, the entire structure is written."
            ]
        },
        "description": {
            "ru": "(uint) Записывает в бинарный файл содержимое структуры, переданной в качестве параметра, с текущего положения файлового указателя.",
            "en": "(uint) The function writes into a bin-file contents of a structure passed as a parameter, starting from the current position of the file pointer."
        }
    },
    "floor": {
        "group": 2,
        "label": "floor",
        "body": "floor$0",
        "code": [
            {
                "label": "floor(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Числовое значение."
            ],
            "en": [
                "val  [in]  Numeric value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает ближайшее снизу целое числовое значение.",
            "en": "(double) The function returns integer numeric value closest from below."
        }
    },
    "fmax": {
        "group": 2,
        "label": "fmax",
        "body": "fmax$0",
        "code": [
            {
                "label": "fmax(double value1, double value2)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value1  [in]  Первое числовое значение.",
                "value2  [in]  Второе числовое значение."
            ],
            "en": [
                "value1  [in]  First numeric value.",
                "value2  [in]  Second numeric value."
            ]
        },
        "description": {
            "ru": "(double) Функция возвращает максимальное из двух числовых значений.",
            "en": "(double) The function returns the maximal value of two values."
        }
    },
    "fmin": {
        "group": 2,
        "label": "fmin",
        "body": "fmin$0",
        "code": [
            {
                "label": "fmin(double value1, double value2)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value1  [in]  Первое числовое значение.",
                "value2  [in]  Второе числовое значение."
            ],
            "en": [
                "value1  [in]  First numeric value.",
                "value2  [in]  Second numeric value."
            ]
        },
        "description": {
            "ru": "(double) Функция возвращает минимальное из двух числовых значений.",
            "en": "(double) The function returns the minimal value of two values."
        }
    },
    "fmod": {
        "group": 2,
        "label": "fmod",
        "body": "fmod$0",
        "code": [
            {
                "label": "fmod(double value, double value2)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Значение делимого.",
                "value2  [in]  Значение делителя."
            ],
            "en": [
                "value  [in]  Dividend value.",
                "value2  [in]  Divisor value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает вещественный остаток от деления двух чисел.",
            "en": "(double) The function returns the real remainder of division of two numbers."
        }
    },
    "FolderClean": {
        "group": 2,
        "label": "FolderClean",
        "body": "FolderClean$0",
        "code": [
            {
                "label": "FolderClean(string folder_name, int common_flag)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "folder_name  [in]  Имя директории, в которой требуется удалить все файлы. Содержит полный путь к папке.",
                "common_flag  [in]  Флаг, определяющий местоположение директории. Если common_flag=FILE_COMMON, то директория находится в общей папке всех клиентских терминалов \\Terminal\\Common\\Files. В противном случае директория находится в локальной папке (MQL5\\Files или MQL5\\Tester\\Files в случае тестирования)."
            ],
            "en": [
                "folder_name  [in] The name of the directory where you want to delete all files. Contains the full path to the folder.",
                "common_flag  [in]  Flag determining the location of the directory. If common_flag = FILE_COMMON, then the directory is in the shared folder for all client terminals \\Terminal\\Common\\Files. Otherwise, the directory is in a local folder(MQL5\\Files or MQL5\\Tester\\Files in case of testing)."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет все файлы в указанной папке.",
            "en": "(bool) The function deletes all files in a specified folder."
        }
    },
    "FolderCreate": {
        "group": 2,
        "label": "FolderCreate",
        "body": "FolderCreate$0",
        "code": [
            {
                "label": "FolderCreate(string folder_name, int common_flag)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "folder_name  [in]  Имя директории, которую требуется создать. Содержит относительный путь к папке.",
                "common_flag  [in]  Флаг, определяющий местоположение директории. Если common_flag=FILE_COMMON, то директория находится в общей папке всех клиентских терминалов \\Terminal\\Common\\Files. В противном случае директория находится в локальной папке (MQL5\\Files или MQL5\\Tester\\Files в случае тестирования)."
            ],
            "en": [
                "folder_name  [in]  Name of the directory to be created. Contains the relative path to the folder.",
                "common_flag  [in]  Flag defining the directory location. If common_flag=FILE_COMMON, the directory is located in the common folder of all client terminals \\Terminal\\Common\\Files. Otherwise, the directory is in the local folder (MQL5\\Files or MQL5\\Tester\\Files when testing)."
            ]
        },
        "description": {
            "ru": "(bool) Создает директорию в директории Files (в зависимости от значения common_flag)",
            "en": "(bool) Creates a directory in the Files folder (depending on the common_flag value)"
        }
    },
    "FolderDelete": {
        "group": 2,
        "label": "FolderDelete",
        "body": "FolderDelete$0",
        "code": [
            {
                "label": "FolderDelete(string folder_name, int common_flag)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "folder_name  [in]  Имя директории, которую требуется удалить. Содержит полный путь к папке.",
                "common_flag  [in]  Флаг, определяющий местоположение директории. Если common_flag=FILE_COMMON, то директория находится в общей папке всех клиентских терминалов \\Terminal\\Common\\Files. В противном случае директория находится в локальной папке (MQL5\\Files или MQL5\\Tester\\Files в случае тестирования)."
            ],
            "en": [
                "folder_name  [in] The name of the directory you want to delete. Contains the full path to the folder.",
                "common_flag  [in]  Flag determining the location of the directory. If common_flag=FILE_COMMON, then the directory is in the shared folder for all client terminals \\Terminal\\Common\\Files. Otherwise, the directory is in a local folder (MQL5\\Files or MQL5\\Tester\\Files in the case of testing)."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет указанную директорию. Если папка не пуста, то она не может быть удалена.",
            "en": "(bool) The function removes the specified directory. If the folder is not empty, then it can't be removed."
        }
    },
    "FrameAdd": {
        "group": 2,
        "label": "FrameAdd",
        "body": "FrameAdd$0",
        "code": [
            {
                "label": "FrameAdd(const string name, long id, double value, const string filename)",
                "description": {
                    "ru": "1. Добавление данных из файла",
                    "en": "1. Adding data from a file"
                }
            },
            {
                "label": "FrameAdd(const string name, long id, double value, const void& data[])",
                "description": {
                    "ru": "2. Добавление данных из массива любого типа",
                    "en": "2. Adding data from an array of any type"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Публичная метка фрейм. Может использоваться для фильтра в функции FrameFilter().",
                "id  [in]  Публичный идентификатор фрейма. Может использоваться для фильтра в функции FrameFilter().",
                "value  [in]  Числовое значение для записи во фрейм. Предназначен для передачи одиночного результата прохода как в функции OnTester().",
                "filename  [in]  Имя файла, в котором находятся данные для добавления во фрейм. Файл должен находиться в папке MQL5/Files.",
                "data[]  [in]  Массив любого типа для записи во фрейм. Передается по ссылке."
            ],
            "en": [
                "name  [in]  Public frame label. It can be used for a filter in the FrameFilter() function.",
                "id  [in]  A public identifier of the frame. It can be used for a filter in the FrameFilter() function.",
                "value  [in]  A numeric value to write into the frame. It is used to transmit a single pass result like in the OnTester() function.",
                "filename  [in]  The name of the file that contains data to add to the frame. The file must be locate in the folder MQL5/Files.",
                "data[]  [in]  An array of any type to write into the frame. Passed by reference."
            ]
        },
        "description": {
            "ru": "(bool) Добавляет фрейм с данными. Существует 2 варианта функции.",
            "en": "(bool) Adds a frame with data. There are two variants of the function."
        }
    },
    "FrameFilter": {
        "group": 2,
        "label": "FrameFilter",
        "body": "FrameFilter$0",
        "code": [
            {
                "label": "FrameFilter(const string name, long id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Публичная метка фрейм.",
                "id  [in]  Публичный идентификатор фрейма."
            ],
            "en": [
                "name  [in]  Public name/label",
                "id  [in]  Public ID"
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает фильтр чтения фреймов и переводит указатель на начало.",
            "en": "(bool) Sets the frame reading filter and moves the pointer to the beginning."
        }
    },
    "FrameFirst": {
        "group": 2,
        "label": "FrameFirst",
        "body": "FrameFirst($0)",
        "code": [
            {
                "label": "FrameFirst()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(bool) Переводит указатель чтения фреймов оптимизации в начало и сбрасывает установленный фильтр.",
            "en": "(bool) Moves a pointer of frame reading to the beginning and resets a set filter."
        }
    },
    "FrameInputs": {
        "group": 2,
        "label": "FrameInputs",
        "body": "FrameInputs$0",
        "code": [
            {
                "label": "FrameInputs(ulong pass, string& parameters[], uint& parameters_count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "pass  [in]  Номер прохода при оптимизации в тестере стратегий.",
                "parameters[]  [out]  Строковый массив с описанием имен и значений параметров",
                "parameters_count  [out]  Количество элементов в массиве parameters[]."
            ],
            "en": [
                "pass  [in]  The number of a pass during optimization in the strategy tester.",
                "parameters[]  [out]  A string array with the description of names and parameter values",
                "parameters_count  [out]  The number of elements in the array parameters[]."
            ]
        },
        "description": {
            "ru": "(bool) Получает input-параметры, на которых сформирован фрейм с заданным номером прохода.",
            "en": "(bool) Receives input parameters, on which the frame with the specified pass number is formed."
        }
    },
    "FrameNext": {
        "group": 2,
        "label": "FrameNext",
        "body": "FrameNext$0",
        "code": [
            {
                "label": "FrameNext(ulong& pass, string& name, long& id, double& value)",
                "description": {
                    "ru": "1. Вызов с получением одного числового значения",
                    "en": "1. Calling to receive one numeric value"
                }
            },
            {
                "label": "FrameNext(ulong& pass, string& name, long& id, double& value, void& data[])",
                "description": {
                    "ru": "2. Вызов с получением всех данных фрейма",
                    "en": "2. Calling to receive all the data of a frame"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "pass  [out]  Номер прохода при оптимизации в тестере стратегий.",
                "name  [out]  Имя идентификатора.",
                "id  [out]  Значение идентификатора.",
                "value  [out]  Одиночное числовое значение.",
                "data[]  [out]  Массив любого типа."
            ],
            "en": [
                "pass  [out]  The number of a pass during optimization in the strategy tester.",
                "name  [out]  The name of the identifier.",
                "id  [out]  The value of the identifier.",
                "value  [out]  A single numeric value.",
                "data[]  [out]  An array of any type."
            ]
        },
        "description": {
            "ru": "(bool) Читает текущий фрейм и перемещает указатель на следующий. Существует 2 варианта функции.",
            "en": "(bool) Reads a frame and moves the pointer to the next one. There are two variants of the function."
        }
    },
    "GetLastError": {
        "group": 2,
        "label": "GetLastError",
        "body": "GetLastError($0)",
        "code": [
            {
                "label": "GetLastError()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает содержимое системной переменной _LastError.",
            "en": "(int) Returns the contents of the system variable _LastError."
        }
    },
    "GetPointer": {
        "group": 2,
        "label": "GetPointer",
        "body": "GetPointer$0",
        "code": [
            {
                "label": "GetPointer(any_class anyobject)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "anyobject  [in]  Объект любого класса."
            ],
            "en": [
                "anyobject  [in]  Object of any class."
            ]
        },
        "description": {
            "ru": "(void) Возвращает указатель объекта.",
            "en": "(void) The function returns the object pointer."
        }
    },
    "GetTickCount": {
        "group": 2,
        "label": "GetTickCount",
        "body": "GetTickCount($0)",
        "code": [
            {
                "label": "GetTickCount()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(uint) Функция GetTickCount() возвращает количество миллисекунд, прошедших с момента старта системы.",
            "en": "(uint) The GetTickCount() function returns the number of milliseconds that elapsed since the system start."
        }
    },
    "GlobalVariableCheck": {
        "group": 2,
        "label": "GlobalVariableCheck",
        "body": "GlobalVariableCheck$0",
        "code": [
            {
                "label": "GlobalVariableCheck(string name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя глобальной переменной."
            ],
            "en": [
                "name  [in]  Global variable name."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет существование глобальной переменной клиентского терминала.",
            "en": "(bool) Checks the existence of a global variable with the specified name"
        }
    },
    "GlobalVariableDel": {
        "group": 2,
        "label": "GlobalVariableDel",
        "body": "GlobalVariableDel$0",
        "code": [
            {
                "label": "GlobalVariableDel(string name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя глобальной переменной."
            ],
            "en": [
                "name  [in]  Global variable name."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет глобальную переменную клиентского терминала.",
            "en": "(bool) Deletes a global variable from the client terminal."
        }
    },
    "GlobalVariableGet": {
        "group": 2,
        "label": "GlobalVariableGet",
        "body": "GlobalVariableGet$0",
        "code": [
            {
                "label": "GlobalVariableGet(string name)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the value of the global variable."
                }
            },
            {
                "label": "GlobalVariableGet(string name, double& double_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение глобальной переменной клиентского терминала помещается в приемную переменную, передаваемую по ссылке вторым параметром.",
                    "en": "2. Returns true or false depending on the success of the function run.  If successful, the global variable of the client terminal is placed in a variable passed by reference in the second parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя глобальной переменной.",
                "double_var  [out]  Переменная типа double, принимающая  значение, хранящееся в глобальной переменной клиентского терминала."
            ],
            "en": [
                "name  [in]  Global variable name.",
                "double_var  [out]  Target variable of the double type, which accepts the value stored in a the global variable of the client terminal."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает значение существующей глобальной переменной клиентского терминала. Существует 2 варианта функции.",
            "en": "(bool) Returns the value of an existing global variable of the client terminal. There are 2 variants of the function."
        }
    },
    "GlobalVariableName": {
        "group": 2,
        "label": "GlobalVariableName",
        "body": "GlobalVariableName$0",
        "code": [
            {
                "label": "GlobalVariableName(int index)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "index  [in]  Порядковый номер в списке глобальных переменных. Должен быть большим или равным 0 и меньшим, чем GlobalVariablesTotal() ."
            ],
            "en": [
                "index  [in]  Sequence number in the list of global variables. It should be greater than or equal to 0 and less than GlobalVariablesTotal()."
            ]
        },
        "description": {
            "ru": "(string) Возвращает имя глобальной переменной по порядковому номеру.",
            "en": "(string) Returns the name of a global variable by its ordinal number."
        }
    },
    "GlobalVariablesDeleteAll": {
        "group": 2,
        "label": "GlobalVariablesDeleteAll",
        "body": "GlobalVariablesDeleteAll$0",
        "code": [
            {
                "label": "GlobalVariablesDeleteAll(string prefix_name, datetime limit_data)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "prefix_name  [in]  Префикс имени удаляемых глобальных переменных. Если указан префикс NULL либо пустая строка, то под критерий удаления соответствуют все глобальные переменные, соответствующие критерию удаления по дате",
                "limit_data  [in]  Дата для отбора глобальных переменных по времени последней модификации. Удаляются глобальные переменные, которые изменялись ранее указанной даты. Если параметр равен нулю, то удаляются все глобальные переменные, соответствующие первому критерию (по префиксу)."
            ],
            "en": [
                "prefix_name  [in] Name prefix global variables to remove. If you specify a prefix NULL or empty string, then all variables that meet the data criterion will be deleted.",
                "limit_data  [in] Date to select global variables by the time of their last modification. The function removes global variables, which were changed before this date. If the parameter is zero, then all variables that meet the first criterion (prefix) are deleted."
            ]
        },
        "description": {
            "ru": "(int) Удаляет глобальные переменные клиентского терминала.",
            "en": "(int) Deletes global variables of the client terminal."
        }
    },
    "GlobalVariableSet": {
        "group": 2,
        "label": "GlobalVariableSet",
        "body": "GlobalVariableSet$0",
        "code": [
            {
                "label": "GlobalVariableSet(string name, double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя глобальной переменной.",
                "value  [in]  Новое числовое значение."
            ],
            "en": [
                "name  [in]  Global variable name.",
                "value  [in]  The new numerical value."
            ]
        },
        "description": {
            "ru": "(datetime) Устанавливает новое значение глобальной переменной. Если переменная не существует, то система создает новую глобальную переменную.",
            "en": "(datetime) Sets a new value for a global variable. If the variable does not exist, the system creates a new global variable."
        }
    },
    "GlobalVariableSetOnCondition": {
        "group": 2,
        "label": "GlobalVariableSetOnCondition",
        "body": "GlobalVariableSetOnCondition$0",
        "code": [
            {
                "label": "GlobalVariableSetOnCondition(string name, double value, double check_value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя глобальной переменной.",
                "value  [in]  Новое значение.",
                "check_value  [in]   Значение для проверки текущего значения глобальной переменной."
            ],
            "en": [
                "name  [in]  The name of a global variable.",
                "value  [in]  New value.",
                "check_value  [in]   The value to check the current value of the global variable."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает новое значение существующей глобальной переменной, если текущее значение переменной равно значению третьего параметра check_value. Если переменной не существует, функция сгенерирует ошибку ERR_GLOBALVARIABLE_NOT_FOUND (4501) и вернет false.",
            "en": "(bool) Sets the new value of the existing global variable if the current value equals to the third parameter check_value. If there is no global variable, the function will generate an error ERR_GLOBALVARIABLE_NOT_FOUND (4501) and return false."
        }
    },
    "GlobalVariablesFlush": {
        "group": 2,
        "label": "GlobalVariablesFlush",
        "body": "GlobalVariablesFlush($0)",
        "code": [
            {
                "label": "GlobalVariablesFlush()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Принудительная запись содержимого всех глобальных переменных на диск.",
            "en": "(void) Forcibly saves contents of all global variables to a disk."
        }
    },
    "GlobalVariablesTotal": {
        "group": 2,
        "label": "GlobalVariablesTotal",
        "body": "GlobalVariablesTotal($0)",
        "code": [
            {
                "label": "GlobalVariablesTotal()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает общее количество глобальных переменных клиентского терминала.",
            "en": "(int) Returns the total number of global variables of the client terminal."
        }
    },
    "GlobalVariableTemp": {
        "group": 2,
        "label": "GlobalVariableTemp",
        "body": "GlobalVariableTemp$0",
        "code": [
            {
                "label": "GlobalVariableTemp(string name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя временной глобальной переменной."
            ],
            "en": [
                "name  [in]  The name of a temporary global variable."
            ]
        },
        "description": {
            "ru": "(bool) Производит попытку создания временной глобальной переменной. Если переменная не существует, то система создает новую временную глобальную переменную.",
            "en": "(bool) The function attempts to create a temporary global variable. If the variable doesn't exist, the system creates a new temporary global variable."
        }
    },
    "GlobalVariableTime": {
        "group": 2,
        "label": "GlobalVariableTime",
        "body": "GlobalVariableTime$0",
        "code": [
            {
                "label": "GlobalVariableTime(string name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя глобальной переменной."
            ],
            "en": [
                "name  [in]  Name of the global variable."
            ]
        },
        "description": {
            "ru": "(datetime) Возвращает время последнего доступа к глобальной переменной.",
            "en": "(datetime) Returns the time when the global variable was last accessed."
        }
    },
    "HistoryDealGetDouble": {
        "group": 2,
        "label": "HistoryDealGetDouble",
        "body": "HistoryDealGetDouble$0",
        "code": [
            {
                "label": "HistoryDealGetDouble(ulong ticket_number, ENUM_DEAL_PROPERTY_DOUBLE property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "HistoryDealGetDouble(ulong ticket_number, ENUM_DEAL_PROPERTY_DOUBLE property_id, double& double_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function. If successful, the value of the property is placed into a target variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket_number  [in]  Тикет сделки.",
                "property_id  [in]  Идентификатор свойства сделки. Значение может быть одним из значений перечисления ENUM_DEAL_PROPERTY_DOUBLE.",
                "double_var  [out]  Переменная типа double, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "ticket_number  [in]  Deal ticket.",
                "property_id  [in]  Identifier of a deal property. The value can be one of the values of the ENUM_DEAL_PROPERTY_DOUBLE enumeration.",
                "double_var  [out]  Variable of the double type that accepts the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает запрошенное свойство сделки. Свойство сделки должно быть типа double. Существует 2 варианта функции.",
            "en": "(bool) Returns the requested property of a deal. The deal property must be of the double type. There are 2 variants of the function."
        }
    },
    "HistoryDealGetInteger": {
        "group": 2,
        "label": "HistoryDealGetInteger",
        "body": "HistoryDealGetInteger$0",
        "code": [
            {
                "label": "HistoryDealGetInteger(ulong ticket_number, ENUM_DEAL_PROPERTY_INTEGER property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "HistoryDealGetInteger(ulong ticket_number, ENUM_DEAL_PROPERTY_INTEGER property_id, long& long_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function. If successful, the value of the property is placed into a target variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket_number  [in]  Тикет сделки.",
                "property_id  [in]  Идентификатор свойства сделки. Значение может быть одним из значений перечисления ENUM_DEAL_PROPERTY_INTEGER.",
                "long_var  [out]  Переменная типа long, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "ticket_number  [in]  Trade ticket.",
                "property_id  [in]  Identifier of the deal property. The value can be one of the values of the ENUM_DEAL_PROPERTY_INTEGER enumeration.",
                "long_var  [out]  Variable of the long type that accepts the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает запрошенное свойство сделки. Свойство сделки должно быть типа datetime, int. Существует 2 варианта функции.",
            "en": "(bool) Returns the requested property of a deal. The deal property must be of the datetime, int type. There are 2 variants of the function."
        }
    },
    "HistoryDealGetString": {
        "group": 2,
        "label": "HistoryDealGetString",
        "body": "HistoryDealGetString$0",
        "code": [
            {
                "label": "HistoryDealGetString(ulong ticket_number, ENUM_DEAL_PROPERTY_STRING property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "HistoryDealGetString(ulong ticket_number, ENUM_DEAL_PROPERTY_STRING property_id, string& string_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function. If successful, the value of the property is placed into a target variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket_number  [in]  Tикет сделки.",
                "property_id  [in]  Идентификатор свойства сделки. Значение может быть одним из значений перечисления ENUM_DEAL_PROPERTY_STRING.",
                "string_var  [out]  Переменная типа string, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "ticket_number  [in]  Deal ticket.",
                "property_id  [in]  Identifier of the deal property. The value can be one of the values of the ENUM_DEAL_PROPERTY_STRING enumeration.",
                "string_var  [out]  Variable of the string type that accepts the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает запрошенное свойство сделки. Свойство сделки должно быть типа string. Существует 2 варианта функции.",
            "en": "(bool) Returns the requested property of a deal. The deal property must be of the string type. There are 2 variants of the function."
        }
    },
    "HistoryDealGetTicket": {
        "group": 2,
        "label": "HistoryDealGetTicket",
        "body": "HistoryDealGetTicket$0",
        "code": [
            {
                "label": "HistoryDealGetTicket(int index)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "index  [in]  Номер сделки в списке сделок."
            ],
            "en": [
                "index  [in]  Number of a deal in the list of deals"
            ]
        },
        "description": {
            "ru": "(ulong) Выбирает сделку для дальнейшей обработки и возвращает тикет сделки в истории. Перед вызовом функции HistoryDealGetTicket() необходимо получить историю сделок и ордеров с помощью функции HistorySelect() или HistorySelectByPosition().",
            "en": "(ulong) The function selects a deal for further processing and returns the deal ticket in history. Prior to calling HistoryDealGetTicket(), first it is necessary to receive the history of deals and orders using the HistorySelect() or HistorySelectByPosition() function."
        }
    },
    "HistoryDealSelect": {
        "group": 2,
        "label": "HistoryDealSelect",
        "body": "HistoryDealSelect$0",
        "code": [
            {
                "label": "HistoryDealSelect(ulong ticket)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket  [in]  Тикет сделки"
            ],
            "en": [
                "ticket  [in]  Deal ticket."
            ]
        },
        "description": {
            "ru": "(bool) Выбирает в истории сделку для дальнейших обращений к ней  через соответствующие функции. Возвращает true при успешном завершении функции. Возвращает false при неудачном завершении функции. Чтобы получить информацию об ошибке, необходимо вызвать функцию GetLastError().",
            "en": "(bool) Selects a deal in the history for further calling it through appropriate functions. It returns true if the function has been successfully completed. Returns false if the function has failed. For more details on error call GetLastError()."
        }
    },
    "HistoryDealsTotal": {
        "group": 2,
        "label": "HistoryDealsTotal",
        "body": "HistoryDealsTotal($0)",
        "code": [
            {
                "label": "HistoryDealsTotal()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает количество сделок в истории. Перед вызовом функции HistoryDealsTotal() необходимо получить историю сделок и ордеров с помощью функции HistorySelect() или HistorySelectByPosition().",
            "en": "(int) Returns the number of deal in history. Prior to calling HistoryDealsTotal(), first it is necessary to receive the history of deals and orders using the HistorySelect() or HistorySelectByPosition() function."
        }
    },
    "HistoryOrderGetDouble": {
        "group": 2,
        "label": "HistoryOrderGetDouble",
        "body": "HistoryOrderGetDouble$0",
        "code": [
            {
                "label": "HistoryOrderGetDouble(ulong ticket_number, ENUM_ORDER_PROPERTY_DOUBLE property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "HistoryOrderGetDouble(ulong ticket_number, ENUM_ORDER_PROPERTY_DOUBLE property_id, double& double_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function. If successful, the value of the property is placed into a target variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket_number  [in]  Тикет ордера.",
                "property_id  [in]  Идентификатор свойства ордера. Значение может быть одним из значений перечисления ENUM_ORDER_PROPERTY_DOUBLE.",
                "double_var  [out]  Переменная типа double, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "ticket_number  [in]  Order ticket.",
                "property_id  [in]  Identifier of the order property. The value can be one of the values of the ENUM_ORDER_PROPERTY_DOUBLE enumeration.",
                "double_var  [out]  Variable of the double type that accepts the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает запрошенное свойство ордера. Свойство ордера должно быть типа double. Существует 2 варианта функции.",
            "en": "(bool) Returns the requested order property. The order property must be of the double type. There are 2 variants of the function."
        }
    },
    "HistoryOrderGetInteger": {
        "group": 2,
        "label": "HistoryOrderGetInteger",
        "body": "HistoryOrderGetInteger$0",
        "code": [
            {
                "label": "HistoryOrderGetInteger(ulong ticket_number, ENUM_ORDER_PROPERTY_INTEGER property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "HistoryOrderGetInteger(ulong ticket_number, ENUM_ORDER_PROPERTY_INTEGER property_id, long& long_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function. If successful, the value of the property is placed into a target variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket_number  [in]  Тикет ордера.",
                "property_id  [in]  Идентификатор свойства ордера. Значение может быть одним из значений перечисления ENUM_ORDER_PROPERTY_INTEGER.",
                "long_var  [out]  Переменная типа long, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "ticket_number  [in]  Order ticket.",
                "property_id  [in]  Identifier of the order property. The value can be one of the values of the ENUM_ORDER_PROPERTY_INTEGER enumeration.",
                "long_var  [out]  Variable of the long type that accepts the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает запрошенное свойство ордера. Свойство ордера должно быть типа datetime, int. Существует 2 варианта функции.",
            "en": "(bool) Returns the requested property of an order. The order property must be of datetime, int type. There are 2 variants of the function."
        }
    },
    "HistoryOrderGetString": {
        "group": 2,
        "label": "HistoryOrderGetString",
        "body": "HistoryOrderGetString$0",
        "code": [
            {
                "label": "HistoryOrderGetString(ulong ticket_number, ENUM_ORDER_PROPERTY_STRING property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "HistoryOrderGetString(ulong ticket_number, ENUM_ORDER_PROPERTY_STRING property_id, string& string_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function. If successful, the value of the property is placed into a target variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket_number  [in]  Тикет ордера.",
                "property_id  [in]  Идентификатор свойства ордера. Значение может быть одним из значений перечисления ENUM_ORDER_PROPERTY_STRING.",
                "string_var  [out]  Переменная типа string, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "ticket_number  [in]  Order ticket.",
                "property_id  [in]  Identifier of the order property. The value can be one of the values of the ENUM_ORDER_PROPERTY_STRING enumeration.",
                "string_var  [out]  Variable of the string type."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает запрошенное свойство ордера. Свойство ордера должно быть типа string. Существует 2 варианта функции.",
            "en": "(bool) Returns the requested property of an order. The order property must be of the string type. There are 2 variants of the function."
        }
    },
    "HistoryOrderGetTicket": {
        "group": 2,
        "label": "HistoryOrderGetTicket",
        "body": "HistoryOrderGetTicket$0",
        "code": [
            {
                "label": "HistoryOrderGetTicket(int index)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "index  [in]  Номер ордера в списке ордеров."
            ],
            "en": [
                "index  [in]  Number of the order in the list of orders."
            ]
        },
        "description": {
            "ru": "(ulong) Возвращает тикет соответствующего ордера в истории. Перед вызовом функции HistoryOrderGetTicket() необходимо получить историю сделок и ордеров с помощью функции HistorySelect() или HistorySelectByPosition().",
            "en": "(ulong) Return the ticket of a corresponding order in the history. Prior to calling HistoryOrderGetTicket(), first it is necessary to receive the history of deals and orders using the HistorySelect() or HistorySelectByPosition() function."
        }
    },
    "HistoryOrderSelect": {
        "group": 2,
        "label": "HistoryOrderSelect",
        "body": "HistoryOrderSelect$0",
        "code": [
            {
                "label": "HistoryOrderSelect(ulong ticket)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket  [in]  Тикет ордера"
            ],
            "en": [
                "ticket  [in]  Order ticket."
            ]
        },
        "description": {
            "ru": "(bool) Выбирает в истории ордер для последующих обращений к нему через соответствующие функции. Возвращает true при успешном завершении функции. Возвращает false при неудачном завершении функции. Чтобы получить информацию об ошибке, необходимо вызвать функцию GetLastError().",
            "en": "(bool) Selects an order from the history for further calling it through appropriate functions. It returns true if the function has been successfully completed. Returns false if the function has failed. For more details on error call GetLastError()."
        }
    },
    "HistoryOrdersTotal": {
        "group": 2,
        "label": "HistoryOrdersTotal",
        "body": "HistoryOrdersTotal($0)",
        "code": [
            {
                "label": "HistoryOrdersTotal()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает количество ордеров в истории. Перед вызовом функции HistoryOrdersTotal() необходимо получить историю сделок и ордеров с помощью функции HistorySelect() или HistorySelectByPosition().",
            "en": "(int) Returns the number of orders in the history. Prior to calling HistoryOrdersTotal(), first it is necessary to receive the history of deals and orders using the HistorySelect() or HistorySelectByPosition() function."
        }
    },
    "HistorySelect": {
        "group": 2,
        "label": "HistorySelect",
        "body": "HistorySelect$0",
        "code": [
            {
                "label": "HistorySelect(datetime from_date, datetime to_date)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "from_date  [in]  Начальная дата запроса.",
                "to_date  [in]  Конечная дата запроса."
            ],
            "en": [
                "from_date  [in]  Start date of the request.",
                "to_date  [in]  End date of the request."
            ]
        },
        "description": {
            "ru": "(bool) Запрашивает историю сделок и ордеров за указанный период серверного времени.",
            "en": "(bool) Retrieves the history of deals and orders for the specified period of server time."
        }
    },
    "HistorySelectByPosition": {
        "group": 2,
        "label": "HistorySelectByPosition",
        "body": "HistorySelectByPosition$0",
        "code": [
            {
                "label": "HistorySelectByPosition(long position_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "position_id  [in]  Идентификатор позиции, который проставляется на каждом исполненном ордере и на каждой сделке."
            ],
            "en": [
                "position_id  [in]  Position identifier that is set to every executed order and every deal."
            ]
        },
        "description": {
            "ru": "(bool) Запрашивает историю сделок и ордеров, имеющих указанный идентификатор позиции.",
            "en": "(bool) Retrieves the history of deals and orders having the specified position identifier."
        }
    },
    "iBars": {
        "group": 2,
        "label": "iBars",
        "body": "iBars$0",
        "code": [
            {
                "label": "iBars(const string symbol, ENUM_TIMEFRAMES timeframe)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period."
            ]
        },
        "description": {
            "ru": "(int) Возвращает количество баров в истории по соответствующему символу и периоду.",
            "en": "(int) Returns the number of bars of a corresponding symbol and period, available in history."
        }
    },
    "iBarShift": {
        "group": 2,
        "label": "iBarShift",
        "body": "iBarShift$0",
        "code": [
            {
                "label": "iBarShift(const string symbol, ENUM_TIMEFRAMES timeframe, datetime time, bool exact)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. PERIOD_CURRENT означает период текущего графика.",
                "time  [in]  Значение времени для поиска.",
                "exact  [in]  Возвращаемое значение, если бар на указанное время не найден. При значении exact=false iBarShift возвращает индекс ближайшего бара, у которого время открытия меньше указанного (time_open<time). Если такой бар не найден (нет истории раньше указанного времени), то функция вернет -1. Если exact=true, то ближайший бар не ищется и функция iBarShift сразу возвращает -1."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. PERIOD_CURRENT means the current chart period.",
                "time  [in]  Time value to search for.",
                "exact  [in]  A return value, in case the bar with the specified time is not found. If exact=false, iBarShift returns the index of the nearest bar, the Open time of which is less than the specified time (time_open<time). If such a bar is not found (history before the specified time is not available), then the function returns -1. If exact=true, iBarShift does not search for a nearest bar but immediately returns -1."
            ]
        },
        "description": {
            "ru": "(int) Поиск бара по времени. Функция возвращает индекс бара, в который попадает указанное время.",
            "en": "(int) Search bar by time. The function returns the index of the bar corresponding to the specified time."
        }
    },
    "iClose": {
        "group": 2,
        "label": "iClose",
        "body": "iClose$0",
        "code": [
            {
                "label": "iClose(const string symbol, ENUM_TIMEFRAMES timeframe, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "shift  [in]  Индекс получаемого значения из таймсерии (сдвиг относительно текущего бара на указанное количество баров назад)."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "shift  [in]  The index of the received value from the timeseries (backward shift by specified number of bars relative to the current bar)."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение цены закрытия бара (указанного параметром shift) соответствующего графика.",
            "en": "(double) Returns the Close price of the bar (indicated by the 'shift' parameter) on the corresponding chart."
        }
    },
    "iHigh": {
        "group": 2,
        "label": "iHigh",
        "body": "iHigh$0",
        "code": [
            {
                "label": "iHigh(const string symbol, ENUM_TIMEFRAMES timeframe, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "shift  [in]  Индекс получаемого значения из таймсерии (сдвиг относительно текущего бара на указанное количество баров назад)."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "shift  [in]  The index of the received value from the timeseries (backward shift by specified number of bars relative to the current bar)."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение максимальной цены бара (указанного параметром shift) соответствующего графика.",
            "en": "(double) Returns the High price of the bar (indicated by the 'shift' parameter) on the corresponding chart."
        }
    },
    "iHighest": {
        "group": 2,
        "label": "iHighest",
        "body": "iHighest$0",
        "code": [
            {
                "label": "iHighest(const string symbol, ENUM_TIMEFRAMES timeframe, ENUM_SERIESMODE type, int count, int start)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символ, на котором будет производиться поиск. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "type  [in]  Идентификатор таймсерии, в которой будет производится поиск. Может быть любым из значений ENUM_SERIESMODE.",
                "count  [in]  Число элементов таймсерии (в направлении от текущего бара в сторону возрастания индекса), среди которых должен быть произведен поиск.",
                "start  [in]  Индекс (смещение относительно текущего бара) начального бара, с которого начинается поиск наибольшего значения. Отрицательные значения игнорируются и заменяются нулевым значением."
            ],
            "en": [
                "symbol  [in]  The symbol, on which the search will be performed. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "type  [in]  The identifier of the timeseries, in which the search will be performed. Can be equal to any value from ENUM_SERIESMODE.",
                "count  [in]  The number of elements in the timeseries (from the current bar towards index increasing direction), among which the search should be performed.",
                "start  [in]  The index (shift relative to the current bar) of the initial bar, from which search for the highest value begins. Negative values ​​are ignored and replaced with a zero value."
            ]
        },
        "description": {
            "ru": "(int) Возвращает индекс наибольшего найденного значения (смещение относительно текущего бара) соответствующего графика.",
            "en": "(int) Returns the index of the highest value found on the corresponding chart (shift relative to the current bar)."
        }
    },
    "iLow": {
        "group": 2,
        "label": "iLow",
        "body": "iLow$0",
        "code": [
            {
                "label": "iLow(const string symbol, ENUM_TIMEFRAMES timeframe, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "shift  [in]  Индекс получаемого значения из таймсерии (сдвиг относительно текущего бара на указанное количество баров назад)."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "shift  [in]  The index of the received value from the timeseries (backward shift by specified number of bars relative to the current bar)."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение минимальной цены бара (указанного параметром shift) соответствующего графика.",
            "en": "(double) Returns the Low price of the bar (indicated by the 'shift' parameter) on the corresponding chart."
        }
    },
    "iLowest": {
        "group": 2,
        "label": "iLowest",
        "body": "iLowest$0",
        "code": [
            {
                "label": "iLowest(const string symbol, ENUM_TIMEFRAMES timeframe, ENUM_SERIESMODE type, int count, int start)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символ, на котором будет производиться поиск. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "type  [in]  Идентификатор таймсерии, в которой будет производится поиск. Может быть любым из значений ENUM_SERIESMODE.",
                "count  [in]  Число элементов таймсерии (в направлении от текущего бара в сторону возрастания индекса), среди которых должен быть произведен поиск.",
                "start  [in]  Индекс (смещение относительно текущего бара) начального бара, с которого начинается поиск наименьшего значения. Отрицательные значения игнорируются и заменяются нулевым значением."
            ],
            "en": [
                "symbol  [in]  The symbol, on which the search will be performed. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "type  [in]  The identifier of the timeseries, in which the search will be performed. Can be equal to any value from ENUM_SERIESMODE.",
                "count  [in]  The number of elements in the timeseries (from the current bar towards index increasing direction), among which the search should be performed.",
                "start  [in]  The index (shift relative to the current bar) of the initial bar, from which search for the lowest value begins. Negative values ​​are ignored and replaced with a zero value."
            ]
        },
        "description": {
            "ru": "(int) Возвращает индекс наименьшего найденного значения (смещение относительно текущего бара) соответствующего графика.",
            "en": "(int) Returns the index of the smallest value found on the corresponding chart (shift relative to the current bar)."
        }
    },
    "iOpen": {
        "group": 2,
        "label": "iOpen",
        "body": "iOpen$0",
        "code": [
            {
                "label": "iOpen(const string symbol, ENUM_TIMEFRAMES timeframe, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "shift  [in]  Индекс получаемого значения из таймсерии (сдвиг относительно текущего бара на указанное количество баров назад)."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "shift  [in]  The index of the received value from the timeseries (backward shift by specified number of bars relative to the current bar)."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение цены открытия бара (указанного параметром shift) соответствующего графика.",
            "en": "(double) Returns the Open price of the bar (indicated by the 'shift' parameter) on the corresponding chart."
        }
    },
    "iTime": {
        "group": 2,
        "label": "iTime",
        "body": "iTime$0",
        "code": [
            {
                "label": "iTime(const string symbol, ENUM_TIMEFRAMES timeframe, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "shift  [in]  Индекс получаемого значения из таймсерии (сдвиг относительно текущего бара на указанное количество баров назад)."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "shift  [in]  The index of the received value from the timeseries (backward shift by specified number of bars relative to the current bar)."
            ]
        },
        "description": {
            "ru": "(datetime) Возвращает значение времени открытия бара (указанного параметром shift) соответствующего графика.",
            "en": "(datetime) Returns the opening time of the bar (indicated by the 'shift' parameter) on the corresponding chart."
        }
    },
    "iTickVolume": {
        "group": 2,
        "label": "iTickVolume",
        "body": "iTickVolume$0",
        "code": [
            {
                "label": "iTickVolume(const string symbol, ENUM_TIMEFRAMES timeframe, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "shift  [in]  Индекс получаемого значения из таймсерии (сдвиг относительно текущего бара на указанное количество баров назад)."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "shift  [in]  The index of the received value from the timeseries (backward shift by specified number of bars relative to the current bar)."
            ]
        },
        "description": {
            "ru": "(long) Возвращает значение тикового объема бара (указанного параметром shift) соответствующего графика.",
            "en": "(long) Returns the tick volume of the bar (indicated by the 'shift' parameter) on the corresponding chart."
        }
    },
    "iRealVolume": {
        "group": 2,
        "label": "iRealVolume",
        "body": "iRealVolume$0",
        "code": [
            {
                "label": "iRealVolume(const string symbol, ENUM_TIMEFRAMES timeframe, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "shift  [in]  Индекс получаемого значения из таймсерии (сдвиг относительно текущего бара на указанное количество баров назад)."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "shift  [in]  The index of the received value from the timeseries (backward shift by specified number of bars relative to the current bar)."
            ]
        },
        "description": {
            "ru": "(long) Возвращает значение реального объема бара (указанного параметром shift) соответствующего графика.",
            "en": "(long) Returns the real volume of the bar (indicated by the 'shift' parameter) on the corresponding chart."
        }
    },
    "iVolume": {
        "group": 2,
        "label": "iVolume",
        "body": "iVolume$0",
        "code": [
            {
                "label": "iVolume(const string symbol, ENUM_TIMEFRAMES timeframe, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "shift  [in]  Индекс получаемого значения из таймсерии (сдвиг относительно текущего бара на указанное количество баров назад)."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "shift  [in]  The index of the received value from the timeseries (backward shift by specified number of bars relative to the current bar)."
            ]
        },
        "description": {
            "ru": "(long) Возвращает значение тикового объема бара (указанного параметром shift) соответствующего графика.",
            "en": "(long) Returns the tick volume of the bar (indicated by the 'shift' parameter) on the corresponding chart."
        }
    },
    "iSpread": {
        "group": 2,
        "label": "iSpread",
        "body": "iSpread$0",
        "code": [
            {
                "label": "iSpread(const string symbol, ENUM_TIMEFRAMES timeframe, int shift)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента. NULL означает текущий символ.",
                "timeframe  [in]  Период. Может быть одним из значений перечисления ENUM_TIMEFRAMES. 0 означает период текущего графика.",
                "shift  [in]  Индекс получаемого значения из таймсерии (сдвиг относительно текущего бара на указанное количество баров назад)."
            ],
            "en": [
                "symbol  [in]  The symbol name of the financial instrument. NULL means the current symbol.",
                "timeframe  [in]  Period. It can be one of the values of the ENUM_TIMEFRAMES enumeration. 0 means the current chart period.",
                "shift  [in]  The index of the received value from the timeseries (backward shift by specified number of bars relative to the current bar)."
            ]
        },
        "description": {
            "ru": "(long) Возвращает значение спреда бара (указанного параметром shift) соответствующего графика.",
            "en": "(long) Returns the spread value of the bar (indicated by the 'shift' parameter) on the corresponding chart."
        }
    },
    "iAD": {
        "group": 2,
        "label": "iAD",
        "body": "iAD$0",
        "code": [
            {
                "label": "iAD(string symbol, ENUM_TIMEFRAMES period, ENUM_APPLIED_VOLUME applied_volume)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "applied_volume  [in]   Используемый объем. Может быть любой из ENUM_APPLIED_VOLUME."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES enumeration values, 0 means the current timeframe.",
                "applied_volume  [in]   The volume used. Can be any of ENUM_APPLIED_VOLUME values."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Accumulation/Distribution. Всего один буфер.",
            "en": "(int) The function returns the handle of the Accumulation/Distribution indicator. It has only one buffer."
        }
    },
    "iADX": {
        "group": 2,
        "label": "iADX",
        "body": "iADX$0",
        "code": [
            {
                "label": "iADX(string symbol, ENUM_TIMEFRAMES period, int adx_period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "adx_period  [in]  Период для вычисления индекса."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "adx_period  [in]  Period to calculate the index."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Average Directional Movement Index.",
            "en": "(int) The function returns the handle of the Average Directional Movement Index indicator."
        }
    },
    "iADXWilder": {
        "group": 2,
        "label": "iADXWilder",
        "body": "iADXWilder$0",
        "code": [
            {
                "label": "iADXWilder(string symbol, ENUM_TIMEFRAMES period, int adx_period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "adx_period  [in]  Период для вычисления индекса."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "adx_period  [in]  Period to calculate the index."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Average Directional Movement Index by Welles Wilder.",
            "en": "(int) The function returns the handle of Average Directional Movement Index by Welles Wilder."
        }
    },
    "iAlligator": {
        "group": 2,
        "label": "iAlligator",
        "body": "iAlligator$0",
        "code": [
            {
                "label": "iAlligator(string symbol, ENUM_TIMEFRAMES period, int jaw_period, int jaw_shift, int teeth_period, int teeth_shift, int lips_period, int lips_shift, ENUM_MA_METHOD ma_method, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "jaw_period  [in]  Период усреднения синей линии (челюсти аллигатора).",
                "jaw_shift  [in]  Смещение синей линии относительно графика цены.",
                "teeth_period  [in]  Период усреднения красной линии (зубов аллигатора).",
                "teeth_shift  [in]  Смещение красной линии относительно графика цены.",
                "lips_period  [in]  Период усреднения зеленой линии (губ аллигатора).",
                "lips_shift  [in]  Смещение зеленой линии относительно графика цены.",
                "ma_method  [in]  Метод усреднения. Может быть любым из значений перечисления ENUM_MA_METHOD.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хэндлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "jaw_period  [in]  Averaging period for the blue line (Alligator's Jaw)",
                "jaw_shift  [in] The shift of the blue line relative to the price chart.",
                "teeth_period  [in]   Averaging period for the red line (Alligator's Teeth).",
                "teeth_shift  [in] The shift of the red line relative to the price chart.",
                "lips_period  [in]  Averaging period for the green line (Alligator's lips).",
                "lips_shift  [in] The shift of the green line relative to the price chart.",
                "ma_method  [in]  The method of averaging. Can be any of the ENUM_MA_METHOD values.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Alligator.",
            "en": "(int) The function returns the handle of the Alligator indicator."
        }
    },
    "iAMA": {
        "group": 2,
        "label": "iAMA",
        "body": "iAMA$0",
        "code": [
            {
                "label": "iAMA(string symbol, ENUM_TIMEFRAMES period, int ama_period, int fast_ma_period, int slow_ma_period, int ama_shift, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ama_period  [in]  Период вычисления, на котором вычисляется  коэффициент эффективности.",
                "fast_ma_period  [in]  Быстрый период для вычисления коэффициента сглаживания в моменты быстрого рынка.",
                "slow_ma_period  [in]  Медленный период для вычисления коэффициента сглаживания в отсутствии тренда.",
                "ama_shift  [in]  Сдвиг индикатора относительно ценового графика.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ama_period  [in]  The calculation period, on which the efficiency coefficient is calculated.",
                "fast_ma_period  [in]  Fast period for the smoothing coefficient calculation for a rapid market.",
                "slow_ma_period  [in]  Slow period for the smoothing coefficient calculation in the absence of trend.",
                "ama_shift  [in]  Shift of the indicator relative to the price chart.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Adaptive Moving Average. Всего один буфер.",
            "en": "(int) The function returns the handle of the Adaptive Moving Average indicator. It has only one buffer."
        }
    },
    "iAO": {
        "group": 2,
        "label": "iAO",
        "body": "iAO$0",
        "code": [
            {
                "label": "iAO(string symbol, ENUM_TIMEFRAMES period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Awesome Oscillator. Всего один буфер.",
            "en": "(int) The function returns the handle of the Awesome Oscillator indicator. It has only one buffer."
        }
    },
    "iATR": {
        "group": 2,
        "label": "iATR",
        "body": "iATR$0",
        "code": [
            {
                "label": "iATR(string symbol, ENUM_TIMEFRAMES period, int ma_period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in]  The value of the averaging period for the indicator calculation."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Average True Range. Всего один буфер.",
            "en": "(int) The function returns the handle of the Average True Range indicator. It has only one buffer."
        }
    },
    "iBands": {
        "group": 2,
        "label": "iBands",
        "body": "iBands$0",
        "code": [
            {
                "label": "iBands(string symbol, ENUM_TIMEFRAMES period, int bands_period, int bands_shift, double deviation, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "bands_period  [in]  Период усреднения основной линии индикатора.",
                "bands_shift  [in]  Сдвиг индикатора относительно ценового графика.",
                "deviation  [in]  Отклонение от основной линии.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "bands_period  [in]  The averaging period of the main line of the indicator.",
                "bands_shift  [in] The shift the indicator relative to the price chart.",
                "deviation  [in]  Deviation from the main line.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Bollinger Bands®.",
            "en": "(int) The function returns the handle of the Bollinger Bands® indicator."
        }
    },
    "iBearsPower": {
        "group": 2,
        "label": "iBearsPower",
        "body": "iBearsPower$0",
        "code": [
            {
                "label": "iBearsPower(string symbol, ENUM_TIMEFRAMES period, int ma_period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in]  The value of the averaging period for the indicator calculation."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Bears Power. Всего один буфер.",
            "en": "(int) The function returns the handle of the Bears Power indicator. It has only one buffer."
        }
    },
    "iBullsPower": {
        "group": 2,
        "label": "iBullsPower",
        "body": "iBullsPower$0",
        "code": [
            {
                "label": "iBullsPower(string symbol, ENUM_TIMEFRAMES period, int ma_period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in]  The averaging period for the indicator calculation."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Bulls Power. Всего один буфер.",
            "en": "(int) The function returns the handle of the Bulls Power indicator. It has only one buffer."
        }
    },
    "iBWMFI": {
        "group": 2,
        "label": "iBWMFI",
        "body": "iBWMFI$0",
        "code": [
            {
                "label": "iBWMFI(string symbol, ENUM_TIMEFRAMES period, ENUM_APPLIED_VOLUME applied_volume)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "applied_volume  [in]  Используемый объем. Может быть любой из значений перечисления ENUM_APPLIED_VOLUME."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "applied_volume  [in]  The volume used. Can be one of the constants of ENUM_APPLIED_VOLUME."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Market Facilitation Index. Всего один буфер.",
            "en": "(int) The function returns the handle of the Market Facilitation Index indicator. It has only one buffer."
        }
    },
    "iCCI": {
        "group": 2,
        "label": "iCCI",
        "body": "iCCI$0",
        "code": [
            {
                "label": "iCCI(string symbol, ENUM_TIMEFRAMES period, int ma_period, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления индикатора.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in]   The averaging period for the indicator calculation.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Commodity Channel Index. Всего один буфер.",
            "en": "(int) The function returns the handle of the Commodity Channel Index indicator. It has only one buffer."
        }
    },
    "iChaikin": {
        "group": 2,
        "label": "iChaikin",
        "body": "iChaikin$0",
        "code": [
            {
                "label": "iChaikin(string symbol, ENUM_TIMEFRAMES period, int fast_ma_period, int slow_ma_period, ENUM_MA_METHOD ma_method, ENUM_APPLIED_VOLUME applied_volume)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "fast_ma_period  [in]  Быстрый период усреднения для вычисления индикатора.",
                "slow_ma_period  [in]  Медленный период усреднения для вычисления индикатора.",
                "ma_method  [in]  Тип усреднения.Может быть любой из констант усреднения ENUM_MA_METHOD.",
                "applied_volume  [in]  Используемый объем. Может быть любой из перечисления ENUM_APPLIED_VOLUME."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "fast_ma_period  [in] Fast averaging period for calculations.",
                "slow_ma_period  [in] Slow averaging period for calculations.",
                "ma_method  [in]  Smoothing type. Can be one of the averaging constants of ENUM_MA_METHOD.",
                "applied_volume  [in]  The volume used. Can be one of the constants of ENUM_APPLIED_VOLUME."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Chaikin Oscillator. Всего один буфер.",
            "en": "(int) The function returns the handle of the Chaikin Oscillator indicator. It has only one buffer."
        }
    },
    "iCustom": {
        "group": 2,
        "label": "iCustom",
        "body": "iCustom$0",
        "code": [
            {
                "label": "iCustom(string symbol, ENUM_TIMEFRAMES period, string name, input parameters)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 4,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "name  [in]  Имя пользовательского индикатора. Если перед именем указан обратный слеш '\\', то EX5-файл индикатора ищется относительно корневой директории индикаторов MQL5. Таким образом при вызове iCustom(Symbol(), Period(), \"\\FirstIndicator\"...) индикатор будет загружаться как MQL5\\FirstIndicator.ex5. Если по этому пути файла не окажется, то возникнет ошибка 4802 (ERR_INDICATOR_CANNOT_CREATE).",
                "parameters  [in] input-параметры пользовательского индикатора, разделенные запятыми."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "name  [in]  Custom indicator name. If the name starts with the reverse slash '\\', the EX5 indicator file is searched for relative to the MQL5\\Indicators indicator root directory. Thus, when calling iCustom(Symbol(), Period(), \"\\FirstIndicator\"...), the indicator is downloaded as MQL5\\Indicators\\FirstIndicator.ex5. If the path contains no file, the error 4802 (ERR_INDICATOR_CANNOT_CREATE) occurs.",
                "parameters  [in] input-parameters of a custom indicator, separated by commas."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл указанного пользовательского индикатора.",
            "en": "(int) The function returns the handle of a specified custom indicator."
        }
    },
    "iDEMA": {
        "group": 2,
        "label": "iDEMA",
        "body": "iDEMA$0",
        "code": [
            {
                "label": "iDEMA(string symbol, ENUM_TIMEFRAMES period, int ma_period, int ma_shift, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период(количество баров) для вычисления индикатора.",
                "ma_shift  [in]  Сдвиг индикатора относительно ценового графика.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in] Averaging period (bars count) for calculations.",
                "ma_shift  [in]  Shift of the indicator relative to the price chart.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Double Exponential Moving Average. Всего один буфер.",
            "en": "(int) The function returns the handle of the Double Exponential Moving Average indicator. It has only one buffer."
        }
    },
    "iDeMarker": {
        "group": 2,
        "label": "iDeMarker",
        "body": "iDeMarker$0",
        "code": [
            {
                "label": "iDeMarker(string symbol, ENUM_TIMEFRAMES period, int ma_period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in] Averaging period (bars count) for calculations."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора DeMarker. Всего один буфер.",
            "en": "(int) The function returns the handle of the DeMarker indicator. It has only one buffer."
        }
    },
    "iEnvelopes": {
        "group": 2,
        "label": "iEnvelopes",
        "body": "iEnvelopes$0",
        "code": [
            {
                "label": "iEnvelopes(string symbol, ENUM_TIMEFRAMES period, int ma_period, int ma_shift, ENUM_MA_METHOD ma_method, ENUM_APPLIED_PRICE applied_price, double deviation)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения основной линии индикатора.",
                "ma_shift  [in]  Сдвиг индикатора относительно ценового графика.",
                "ma_method  [in]  Метод усреднения. Может быть любым из значений значений перечисления ENUM_MA_METHOD.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора.",
                "deviation  [in]  Отклонение от основной линии в процентах."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in] Averaging period for the main line.",
                "ma_shift  [in] The shift of the indicator relative to the price chart.",
                "ma_method  [in]  Smoothing type. Can be one of the values of ENUM_MA_METHOD.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator.",
                "deviation  [in]  The deviation from the main line (in percents)."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Envelopes.",
            "en": "(int) The function returns the handle of the Envelopes indicator."
        }
    },
    "iForce": {
        "group": 2,
        "label": "iForce",
        "body": "iForce$0",
        "code": [
            {
                "label": "iForce(string symbol, ENUM_TIMEFRAMES period, int ma_period, ENUM_MA_METHOD ma_method, ENUM_APPLIED_VOLUME applied_volume)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления индикатора.",
                "ma_method  [in]  Метод усреднения. Может быть любым из значений перечисления ENUM_MA_METHOD.",
                "applied_volume  [in]  Используемый объем. Может быть любой из значений перечисления ENUM_APPLIED_VOLUME."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in] Averaging period for the indicator calculations.",
                "ma_method  [in]  Smoothing type. Can be one of the values of ENUM_MA_METHOD.",
                "applied_volume  [in]  The volume used. Can be one of the values of ENUM_APPLIED_VOLUME."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Force Index. Всего один буфер.",
            "en": "(int) The function returns the handle of the Force Index indicator. It has only one buffer."
        }
    },
    "iFractals": {
        "group": 2,
        "label": "iFractals",
        "body": "iFractals$0",
        "code": [
            {
                "label": "iFractals(string symbol, ENUM_TIMEFRAMES period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Fractals.",
            "en": "(int) The function returns the handle of the Fractals indicator."
        }
    },
    "iFrAMA": {
        "group": 2,
        "label": "iFrAMA",
        "body": "iFrAMA$0",
        "code": [
            {
                "label": "iFrAMA(string symbol, ENUM_TIMEFRAMES period, int ma_period, int ma_shift, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период(количество баров) для вычисления индикатора.",
                "ma_shift  [in]  Сдвиг индикатора относительно ценового графика.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in] Period (bars count) for the indicator calculations.",
                "ma_shift  [in]  Shift of the indicator in the price chart.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Fractal Adaptive Moving Average. Всего один буфер.",
            "en": "(int) The function returns the handle of the Fractal Adaptive Moving Average indicator. It has only one buffer."
        }
    },
    "iGator": {
        "group": 2,
        "label": "iGator",
        "body": "iGator$0",
        "code": [
            {
                "label": "iGator(string symbol, ENUM_TIMEFRAMES period, int jaw_period, int jaw_shift, int teeth_period, int teeth_shift, int lips_period, int lips_shift, ENUM_MA_METHOD ma_method, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "jaw_period  [in]  Период усреднения синей линии (челюсти аллигатора).",
                "jaw_shift  [in]  Смещение синей линии Аллигатора относительно графика цены. Не имеет напрямую отношения к визуальному смещению гистограммы индикатора.",
                "teeth_period  [in]  Период усреднения красной линии (зубов аллигатора).",
                "teeth_shift  [in]  Смещение красной линии Аллигатора относительно графика цены. Не имеет напрямую отношения к визуальному смещению гистограммы индикатора.",
                "lips_period  [in]  Период усреднения зеленой линии (губ аллигатора).",
                "lips_shift  [in]  Смещение зеленой линии Аллигатора относительно графика цены. Не имеет напрямую отношения к визуальному смещению гистограммы индикатора.",
                "ma_method  [in]  Метод усреднения. Может быть любым из значений ENUM_MA_METHOD.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "jaw_period  [in]  Averaging period for the blue line (Alligator's Jaw).",
                "jaw_shift  [in] The shift of the blue line relative to the price chart. It isn't directly connected with the visual shift of the indicator histogram.",
                "teeth_period  [in]   Averaging period for the red line (Alligator's Teeth).",
                "teeth_shift  [in] The shift of the red line relative to the price chart. It isn't directly connected with the visual shift of the indicator histogram.",
                "lips_period  [in]  Averaging period for the green line (Alligator's lips).",
                "lips_shift  [in] The shift of the green line relative to the price charts. It isn't directly connected with the visual shift of the indicator histogram.",
                "ma_method  [in]  Smoothing type. Can be one of the values of ENUM_MA_METHOD.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Gator. Осциллятор показывает разницу между синей и красной линией Аллигатора (верхняя гистограмма) и разницу между красной и зеленой линией (нижняя гистограмма).",
            "en": "(int) The function returns the handle of the Gator indicator. The Oscillator shows the difference between the blue and red lines of Alligator (upper histogram) and difference between red and green lines (lower histogram)."
        }
    },
    "iIchimoku": {
        "group": 2,
        "label": "iIchimoku",
        "body": "iIchimoku$0",
        "code": [
            {
                "label": "iIchimoku(string symbol, ENUM_TIMEFRAMES period, int tenkan_sen, int kijun_sen, int senkou_span_b)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "tenkan_sen  [in]  Период усреднения Tenkan Sen.",
                "kijun_sen  [in]  Период усреднения Kijun Sen.",
                "senkou_span_b  [in]  Период усреднения Senkou Span B."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "tenkan_sen  [in] Averaging period for Tenkan Sen.",
                "kijun_sen  [in] Averaging period for Kijun Sen.",
                "senkou_span_b  [in] Averaging period for Senkou Span B."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Ichimoku Kinko Hyo.",
            "en": "(int) The function returns the handle of the Ichimoku Kinko Hyo indicator."
        }
    },
    "iMA": {
        "group": 2,
        "label": "iMA",
        "body": "iMA$0",
        "code": [
            {
                "label": "iMA(string symbol, ENUM_TIMEFRAMES period, int ma_period, int ma_shift, ENUM_MA_METHOD ma_method, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления скользящего среднего.",
                "ma_shift  [in]  Сдвиг индикатора относительно ценового графика.",
                "ma_method  [in]  Метод усреднения. Может быть любым из значений ENUM_MA_METHOD.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in] Averaging period for the calculation of the moving average.",
                "ma_shift  [in]  Shift of the indicator relative to the price chart.",
                "ma_method  [in]  Smoothing type. Can be one of the ENUM_MA_METHOD values.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора скользящего среднего. Всего один буфер.",
            "en": "(int) The function returns the handle of the Moving Average indicator. It has only one buffer."
        }
    },
    "iMACD": {
        "group": 2,
        "label": "iMACD",
        "body": "iMACD$0",
        "code": [
            {
                "label": "iMACD(string symbol, ENUM_TIMEFRAMES period, int fast_ema_period, int slow_ema_period, int signal_period, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "fast_ema_period  [in]  Период усреднения для вычисления быстрой скользящей средней.",
                "slow_ema_period  [in]  Период усреднения для вычисления медленной скользящей средней.",
                "signal_period  [in]  Период усреднения для вычисления сигнальной линии.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "fast_ema_period  [in]  Period for Fast Moving Average calculation.",
                "slow_ema_period  [in]  Period for Slow Moving Average calculation.",
                "signal_period  [in]  Period for Signal line calculation.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Moving Averages Convergence/Divergence. В тех системах, где ОsМА называют гистограммой MACD, данный индикатор изображается в виде двух линий. В клиентском терминале схождение/расхождение скользящих средних рисуется в виде гистограммы.",
            "en": "(int) The function returns the handle of the Moving Averages Convergence/Divergence indicator. In systems where OsMA is called MACD Histogram, this indicator is shown as two lines. In the client terminal the Moving Averages Convergence/Divergence looks like a histogram."
        }
    },
    "iMFI": {
        "group": 2,
        "label": "iMFI",
        "body": "iMFI$0",
        "code": [
            {
                "label": "iMFI(string symbol, ENUM_TIMEFRAMES period, int ma_period, ENUM_APPLIED_VOLUME applied_volume)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период(количество баров) для вычисления индикатора.",
                "applied_volume  [in]  Используемый объем. Может быть любой из ENUM_APPLIED_VOLUME."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in] Averaging period (bars count) for the calculation.",
                "applied_volume  [in]  The volume used. Can be any of the ENUM_APPLIED_VOLUME values."
            ]
        },
        "description": {
            "ru": "(int) Расчет Money Flow Index.",
            "en": "(int) The function returns the handle of the Money Flow Index indicator."
        }
    },
    "iMomentum": {
        "group": 2,
        "label": "iMomentum",
        "body": "iMomentum$0",
        "code": [
            {
                "label": "iMomentum(string symbol, ENUM_TIMEFRAMES period, int mom_period, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "mom_period  [in]  Период(количество баров) для вычисления изменения цены.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "mom_period  [in]  Averaging period (bars count) for the calculation of the price change.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Momentum. Всего один буфер.",
            "en": "(int) The function returns the handle of the Momentum indicator. It has only one buffer."
        }
    },
    "IndicatorCreate": {
        "group": 2,
        "label": "IndicatorCreate",
        "body": "IndicatorCreate$0",
        "code": [
            {
                "label": "IndicatorCreate(string symbol, ENUM_TIMEFRAMES period, ENUM_INDICATOR indicator_type, int parameters_cnt, const MqlParam& parameters_array[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "indicator_type  [in]  Тип индикатора, может принимать одно из значений перечисления ENUM_INDICATOR.",
                "parameters_cnt  [in]  Количество параметров, передаваемых в массиве parameters_array[]. Элементы массива имеют специальный тип структуры MqlParam. По умолчанию нулевое значение - параметры не передаются. Если указано ненулевое количество параметров, то параметр parameters_array является обязательным. Можно передавать не более 64 параметров.",
                "parameters_array[]  [in]  Массив типа MqlParam, элементы которого содержат тип и значение каждого входного параметра технического индикатора."
            ],
            "en": [
                "symbol  [in] Name of a symbol, on data of which the indicator is calculated. NULL means the current symbol.",
                "period  [in]  The value of the timeframe can be one of values of the ENUM_TIMEFRAMES enumeration, 0 means the current timeframe.",
                "indicator_type  [in]  Indicator type, can be one of values of the ENUM_INDICATOR enumeration.",
                "parameters_cnt  [in] The number of parameters passed in the parameters_array[] array. The array elements have a special structure type MqlParam. By default, zero - parameters are not passed. If you specify a non-zero number of parameters, the parameter parameters_array is obligatory. You can pass no more than 64 parameters.",
                "parameters_array[]  [in]  An array of MqlParam type, whose elements contain the type and value of each input parameter of a technical indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл указанного технического индикатора, созданного на основе массива параметров типа MqlParam.",
            "en": "(int) The function returns the handle of a specified technical indicator created based on the array of parameters of MqlParam type."
        }
    },
    "IndicatorParameters": {
        "group": 2,
        "label": "IndicatorParameters",
        "body": "IndicatorParameters$0",
        "code": [
            {
                "label": "IndicatorParameters(int indicator_handle, ENUM_INDICATOR& indicator_type, MqlParam& parameters[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "indicator_handle  [in]  Хэндл индикатора, для которого необходимо узнать количество параметров, на которых он рассчитан.",
                "indicator_type  [out]  Переменная типа  ENUM_INDICATOR, в которую будет записан тип индикатора.",
                "parameters[]  [out]  Динамический массив для получения значений типа  MqlParam, в который будет записан список параметров индикатора. Размер массива возвращает сама функция IndicatorParameters()."
            ],
            "en": [
                "indicator_handle  [in]  The handle of the indicator, for which you need to know the number of parameters its is calculated on.",
                "indicator_type  [out]  A variable if the ENUM_INDICATOR type, into which the indicator type will be written.",
                "parameters[]  [out]  A dynamic array for receiving values of the MqlParam type, into which the list of indicator parameters will be written. The array size is returned by the IndicatorParameters() function."
            ]
        },
        "description": {
            "ru": "(int) Возвращает по указанному хэндлу количество входных параметров индикатора, а также сами значения и тип параметров.",
            "en": "(int) Based on the specified handle, returns the number of input parameters of the indicator, as well as the values and types of the parameters."
        }
    },
    "IndicatorRelease": {
        "group": 2,
        "label": "IndicatorRelease",
        "body": "IndicatorRelease$0",
        "code": [
            {
                "label": "IndicatorRelease(int indicator_handle)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "indicator_handle  [in]  Хэндл индикатора."
            ],
            "en": [
                "indicator_handle  [in]  indicator handle."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет хэндл индикатора и освобождает расчетную часть индикатора, если ею больше никто не пользуется.",
            "en": "(bool) The function removes an indicator handle and releases the calculation block of the indicator, if it's not used by anyone else."
        }
    },
    "IndicatorSetDouble": {
        "group": 2,
        "label": "IndicatorSetDouble",
        "body": "IndicatorSetDouble$0",
        "code": [
            {
                "label": "IndicatorSetDouble(int prop_id, double prop_value)",
                "description": {
                    "ru": "Вызов с указанием идентификатора свойства.",
                    "en": "Call with specifying the property identifier."
                }
            },
            {
                "label": "IndicatorSetDouble(int prop_id, int prop_modifier, double prop_value)",
                "description": {
                    "ru": "Вызов с указанием  идентификатора и модификатора свойства.",
                    "en": "Call with specifying the property identifier and modifier."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "prop_id  [in]  Идентификатор свойства индикатора. Значение может быть одним из значений перечисления ENUM_CUSTOMIND_PROPERTY_DOUBLE.",
                "prop_modifier  [in]  Модификатор указанного свойства. Только свойства уровней требуют модификатора. Нумерация уровней идет с 0, то есть для задания свойства второму уровню нужно указать единицу (на 1 меньше, чем при использовании директивы компилятора).",
                "prop_value  [in]  Значение свойства."
            ],
            "en": [
                "prop_id  [in]  Identifier of the indicator property. The value can be one of the values of the ENUM_CUSTOMIND_PROPERTY_DOUBLE enumeration.",
                "prop_modifier  [in]  Modifier of the specified property. Only level properties require a modifier. Numbering of levels starts from 0. It means that in order to set property for the second level you need to specify 1 (1 less than when using compiler directive).",
                "prop_value  [in]  Value of property."
            ]
        },
        "description": {
            "ru": "(bool) Задаёт значение соответствующего свойства индикатора. Свойство индикатора должно быть типа double. Существует 2 варианта функции.",
            "en": "(bool) The function sets the value of the corresponding indicator property. Indicator property must be of the double type. There are two variants of the function."
        }
    },
    "IndicatorSetInteger": {
        "group": 2,
        "label": "IndicatorSetInteger",
        "body": "IndicatorSetInteger$0",
        "code": [
            {
                "label": "IndicatorSetInteger(int prop_id, int prop_value)",
                "description": {
                    "ru": "Вызов с указанием идентификатора свойства.",
                    "en": "Call with specifying the property identifier."
                }
            },
            {
                "label": "IndicatorSetInteger(int prop_id, int prop_modifier, int prop_value)",
                "description": {
                    "ru": "Вызов с указанием  идентификатора и модификатора свойства.",
                    "en": "Call with specifying the property identifier and modifier."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "prop_id  [in]  Идентификатор свойства индикатора. Значение может быть одним из значений перечисления ENUM_CUSTOMIND_PROPERTY_INTEGER.",
                "prop_modifier  [in]  Модификатор указанного свойства. Только свойства уровней требуют модификатора.",
                "prop_value  [in]  Значение свойства."
            ],
            "en": [
                "prop_id  [in]  Identifier of the indicator property. The value can be one of the values of the ENUM_CUSTOMIND_PROPERTY_INTEGER enumeration.",
                "prop_modifier  [in]  Modifier of the specified property. Only level properties require a modifier.",
                "prop_value  [in]  Value of property."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства индикатора. Свойство индикатора должно быть типа int или color. Существует 2 варианта функции.",
            "en": "(bool) The function sets the value of the corresponding indicator property. Indicator property must be of the int or color type. There are two variants of the function."
        }
    },
    "IndicatorSetString": {
        "group": 2,
        "label": "IndicatorSetString",
        "body": "IndicatorSetString$0",
        "code": [
            {
                "label": "IndicatorSetString(int prop_id, string prop_value)",
                "description": {
                    "ru": "Вызов с указанием идентификатора свойства.",
                    "en": "Call with specifying the property identifier."
                }
            },
            {
                "label": "IndicatorSetString(int prop_id, int prop_modifier, string prop_value)",
                "description": {
                    "ru": "Вызов с указанием  идентификатора и модификатора свойства.",
                    "en": "Call with specifying the property identifier and modifier."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "prop_id  [in]  Идентификатор свойства индикатора. Значение может быть одним из значений перечисления ENUM_CUSTOMIND_PROPERTY_STRING.",
                "prop_modifier  [in]  Модификатор указанного свойства. Только свойства уровней требуют модификатора.",
                "prop_value  [in]  Значение свойства."
            ],
            "en": [
                "prop_id  [in]  Identifier of the indicator property. The value can be one of the values of the ENUM_CUSTOMIND_PROPERTY_STRING enumeration.",
                "prop_modifier  [in]  Modifier of the specified property. Only level properties require a modifier.",
                "prop_value  [in]  Value of property."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства индикатора. Свойство индикатора должно быть типа string. Существует 2 варианта функции.",
            "en": "(bool) The function sets the value of the corresponding indicator property. Indicator property must be of the string type. There are two variants of the function."
        }
    },
    "IntegerToString": {
        "group": 2,
        "label": "IntegerToString",
        "body": "IntegerToString$0",
        "code": [
            {
                "label": "IntegerToString(long number, int str_len, ushort fill_symbol)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "number  [in]  Число для преобразования.",
                "str_len  [in]  Длина строки. Если длина полученной строки окажется больше указанной, то строка не усекается. Если длина полученной строки окажется меньше, то полученная строка будет дополнена слева символом-заполнителем.",
                "fill_symbol  [in]  Символ-заполнитель. По умолчанию – пробел."
            ],
            "en": [
                "number  [in]  Number for conversion.",
                "str_len  [in]  String length. If the resulting string length is larger than the specified one, the string is not cut off. If it is smaller, filler symbols will be added to the left.",
                "fill_symbol  [in]  Filler symbol. By default it is a space."
            ]
        },
        "description": {
            "ru": "(string) Преобразует значение целого типа в строку указанной длины и возвращает полученную строку.",
            "en": "(string) This function converts value of integer type into a string of a specified length and returns the obtained string."
        }
    },
    "iOBV": {
        "group": 2,
        "label": "iOBV",
        "body": "iOBV$0",
        "code": [
            {
                "label": "iOBV(string symbol, ENUM_TIMEFRAMES period, ENUM_APPLIED_VOLUME applied_volume)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "applied_volume  [in]  Используемый объем. Может быть любой из значений перечисления ENUM_APPLIED_VOLUME."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "applied_volume  [in]  The volume used. Can be any of the ENUM_APPLIED_VOLUME values."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора On Balance Volume. Всего один буфер.",
            "en": "(int) The function returns the handle of the On Balance Volume indicator. It has only one buffer."
        }
    },
    "iOsMA": {
        "group": 2,
        "label": "iOsMA",
        "body": "iOsMA$0",
        "code": [
            {
                "label": "iOsMA(string symbol, ENUM_TIMEFRAMES period, int fast_ema_period, int slow_ema_period, int signal_period, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "fast_ema_period  [in]  Период усреднения для вычисления быстрой скользящей средней.",
                "slow_ema_period  [in]  Период усреднения для вычисления медленной скользящей средней.",
                "signal_period  [in]  Период усреднения для вычисления сигнальной линии.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "fast_ema_period  [in]  Period for Fast Moving Average calculation.",
                "slow_ema_period  [in]  Period for Slow Moving Average calculation.",
                "signal_period  [in]  Averaging period for signal line calculation.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Moving Average of Oscillator. Осциллятор OsMA показывает разницу между значениями MACD и его сигнальной линии. Всего один буфер.",
            "en": "(int) The function returns the handle of the Moving Average of Oscillator indicator. The OsMA oscillator shows the difference between values of MACD and its signal line. It has only one buffer."
        }
    },
    "iRSI": {
        "group": 2,
        "label": "iRSI",
        "body": "iRSI$0",
        "code": [
            {
                "label": "iRSI(string symbol, ENUM_TIMEFRAMES period, int ma_period, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления индекса.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in]  Averaging period for the RSI calculation.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Relative Strength Index. Всего один буфер.",
            "en": "(int) The function returns the handle of the Relative Strength Index indicator. It has only one buffer."
        }
    },
    "iRVI": {
        "group": 2,
        "label": "iRVI",
        "body": "iRVI$0",
        "code": [
            {
                "label": "iRVI(string symbol, ENUM_TIMEFRAMES period, int ma_period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления индекса."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in]  Averaging period for the RVI calculation."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Relative Vigor Index.",
            "en": "(int) The function returns the handle of the Relative Vigor Index indicator."
        }
    },
    "iSAR": {
        "group": 2,
        "label": "iSAR",
        "body": "iSAR$0",
        "code": [
            {
                "label": "iSAR(string symbol, ENUM_TIMEFRAMES period, double step, double maximum)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "step  [in]  Шаг изменения цены, обычно 0.02.",
                "maximum  [in]  Максимальный шаг, обычно 0.2."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "step  [in]  The step of price increment, usually  0.02.",
                "maximum  [in]  The maximum step, usually 0.2."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Parabolic Stop and Reverse system. Всего один буфер.",
            "en": "(int) The function returns the handle of the Parabolic Stop and Reverse system indicator. It has only one buffer."
        }
    },
    "IsStopped": {
        "group": 2,
        "label": "IsStopped",
        "body": "IsStopped($0)",
        "code": [
            {
                "label": "IsStopped()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(bool) Проверяет принудительное завершение работы mql5-программы.",
            "en": "(bool) Checks the forced shutdown of an mql5 program."
        }
    },
    "iStdDev": {
        "group": 2,
        "label": "iStdDev",
        "body": "iStdDev$0",
        "code": [
            {
                "label": "iStdDev(string symbol, ENUM_TIMEFRAMES period, int ma_period, int ma_shift, ENUM_MA_METHOD ma_method, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период усреднения для вычисления индикатора.",
                "ma_shift  [in]  Сдвиг индикатора относительно ценового графика.",
                "ma_method  [in]  Метод усреднения. Может быть любым из значений ENUM_MA_METHOD.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in]  Averaging period for the indicator calculations.",
                "ma_shift  [in]  Shift of the indicator relative to the price chart.",
                "ma_method  [in]  Type of averaging. Can be any of the ENUM_MA_METHOD values.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Standard Deviation. Всего один буфер.",
            "en": "(int) The function returns the handle of the Standard Deviation indicator. It has only one buffer."
        }
    },
    "iStochastic": {
        "group": 2,
        "label": "iStochastic",
        "body": "iStochastic$0",
        "code": [
            {
                "label": "iStochastic(string symbol, ENUM_TIMEFRAMES period, int Kperiod, int Dperiod, int slowing, ENUM_MA_METHOD ma_method, ENUM_STO_PRICE price_field)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "Kperiod  [in]  K-период(количество баров) для вычисления линии %K.",
                "Dperiod  [in]  Период усреднения для вычисления линии %D.",
                "slowing  [in]  Значение замедления.",
                "ma_method  [in]  Метод усреднения. Может быть любым из значений ENUM_MA_METHOD.",
                "price_field  [in]  Параметр выбора цен для расчета. Может быть одной из величин ENUM_STO_PRICE."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "Kperiod  [in]  Averaging period (bars count) for the %K line calculation.",
                "Dperiod  [in]  Averaging period (bars count) for the %D line calculation.",
                "slowing  [in]  Slowing value.",
                "ma_method  [in]  Type of averaging. Can be any of the ENUM_MA_METHOD values.",
                "price_field  [in]  Parameter of price selection for calculations. Can be one of the ENUM_STO_PRICE values."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Stochastic Oscillator.",
            "en": "(int) The function returns the handle of the Stochastic Oscillator indicator."
        }
    },
    "iTEMA": {
        "group": 2,
        "label": "iTEMA",
        "body": "iTEMA$0",
        "code": [
            {
                "label": "iTEMA(string symbol, ENUM_TIMEFRAMES period, int ma_period, int ma_shift, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период(количество баров) для вычисления индикатора.",
                "ma_shift  [in]  Сдвиг индикатора относительно ценового графика.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in]  Averaging period (bars count) for calculation.",
                "ma_shift  [in]  Shift of indicator relative to the price chart.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Triple Exponential Moving Average. Всего один буфер.",
            "en": "(int) The function returns the handle of the Triple Exponential Moving Average indicator. It has only one buffer."
        }
    },
    "iTriX": {
        "group": 2,
        "label": "iTriX",
        "body": "iTriX$0",
        "code": [
            {
                "label": "iTriX(string symbol, ENUM_TIMEFRAMES period, int ma_period, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "ma_period  [in]  Период(количество баров) для вычисления индикатора.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "ma_period  [in]  Averaging period (bars count) for calculations.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Triple Exponential Moving Averages Oscillator. Всего один буфер.",
            "en": "(int) The function returns the handle of the Triple Exponential Moving Averages Oscillator indicator. It has only one buffer."
        }
    },
    "iVIDyA": {
        "group": 2,
        "label": "iVIDyA",
        "body": "iVIDyA$0",
        "code": [
            {
                "label": "iVIDyA(string symbol, ENUM_TIMEFRAMES period, int cmo_period, int ema_period, int ma_shift, ENUM_APPLIED_PRICE applied_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "cmo_period  [in]  Период(количество баров) для вычисления Chande Momentum Oscillator.",
                "ema_period  [in]  Период(количество баров) EMA для вычисления фактора сглаживания.",
                "ma_shift  [in]  Сдвиг индикатора относительно ценового графика.",
                "applied_price  [in]  Используемая цена. Может быть любой из ценовых констант ENUM_APPLIED_PRICE или хендлом другого индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "cmo_period  [in]  Period (bars count) for the Chande Momentum Oscillator calculation.",
                "ema_period  [in]   EMA period (bars count) for smoothing factor calculation.",
                "ma_shift  [in]  Shift of the indicator relative to the price chart.",
                "applied_price  [in]  The price used. Can be any of the price constants ENUM_APPLIED_PRICE or a handle of another indicator."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Variable Index Dynamic Average. Всего один буфер.",
            "en": "(int) The function returns the handle of the Variable Index Dynamic Average indicator. It has only one buffer."
        }
    },
    "iVolumes": {
        "group": 2,
        "label": "iVolumes",
        "body": "iVolumes$0",
        "code": [
            {
                "label": "iVolumes(string symbol, ENUM_TIMEFRAMES period, ENUM_APPLIED_VOLUME applied_volume)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "applied_volume  [in]  Используемый объем. Может быть любой из значений перечисления ENUM_APPLIED_VOLUME."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "applied_volume  [in]   The volume used. Can be any of the ENUM_APPLIED_VOLUME values."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора, отображающего объемы . Всего один буфер.",
            "en": "(int) The function returns the handle of the Volumes indicator.  It has an only one buffer."
        }
    },
    "iWPR": {
        "group": 2,
        "label": "iWPR",
        "body": "iWPR$0",
        "code": [
            {
                "label": "iWPR(string symbol, ENUM_TIMEFRAMES period, int calc_period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Символьное имя инструмента, на данных которого будет вычисляться индикатор. NULL означает текущий символ.",
                "period  [in]  Значение периода может быть одним из значений перечисления ENUM_TIMEFRAMES, 0 означает текущий таймфрейм.",
                "calc_period  [in]  Период(количество баров) для вычисления индикатора."
            ],
            "en": [
                "symbol  [in] The symbol name of the security, the data of which should be used to calculate the indicator. The NULL value means the current symbol.",
                "period  [in] The value of the period can be one of the ENUM_TIMEFRAMES values, 0 means the current timeframe.",
                "calc_period  [in]  Period (bars count) for the indicator calculation."
            ]
        },
        "description": {
            "ru": "(int) Возвращает хэндл индикатора Larry Williams' Percent Range. Всего один буфер.",
            "en": "(int) The function returns the handle of the Larry Williams' Percent Range indicator. It has only one buffer."
        }
    },
    "log": {
        "group": 2,
        "label": "log",
        "body": "log$0",
        "code": [
            {
                "label": "log(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "val  [in]  Значение, логарифм которого должен быть вычислен."
            ],
            "en": [
                "val  [in]  Value logarithm of which is to be found."
            ]
        },
        "description": {
            "ru": "(double) Возвращает натуральный логарифм.",
            "en": "(double) The function returns a natural logarithm."
        }
    },
    "log10": {
        "group": 2,
        "label": "log10",
        "body": "log10$0",
        "code": [
            {
                "label": "log10(double val)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "val  [in]  Значение, десятичный логарифм которого должен быть вычислен."
            ],
            "en": [
                "val  [in]  Numeric value the common logarithm of which is to be calculated."
            ]
        },
        "description": {
            "ru": "(double) Возвращает логарифм числа по основанию 10.",
            "en": "(double) Returns the logarithm of a number by base 10."
        }
    },
    "MarketBookAdd": {
        "group": 2,
        "label": "MarketBookAdd",
        "body": "MarketBookAdd$0",
        "code": [
            {
                "label": "MarketBookAdd(string symbol)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя символа, чей стакан цен предполагается использовать в данном эксперте или скрипте."
            ],
            "en": [
                "symbol  [in] The name of a symbol, whose Depth of Market is to be used in the Expert Advisor or script."
            ]
        },
        "description": {
            "ru": "(bool) Обеспечивает открытие стакана цен по указанному инструменту, а также производит подписку на получение извещений об изменении указанного стакана.",
            "en": "(bool) Provides opening of Depth of Market for a selected symbol, and subscribes for receiving notifications of the DOM changes."
        }
    },
    "MarketBookGet": {
        "group": 2,
        "label": "MarketBookGet",
        "body": "MarketBookGet$0",
        "code": [
            {
                "label": "MarketBookGet(string symbol, MqlBookInfo& book[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя символа.",
                "book[]  [out]  Ссылка на массив записей стакана цен. Массив может быть заранее распределен для достаточного количества записей. Если динамический массив не был заранее распределен в оперативной памяти, то клиентский терминал сам распределит этот массив."
            ],
            "en": [
                "symbol  [in] Symbol name.",
                "book[]  [in] Reference to an array of Depth of Market records. The array can be pre-allocated for a sufficient number of records. If a dynamic array hasn't been pre-allocated in the operating memory, the client terminal will distribute the array itself."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает массив структур MqlBookInfo, содержащий записи стакана цен указанного символа.",
            "en": "(bool) Returns a structure array MqlBookInfo containing records of the Depth of Market of a specified symbol."
        }
    },
    "MarketBookRelease": {
        "group": 2,
        "label": "MarketBookRelease",
        "body": "MarketBookRelease$0",
        "code": [
            {
                "label": "MarketBookRelease(string symbol)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя символа."
            ],
            "en": [
                "symbol  [in] Symbol name."
            ]
        },
        "description": {
            "ru": "(bool) Обеспечивает закрытие стакана цен по указанному инструменту, а также отменяет подписку на получение извещений об изменении указанного стакана.",
            "en": "(bool) Provides closing of Depth of Market for a selected symbol, and cancels the subscription for receiving notifications of the DOM changes."
        }
    },
    "MathAbs": {
        "group": 2,
        "label": "MathAbs",
        "body": "MathAbs$0",
        "code": [
            {
                "label": "MathAbs(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Числовая величина."
            ],
            "en": [
                "value  [in]  Numeric value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает абсолютное значение (значение по модулю) переданного ей числа.",
            "en": "(double) The function returns the absolute value (modulus) of the specified numeric value."
        }
    },
    "MathArccos": {
        "group": 2,
        "label": "MathArccos",
        "body": "MathArccos$0",
        "code": [
            {
                "label": "MathArccos(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Значение value между -1 и 1, арккосинус которого должен быть вычислен."
            ],
            "en": [
                "val  [in]  The val value between -1 and 1, the arc cosine of which is to be calculated."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение арккосинуса x в диапазоне 0 к π в радианах.",
            "en": "(double) The function returns the arccosine of x within the range 0 to π in radians."
        }
    },
    "MathArcsin": {
        "group": 2,
        "label": "MathArcsin",
        "body": "MathArcsin$0",
        "code": [
            {
                "label": "MathArcsin(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]   Значение value между -1 и 1, арксинус которого должен быть вычислен."
            ],
            "en": [
                "val  [in]   The val value between -1 and 1, the arc sine of which is to be calculated."
            ]
        },
        "description": {
            "ru": "(double) Возвращает арксинус x в диапазоне от -π/2 до π/2 радианов.",
            "en": "(double) The function returns the arc sine of x within the range of -π/2 to π/2 radians."
        }
    },
    "MathArctan": {
        "group": 2,
        "label": "MathArctan",
        "body": "MathArctan$0",
        "code": [
            {
                "label": "MathArctan(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Число, представляющее тангенс."
            ],
            "en": [
                "value  [in]  A number representing a tangent."
            ]
        },
        "description": {
            "ru": "(double) Возвращает арктангенс x. Если x равен 0, функция возвращает 0.",
            "en": "(double) The function returns the arc tangent of x. If x is equal to 0, the function returns 0."
        }
    },
    "MathCeil": {
        "group": 2,
        "label": "MathCeil",
        "body": "MathCeil$0",
        "code": [
            {
                "label": "MathCeil(double val)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "val  [in]  Числовая величина."
            ],
            "en": [
                "val  [in]  Numeric value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает ближайшее сверху целое числовое значение.",
            "en": "(double) The function returns integer numeric value closest from above."
        }
    },
    "MathCos": {
        "group": 2,
        "label": "MathCos",
        "body": "MathCos$0",
        "code": [
            {
                "label": "MathCos(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Угол в радианах."
            ],
            "en": [
                "value  [in]  Angle in radians."
            ]
        },
        "description": {
            "ru": "(double) Функция возвращает косинус угла.",
            "en": "(double) The function returns the cosine of an angle."
        }
    },
    "MathExp": {
        "group": 2,
        "label": "MathExp",
        "body": "MathExp$0",
        "code": [
            {
                "label": "MathExp(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Число, определяющее степень."
            ],
            "en": [
                "value  [in]  A number specifying the power."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение числа e в степени d.",
            "en": "(double) The function returns the value of e raised to the power of d."
        }
    },
    "MathFloor": {
        "group": 2,
        "label": "MathFloor",
        "body": "MathFloor$0",
        "code": [
            {
                "label": "MathFloor(double val)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "val  [in]  Числовое значение."
            ],
            "en": [
                "val  [in]  Numeric value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает ближайшее снизу целое числовое значение.",
            "en": "(double) The function returns integer numeric value closest from below."
        }
    },
    "MathIsValidNumber": {
        "group": 2,
        "label": "MathIsValidNumber",
        "body": "MathIsValidNumber$0",
        "code": [
            {
                "label": "MathIsValidNumber(double number)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "number  [in]  Проверяемое число."
            ],
            "en": [
                "number  [in]  Checked numeric value."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет корректность действительного числа",
            "en": "(bool) It checks the correctness of a real number."
        }
    },
    "MathLog": {
        "group": 2,
        "label": "MathLog",
        "body": "MathLog$0",
        "code": [
            {
                "label": "MathLog(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "val  [in]  Значение, логарифм которого должен быть вычислен."
            ],
            "en": [
                "val  [in]  Value logarithm of which is to be found."
            ]
        },
        "description": {
            "ru": "(double) Возвращает натуральный логарифм.",
            "en": "(double) The function returns a natural logarithm."
        }
    },
    "MathLog10": {
        "group": 2,
        "label": "MathLog10",
        "body": "MathLog10$0",
        "code": [
            {
                "label": "MathLog10(double val)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "val  [in]  Значение, десятичный логарифм которого должен быть вычислен."
            ],
            "en": [
                "val  [in]  Numeric value the common logarithm of which is to be calculated."
            ]
        },
        "description": {
            "ru": "(double) Возвращает логарифм числа по основанию 10.",
            "en": "(double) Returns the logarithm of a number by base 10."
        }
    },
    "MathMax": {
        "group": 2,
        "label": "MathMax",
        "body": "MathMax$0",
        "code": [
            {
                "label": "MathMax(double value1, double value2)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value1  [in]  Первое числовое значение.",
                "value2  [in]  Второе числовое значение."
            ],
            "en": [
                "value1  [in]  First numeric value.",
                "value2  [in]  Second numeric value."
            ]
        },
        "description": {
            "ru": "(double) Функция возвращает максимальное из двух числовых значений.",
            "en": "(double) The function returns the maximal value of two values."
        }
    },
    "MathMin": {
        "group": 2,
        "label": "MathMin",
        "body": "MathMin$0",
        "code": [
            {
                "label": "MathMin(double value1, double value2)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value1  [in]  Первое числовое значение.",
                "value2  [in]  Второе числовое значение."
            ],
            "en": [
                "value1  [in]  First numeric value.",
                "value2  [in]  Second numeric value."
            ]
        },
        "description": {
            "ru": "(double) Функция возвращает минимальное из двух числовых значений.",
            "en": "(double) The function returns the minimal value of two values."
        }
    },
    "MathMod": {
        "group": 2,
        "label": "MathMod",
        "body": "MathMod$0",
        "code": [
            {
                "label": "MathMod(double value, double value2)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Значение делимого.",
                "value2  [in]  Значение делителя."
            ],
            "en": [
                "value  [in]  Dividend value.",
                "value2  [in]  Divisor value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает вещественный остаток от деления двух чисел.",
            "en": "(double) The function returns the real remainder of division of two numbers."
        }
    },
    "MathPow": {
        "group": 2,
        "label": "MathPow",
        "body": "MathPow$0",
        "code": [
            {
                "label": "MathPow(double base, double exponent)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "base  [in]  Основание.",
                "exponent  [in]  Значение степени."
            ],
            "en": [
                "base  [in]  Base.",
                "exponent  [in]  Exponent value."
            ]
        },
        "description": {
            "ru": "(double) Возводит основание в указанную степень.",
            "en": "(double) The function raises a base to a specified power."
        }
    },
    "MathRand": {
        "group": 2,
        "label": "MathRand",
        "body": "MathRand($0)",
        "code": [
            {
                "label": "MathRand()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает псевдослучайное целое число в диапазоне от 0 до 32767.",
            "en": "(int) Returns a pseudorandom integer within the range of 0 to 32767."
        }
    },
    "MathRound": {
        "group": 2,
        "label": "MathRound",
        "body": "MathRound$0",
        "code": [
            {
                "label": "MathRound(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Числовая величина для округления."
            ],
            "en": [
                "value  [in]  Numeric value before rounding."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение, округленное до ближайшего целого числа указанного числового значения.",
            "en": "(double) The function returns a value rounded off to the nearest integer of the specified numeric value."
        }
    },
    "MathSin": {
        "group": 2,
        "label": "MathSin",
        "body": "MathSin$0",
        "code": [
            {
                "label": "MathSin(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Угол в радианах."
            ],
            "en": [
                "value  [in]  Angle in radians."
            ]
        },
        "description": {
            "ru": "(double) Возвращает синус указанного угла.",
            "en": "(double) Returns the sine of a specified angle."
        }
    },
    "MathSqrt": {
        "group": 2,
        "label": "MathSqrt",
        "body": "MathSqrt$0",
        "code": [
            {
                "label": "MathSqrt(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Положительная числовая величина."
            ],
            "en": [
                "value  [in]  Positive numeric value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает квадратный корень числа.",
            "en": "(double) Returns the square root of a number."
        }
    },
    "MathSrand": {
        "group": 2,
        "label": "MathSrand",
        "body": "MathSrand$0",
        "code": [
            {
                "label": "MathSrand(int seed)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "seed  [in]  Начальное число для ряда случайных чисел."
            ],
            "en": [
                "seed  [in]  Starting number for the sequence of random numbers."
            ]
        },
        "description": {
            "ru": "(void) Устанавливает начальное состояние для генерации ряда псевдослучайных целых чисел.",
            "en": "(void) Sets the starting point for generating a series of pseudorandom integers."
        }
    },
    "MathTan": {
        "group": 2,
        "label": "MathTan",
        "body": "MathTan$0",
        "code": [
            {
                "label": "MathTan(double rad)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "rad  [in]  Угол в радианах."
            ],
            "en": [
                "rad  [in]  Angle in radians."
            ]
        },
        "description": {
            "ru": "(double) Возвращает тангенс числа.",
            "en": "(double) The function returns a tangent of a number."
        }
    },
    "MessageBox": {
        "group": 2,
        "label": "MessageBox",
        "body": "MessageBox$0",
        "code": [
            {
                "label": "MessageBox(string text, string caption, int flags)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "text  [in]  Текст, содержащий сообщение для отображения.",
                "caption  [in]  Необязательный текст для отображения в заголовке окна сообщения. Если этот параметр пустой, в заголовке окна будет отображено название эксперта.",
                "flags  [in]  Необязательные флаги, определяющие вид и поведение диалогового окна. Флаги могут быть комбинацией специальной группы флагов ."
            ],
            "en": [
                "text  [in]  Text, containing message to output.",
                "caption  [in]  Optional text to be displayed in the box header. If the parameter is empty, Expert Advisor name is shown in the box header.",
                "flags  [in]  Optional flags defining appearance and behavior of a message box. Flags can be a combination of a special group of flags."
            ]
        },
        "description": {
            "ru": "(int) Создает и отображает окно сообщений, а также управляет им. Окно сообщений содержит сообщение и заголовок, любую комбинацию предопределенных значков и командных кнопок.",
            "en": "(int) It creates and shows a message box and manages it. A message box contains a message and header, any combination of predefined signs and command buttons."
        }
    },
    "MQLInfoInteger": {
        "group": 2,
        "label": "MQLInfoInteger",
        "body": "MQLInfoInteger$0",
        "code": [
            {
                "label": "MQLInfoInteger(int property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства. Может быть одним из значений перечисления ENUM_MQL_INFO_INTEGER."
            ],
            "en": [
                "property_id  [in] Identifier of a property. Can be one of values of the ENUM_MQL_INFO_INTEGER enumeration."
            ]
        },
        "description": {
            "ru": "(int) Возвращает значение соответствующего свойства запущенной MQL5-программы.",
            "en": "(int) Returns the value of a corresponding property of a running mql5 program."
        }
    },
    "MQLInfoString": {
        "group": 2,
        "label": "MQLInfoString",
        "body": "MQLInfoString$0",
        "code": [
            {
                "label": "MQLInfoString(int property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства. Может быть одним из значений перечисления ENUM_MQL_INFO_STRING."
            ],
            "en": [
                "property_id  [in] Identifier of a property. Can be one of the ENUM_MQL_INFO_STRING enumeration."
            ]
        },
        "description": {
            "ru": "(string) Возвращает значение соответствующего свойства запущенной MQL5-программы.",
            "en": "(string) Returns the value of a corresponding property of a running mql5 program."
        }
    },
    "NormalizeDouble": {
        "group": 2,
        "label": "NormalizeDouble",
        "body": "NormalizeDouble$0",
        "code": [
            {
                "label": "NormalizeDouble(double value, int digits)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in] Величина с плавающей точкой.",
                "digits  [in]  Формат точности, число цифр после десятичной точки (0-8)."
            ],
            "en": [
                "value  [in] Value with a floating point.",
                "digits  [in]  Accuracy format, number of digits after point (0-8)."
            ]
        },
        "description": {
            "ru": "(double) Округление числа с плавающей точкой до указанной точности.",
            "en": "(double) Rounding floating point number to a specified accuracy."
        }
    },
    "ObjectCreate": {
        "group": 2,
        "label": "ObjectCreate",
        "body": "ObjectCreate$0",
        "code": [
            {
                "label": "ObjectCreate(long chart_id, string name, ENUM_OBJECT type, int sub_window, datetime time1, double price1, coordinate time_price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 7,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта. Имя должно быть уникальным в пределах одного графика, включая его подокна.",
                "type  [in]  Тип объекта. Значение может быть одним из значений перечисления ENUM_OBJECT.",
                "sub_window  [in]  Номер подокна графика. 0 означает главное окно графика. Указанное подокно должно существовать, в противном случае функция возвращает false.",
                "time1  [in]  ВременнАя координата первой привязки.",
                "price1  [in]  Ценовая координата первой точки привязки.",
                "time_price  [in]  Координаты временнОй и ценовой точки привязки, разделенные запятыми."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object. The name must be unique within a chart, including its subwindows.",
                "type  [in]  Object type. The value can be one of the values of the ENUM_OBJECT enumeration.",
                "sub_window  [in]  Number of the chart subwindow. 0 means the main chart window. The specified subwindow must exist, otherwise the function returns false.",
                "time1  [in]  The time coordinate of the first anchor.",
                "price1  [in]  The price coordinate of the first anchor point.",
                "time_price  [in]  The coordinates of the time and price anchor point, separated by commas."
            ]
        },
        "description": {
            "ru": "(bool) Создает объект с указанным именем, типом и начальными координатами в указанном подокне графика. При создании можно указать до 30 координат.",
            "en": "(bool) The function creates an object with the specified name, type, and the initial coordinates in the specified chart subwindow. During creation up to 30 coordinates can be specified."
        }
    },
    "ObjectDelete": {
        "group": 2,
        "label": "ObjectDelete",
        "body": "ObjectDelete$0",
        "code": [
            {
                "label": "ObjectDelete(long chart_id, string name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя удаляемого объекта."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of object to be deleted."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет объект с указанным именем с указанного графика.",
            "en": "(bool) The function removes the object with the specified name from the specified chart."
        }
    },
    "ObjectFind": {
        "group": 2,
        "label": "ObjectFind",
        "body": "ObjectFind$0",
        "code": [
            {
                "label": "ObjectFind(long chart_id, string name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя искомого объекта."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  The name of the searched object."
            ]
        },
        "description": {
            "ru": "(int) Ищет объект с указанным именем на графике с указанным идентификатором.",
            "en": "(int) The function searches for an object with the specified name in the chart with the specified ID."
        }
    },
    "ObjectGetDouble": {
        "group": 2,
        "label": "ObjectGetDouble",
        "body": "ObjectGetDouble$0",
        "code": [
            {
                "label": "ObjectGetDouble(long chart_id, string name, ENUM_OBJECT_PROPERTY_DOUBLE prop_id, int prop_modifier)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "ObjectGetDouble(long chart_id, string name, ENUM_OBJECT_PROPERTY_DOUBLE prop_id, int prop_modifier, double& double_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function.If successful, the property value is placed to a receiving variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта.",
                "prop_id  [in]  Идентификатор свойства объекта. Значение может быть одним из значений перечисления ENUM_OBJECT_PROPERTY_DOUBLE.",
                "prop_modifier  [in]  Модификатор указанного свойства. Для первого варианта по умолчанию значение модификатора равно 0. Большинство свойств не требуют модификатора. Означает номер уровня в инструментах Фибоначчи и в графическом объекте Вилы Эндрюса. Нумерация уровней начинается с нуля.",
                "double_var  [out]  Переменная типа double, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object.",
                "prop_id  [in]  ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_DOUBLE enumeration.",
                "prop_modifier  [in]  Modifier of the specified property. For the first variant, the default modifier value is equal to 0. Most properties do not require a modifier.  It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.",
                "double_var  [out]  Variable of the double type that received the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает значение соответствующего свойства объекта. Свойство объекта должно быть типа double.  Существует 2 варианта функции.",
            "en": "(bool) The function returns the value of the corresponding object property. The object property must be of the double type. There are 2 variants of the function."
        }
    },
    "ObjectGetInteger": {
        "group": 2,
        "label": "ObjectGetInteger",
        "body": "ObjectGetInteger$0",
        "code": [
            {
                "label": "ObjectGetInteger(long chart_id, string name, ENUM_OBJECT_PROPERTY_INTEGER prop_id, int prop_modifier)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "ObjectGetInteger(long chart_id, string name, ENUM_OBJECT_PROPERTY_INTEGER prop_id, int prop_modifier, long& long_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function.If successful, the property value is placed to a receiving variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта.",
                "prop_id  [in]  Идентификатор свойства объекта. Значение может быть одним из значений перечисления ENUM_OBJECT_PROPERTY_INTEGER.",
                "prop_modifier  [in]  Модификатор указанного свойства. Для первого варианта по умолчанию значение модификатора равно 0. Большинство свойств не требуют модификатора. Означает номер уровня в инструментах Фибоначчи и в графическом объекте Вилы Эндрюса. Нумерация уровней начинается с нуля.",
                "long_var  [out]  Переменная типа long, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object.",
                "prop_id  [in]  ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_INTEGER enumeration.",
                "prop_modifier  [in]  Modifier of the specified property. For the first variant, the default modifier value is equal to 0. Most properties do not require a modifier.  It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.",
                "long_var  [out]  Variable of the long type that receives the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает значение соответствующего свойства объекта. Свойство объекта должно быть типов datetime, int, color, bool или char. Существует 2 варианта функции.",
            "en": "(bool) The function returns the value of the corresponding object property. The object property must be of the datetime, int, color, bool or char type. There are 2 variants of the function."
        }
    },
    "ObjectGetString": {
        "group": 2,
        "label": "ObjectGetString",
        "body": "ObjectGetString$0",
        "code": [
            {
                "label": "ObjectGetString(long chart_id, string name, ENUM_OBJECT_PROPERTY_STRING prop_id, int prop_modifier)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "ObjectGetString(long chart_id, string name, ENUM_OBJECT_PROPERTY_STRING prop_id, int prop_modifier, string& string_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function.If successful, the property value is placed to a receiving variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта.",
                "prop_id  [in]  Идентификатор свойства объекта. Значение может быть одним из значений перечисления ENUM_OBJECT_PROPERTY_STRING.",
                "prop_modifier  [in]  Модификатор указанного свойства. Для первого варианта по умолчанию значение модификатора равно 0. Большинство свойств не требуют модификатора. Означает номер уровня в инструментах Фибоначчи и в графическом объекте Вилы Эндрюса. Нумерация уровней начинается с нуля.",
                "string_var  [out]  Переменная типа string, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object.",
                "prop_id  [in]  ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_STRING enumeration.",
                "prop_modifier  [in]  Modifier of the specified property. For the first variant, the default modifier value is equal to 0. Most properties do not require a modifier.  It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.",
                "string_var  [out]  Variable of the string type that receives the value of the requested properties."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает значение соответствующего свойства объекта. Свойство объекта должно быть типа string. Существует 2 варианта функции.",
            "en": "(bool) The function returns the value of the corresponding object property. The object property must be of the string type. There are 2 variants of the function."
        }
    },
    "ObjectGetTimeByValue": {
        "group": 2,
        "label": "ObjectGetTimeByValue",
        "body": "ObjectGetTimeByValue$0",
        "code": [
            {
                "label": "ObjectGetTimeByValue(long chart_id, string name, double value, int line_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта.",
                "value  [in]  Значение цены.",
                "line_id  [in]  Идентификатор линии."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object.",
                "value  [in]  Price value.",
                "line_id  [in]  Line identifier."
            ]
        },
        "description": {
            "ru": "(datetime) Возвращает значение времени для указанного значения цены указанного объекта.",
            "en": "(datetime) The function returns the time value for the specified price value of the specified object."
        }
    },
    "ObjectGetValueByTime": {
        "group": 2,
        "label": "ObjectGetValueByTime",
        "body": "ObjectGetValueByTime$0",
        "code": [
            {
                "label": "ObjectGetValueByTime(long chart_id, string name, datetime time, int line_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта.",
                "time  [in]  Значение времени.",
                "line_id  [in]  Идентификатор линии."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object.",
                "time  [in]  Time value.",
                "line_id  [in]  Line ID."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение цены для указанного времени указанного объекта.",
            "en": "(double) The function returns the price value for the specified time value of the specified object."
        }
    },
    "ObjectMove": {
        "group": 2,
        "label": "ObjectMove",
        "body": "ObjectMove$0",
        "code": [
            {
                "label": "ObjectMove(long chart_id, string name, int point_index, datetime time, double price)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта.",
                "point_index  [in]  Номер точки привязки. Количество точек привязки зависит от типа объекта.",
                "time  [in]  ВременнАя координата указанной точки привязки.",
                "price  [in]  Ценовая координата указанной точки привязки."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object.",
                "point_index  [in]  Index of the anchor point. The number of anchor points depends on the type of object.",
                "time  [in]  Time coordinate of the selected anchor point.",
                "price  [in]  Price coordinate of the selected anchor point."
            ]
        },
        "description": {
            "ru": "(bool) Изменяет координаты указанной точки привязки объекта.",
            "en": "(bool) The function changes coordinates of the specified anchor point of the object."
        }
    },
    "ObjectName": {
        "group": 2,
        "label": "ObjectName",
        "body": "ObjectName$0",
        "code": [
            {
                "label": "ObjectName(long chart_id, int pos, int sub_window, int type)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "pos  [in]  Порядковый номер объекта согласно указанного фильтра по номеру подокна и типу.",
                "sub_window  [in]  Номер подокна графика. 0 означает главное окно графика, -1 означает все подокна графика, включая главное окно.",
                "type  [in]  Тип объекта. Значение может быть одним из значений перечисления ENUM_OBJECT. -1 означает все типы."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "pos  [in]  Ordinal number of the object according to the specified filter by the number and type of the subwindow.",
                "sub_window  [in]  Number of the chart subwindow. 0 means the main chart window, -1 means all the subwindows of the chart, including the main window.",
                "type  [in]  Type of the object. The value can be one of the values of the ENUM_OBJECT enumeration. -1 means all types."
            ]
        },
        "description": {
            "ru": "(string) Возвращает имя соответствующего объекта в указанном чарте, указанном подокне указанного чарта, указанного типа.",
            "en": "(string) The function returns the name of the corresponding object in the specified chart, in the specified subwindow, of the specified type."
        }
    },
    "ObjectsDeleteAll": {
        "group": 2,
        "label": "ObjectsDeleteAll",
        "body": "ObjectsDeleteAll$0",
        "code": [
            {
                "label": "ObjectsDeleteAll(long chart_id, int sub_window, int type)",
                "description": {
                    "ru": "Удаляет все объекты в указанном графике, указанном подокне указанного графика, указанного типа. Существует два варианта функции:",
                    "en": "Removes all objects from the specified chart, specified chart subwindow, of the specified type."
                }
            },
            {
                "label": "ObjectsDeleteAll(long chart_id, const string prefix, int sub_window, int object_type)",
                "description": {
                    "ru": "Удаляет по префиксу имени в подокне графика все объекты указанного типа.",
                    "en": "Removes all objects of the specified type using prefix in object names."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "prefix  [in]  Префикс, по которому будут удалены все объекты, чьи имена начинаются с данного набора символов. Префикс можно указывать как 'name' или 'name*' – оба варианта работают одинаково. Если в качестве префикса указана пустая строка, то будут удалены объекты с любым именем.",
                "sub_window  [in]  Номер подокна графика. 0 означает главное окно графика, -1 означает все подокна графика, включая главное окно.",
                "type  [in]  Тип объекта. Значение может быть одним из значений перечисления ENUM_OBJECT. -1 означает все типы."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "prefix  [in]  Prefix in object names. All objects whose names start with this set of characters will be removed from chart. You can specify prefix as 'name' or 'name*' – both variants will work the same. If an empty string is specified as the prefix, objects with all possible names will be removed.",
                "sub_window  [in] Number of the chart subwindow. 0 means the main chart window, -1 means all the subwindows of the chart, including the main window.",
                "type  [in]  Type of the object. The value can be one of the values of the ENUM_OBJECT enumeration. -1 means all types."
            ]
        },
        "description": {
            "ru": "(int) Удаляет все объекты в указанном графике, указанном подокне указанного графика, указанного типа. Существует два варианта функции:",
            "en": "(int) Removes all objects from the specified chart, specified chart subwindow, of the specified type."
        }
    },
    "ObjectSetDouble": {
        "group": 2,
        "label": "ObjectSetDouble",
        "body": "ObjectSetDouble$0",
        "code": [
            {
                "label": "ObjectSetDouble(long chart_id, string name, ENUM_OBJECT_PROPERTY_DOUBLE prop_id, double prop_value)",
                "description": {
                    "ru": "Установка значения свойства, не имеющего модификатора",
                    "en": "Setting property value, without modifier"
                }
            },
            {
                "label": "ObjectSetDouble(long chart_id, string name, ENUM_OBJECT_PROPERTY_DOUBLE prop_id, int prop_modifier, double prop_value)",
                "description": {
                    "ru": "Установка значения свойства с указанием модификатора",
                    "en": "Setting a property value indicating the modifier"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта.",
                "prop_id  [in]  Идентификатор свойства объекта. Значение может быть одним из значений перечисления ENUM_OBJECT_PROPERTY_DOUBLE.",
                "prop_modifier  [in]  Модификатор указанного свойства. Означает номер уровня в инструментах Фибоначчи и в графическом объекте Вилы Эндрюса. Нумерация уровней начинается с нуля.",
                "prop_value  [in]  Значение свойства."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object.",
                "prop_id  [in]  ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_DOUBLE enumeration.",
                "prop_modifier  [in]  Modifier of the specified property. It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.",
                "prop_value  [in]  The value of the property."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства объекта. Свойство объекта должно быть типа double. Существует 2 варианта функции.",
            "en": "(bool) The function sets the value of the corresponding object property. The object property must be of the double type. There are 2 variants of the function."
        }
    },
    "ObjectSetInteger": {
        "group": 2,
        "label": "ObjectSetInteger",
        "body": "ObjectSetInteger$0",
        "code": [
            {
                "label": "ObjectSetInteger(long chart_id, string name, ENUM_OBJECT_PROPERTY_INTEGER prop_id, long prop_value)",
                "description": {
                    "ru": "Установка значения свойства, не имеющего модификатора",
                    "en": "Setting property value, without modifier"
                }
            },
            {
                "label": "ObjectSetInteger(long chart_id, string name, ENUM_OBJECT_PROPERTY_INTEGER prop_id, int prop_modifier, long prop_value)",
                "description": {
                    "ru": "Установка значения свойства с указанием модификатора",
                    "en": "Setting a property value indicating the modifier"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта.",
                "prop_id  [in]  Идентификатор свойства объекта. Значение может быть одним из значений перечисления ENUM_OBJECT_PROPERTY_INTEGER.",
                "prop_modifier  [in]  Модификатор указанного свойства. Означает номер уровня в инструментах Фибоначчи и в графическом объекте Вилы Эндрюса. Нумерация уровней начинается с нуля.",
                "prop_value  [in]  Значение свойства."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object.",
                "prop_id  [in]  ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_INTEGER enumeration.",
                "prop_modifier  [in]  Modifier of the specified property.  It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.",
                "prop_value  [in]  The value of the property."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства объекта. Свойство объекта должно быть типов datetime, int, color, bool или char. Существует 2 варианта функции.",
            "en": "(bool) The function sets the value of the corresponding object property. The object property must be of the datetime, int, color, bool or char type. There are 2 variants of the function."
        }
    },
    "ObjectSetString": {
        "group": 2,
        "label": "ObjectSetString",
        "body": "ObjectSetString$0",
        "code": [
            {
                "label": "ObjectSetString(long chart_id, string name, ENUM_OBJECT_PROPERTY_STRING prop_id, string prop_value)",
                "description": {
                    "ru": "Установка значения свойства, не имеющего модификатора",
                    "en": "Setting property value, without modifier"
                }
            },
            {
                "label": "ObjectSetString(long chart_id, string name, ENUM_OBJECT_PROPERTY_STRING prop_id, int prop_modifier, string prop_value)",
                "description": {
                    "ru": "Установка значения свойства с указанием модификатора",
                    "en": "Setting a property value indicating the modifier"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "name  [in]  Имя объекта.",
                "prop_id  [in]  Идентификатор свойства объекта. Значение может быть одним из значений перечисления ENUM_OBJECT_PROPERTY_STRING.",
                "prop_modifier  [in]  Модификатор указанного свойства. Означает номер уровня в инструментах Фибоначчи и в графическом объекте Вилы Эндрюса. Нумерация уровней начинается с нуля.",
                "prop_value  [in]  Значение свойства."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "name  [in]  Name of the object.",
                "prop_id  [in]  ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_STRING enumeration.",
                "prop_modifier  [in]  Modifier of the specified property.  It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.",
                "prop_value  [in]  The value of the property."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства объекта. Свойство объекта должно быть типа string. Существует 2 варианта функции.",
            "en": "(bool) The function sets the value of the corresponding object property. The object property must be of the string type. There are 2 variants of the function."
        }
    },
    "ObjectsTotal": {
        "group": 2,
        "label": "ObjectsTotal",
        "body": "ObjectsTotal$0",
        "code": [
            {
                "label": "ObjectsTotal(long chart_id, int sub_window, int type)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "chart_id  [in]  Идентификатор графика. 0 означает текущий график.",
                "nwin  [in]  Номер подокна графика. 0 означает главное окно графика, -1 означает все подокна графика, включая главное окно.",
                "type  [in]  Тип объекта. Значение может быть одним из значений перечисления ENUM_OBJECT. -1 означает все типы."
            ],
            "en": [
                "chart_id  [in]  Chart identifier. 0 means the current chart.",
                "sub_window  [in]  Number of the chart subwindow. 0 means the main chart window, -1 means all the subwindows of the chart, including the main window.",
                "type  [in]  Type of the object. The value can be one of the values of the ENUM_OBJECT enumeration. -1 means all types."
            ]
        },
        "description": {
            "ru": "(int) Возвращает количество объектов в указанном чарте, указанном подокне указанного чарта, указанного типа.",
            "en": "(int) The function returns the number of objects in the specified chart, specified subwindow, of the specified type."
        }
    },
    "OnStart": {
        "group": 2,
        "label": "OnStart",
        "body": "OnStart$0",
        "code": [
            {
                "label": "int OnStart(void)",
                "description": {
                    "ru": "Версия с возвратом результата",
                    "en": "The version that returns the result"
                }
            },
            {
                "label": "void OnStart(void)",
                "description": {
                    "ru": "Версия без возврата результата оставлена только для совместимости со старыми кодами.",
                    "en": "The version without a result return is left only for compatibility with old codes. It is not recommended for use."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int_void) Вызывается в скриптах и сервисах при наступлении события Start. Функция предназначена для однократного выполнения действий, заложенных в программу. Существуют два варианта функции.",
            "en": "(int) The function is called in scripts and services when the Start event occurs. The function is intended for one-time execution of actions implemented in a program. There are two function types."
        }
    },
    "OnInit": {
        "group": 2,
        "label": "OnInit",
        "body": "OnInit$0",
        "code": [
            {
                "label": "int OnInit(void)",
                "description": {
                    "ru": "Версия с возвратом результата",
                    "en": "The version that returns the result"
                }
            },
            {
                "label": "void OnInit(void)",
                "description": {
                    "ru": "Версия без возврата результата оставлена только для совместимости со старыми кодами.",
                    "en": "The version without a result return is left only for compatibility with old codes. It is not recommended for use."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int_void) Вызывается в индикаторах и экспертах при наступлении события Init. Функция предназначена для инициализации запущенной MQL5-программы. Существуют два варианта функции.",
            "en": "(int) The function is called in indicators and EAs when the Init event occurs. It is used to initialize a running MQL5 program. There are two function types."
        }
    },
    "OnDeinit": {
        "group": 2,
        "label": "OnDeinit",
        "body": "OnDeinit$0",
        "code": [
            {
                "label": "OnDeinit(const int reason)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "reason  [in]  Код причины деинициализации."
            ],
            "en": [
                "reason  [in]  Deinitialization reason code."
            ]
        },
        "description": {
            "ru": "(void) Вызывается в индикаторах и экспертах при наступлении события Deinit. Функция предназначена для деинициализации запущенной MQL5-программы.",
            "en": "(void) The function is called in indicators and EAs when the Deinit event occurs. It is used to deinitialize a running MQL5 program."
        }
    },
    "OnTick": {
        "group": 2,
        "label": "OnTick",
        "body": "OnTick$0",
        "code": [
            {
                "label": "OnTick(void)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Вызывается в экспертах при наступлении события NewTick для обработки новой котировки.",
            "en": "(void) The NewTick event is generated only for EAs upon receiving a new tick for a symbol of the chart the EA is attached to."
        }
    },
    "OnCalculate": {
        "group": 2,
        "label": "OnCalculate",
        "body": "OnCalculate$0",
        "code": [
            {
                "label": "OnCalculate(const int rates_total, const int prev_calculated, const int begin, const double& price[])",
                "description": {
                    "ru": "Вычисление на основе массива данных",
                    "en": "Calculation based on data array"
                }
            },
            {
                "label": "OnCalculate(const int rates_total, const int prev_calculated, const datetime& time[], const double& open[], const double& high[], const double& low[], const double& close[], const long& tick_volume[], const long& volume[], const int& spread[])",
                "description": {
                    "ru": "Вычисления на основе таймсерий текущего таймфрейма",
                    "en": "Calculations based on the current timeframe timeseries"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "rates_total  [in]  Размер массива price[] или входных таймсерий, доступных индикатору для расчета. Во втором варианте функции значение параметра соответствует количеству баров на графике, на котором он запущен.",
                "prev_calculated  [in]  Содержит значение, которое вернула функция OnCalculate() на предыдущем вызове. Предназначено для пропуска в расчетах тех баров, которые не изменились с предыдущего запуска этой функции.",
                "begin  [in]  Значение индекса в массиве price[], с которого начинаются значимые данные. Позволяет пропустить в расчетах отсутствующие или начальные данные, для которых нет корректных значений.",
                "price[]  [in]  Массив значений для проведения вычислений. В качестве массива price[] может быть передана одна из ценовых таймсерий либо рассчитанный буфер какого-либо индикатора. Тип данных, которые были переданы на расчет, можно узнать с помощью предопределенной переменной _AppliedTo.",
                "time[]  [in]  Массив со значениями времени открытия баров.",
                "open[]  [in]  Массив со значениями цен открытия.",
                "high[]  [in]  Массив со значениями максимальных цен.",
                "low[]  [in]  Массив со значениями минимальных цен.",
                "close[]  [in]  Массив со значениями цен закрытия.",
                "tick_volume[]  [in]  Массив со значениями тиковых объемов.",
                "volume[]  [in]  Массив со значениями торговых объемов.",
                "spread[]  [in]  Массив со значениями спреда для баров."
            ],
            "en": [
                "rates_total  [in]  Size of the price[] array or input series available to the indicator for calculation. In the second function type, the parameter value corresponds to the number of bars on the chart it is launched at.",
                "prev_calculated  [in] Contains the value returned by the OnCalculate() function during the previous call. It is designed to skip the bars that have not changed since the previous launch of this function.",
                "begin  [in]  Index value in the price[] array meaningful data starts from. It allows you to skip missing or initial data, for which there are no correct values.",
                "price[]  [in]  Array of values for calculations. One of the price timeseries or a calculated indicator buffer can be passed as the price[] array. Type of data passed for calculation can be defined using the _AppliedTo predefined variable.",
                "time[]  [in]  Array with bar open time values.",
                "open[]  [in]  Array with Open price values.",
                "high[]  [in]  Array with High price values.",
                "low[]  [in]  Array with Low price values.",
                "close[]  [in]  Array with Close price values.",
                "tick_volume[]  [in]  Array with tick volume values.",
                "volume[]  [in]  Array with trade volume values.",
                "spread[]  [in]  Array with spread values for bars."
            ]
        },
        "description": {
            "ru": "(int) Вызывается в индикаторах при наступлении события Calculate для обработки изменений ценовых данных. Существуют два варианта функции, в пределах одного индикатора нельзя использовать оба варианта.",
            "en": "(int) The function is called in the indicators when the Calculate event occurs for processing price data changes. There are two function types. Only one of them can be used within a single indicator."
        }
    },
    "OnTimer": {
        "group": 2,
        "label": "OnTimer",
        "body": "OnTimer$0",
        "code": [
            {
                "label": "OnTimer(void)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Вызывается в экспертах при наступлении события Timer, генерируемого терминалом с заданным интервалом.",
            "en": "(void) The Timer event is periodically generated by the client terminal for an EA, which activated the timer using the EventSetTimer() function."
        }
    },
    "OnTrade": {
        "group": 2,
        "label": "OnTrade",
        "body": "OnTrade$0",
        "code": [
            {
                "label": "OnTrade(void)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Вызывается в экспертах при наступлении события Trade. Функция предназначена для обработки изменений в списках ордеров, позиций и сделок.",
            "en": "(void) OnTrade() is called only for Expert Advisors. It is not used in indicators and scripts even if you add there a function with the same name and type."
        }
    },
    "OnTradeTransaction": {
        "group": 2,
        "label": "OnTradeTransaction",
        "body": "OnTradeTransaction$0",
        "code": [
            {
                "label": "OnTradeTransaction(const MqlTradeTransaction& trans, const MqlTradeRequest& request, const MqlTradeResult& result)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "trans  [in]  Переменная типа MqlTradeTransaction с описанием транзакции, проведенной на торговом счете.",
                "request  [in]  Переменная типа MqlTradeRequest с описанием торгового запроса, породившего транзакцию. Содержит значения только для транзакции типа TRADE_TRANSACTION_REQUEST.",
                "result  [in]  Переменная типа MqlTradeResult с результатом выполнения торгового запроса, породившего транзакцию. Содержит значения только для транзакции типа TRADE_TRANSACTION_REQUEST."
            ],
            "en": [
                "trans  [in]  MqlTradeTransaction type variable describing a transaction made on a trading account.",
                "request  [in]  MqlTradeRequest type variable describing a trade request that led to a transaction. It contains the values for TRADE_TRANSACTION_REQUEST type transaction only.",
                "result  [in]  MqlTradeResult type variable containing an execution result of a trade request that led to a transaction. It contains the values for TRADE_TRANSACTION_REQUEST type transaction only."
            ]
        },
        "description": {
            "ru": "(void) Вызывается в экспертах при наступлении события TradeTransaction. Функция предназначена для обработки результатов выполнения торгового запроса.",
            "en": "(void) The function is called in EAs when the TradeTransaction event occurs. The function is meant for handling trade request execution results."
        }
    },
    "OnBookEvent": {
        "group": 2,
        "label": "OnBookEvent",
        "body": "OnBookEvent$0",
        "code": [
            {
                "label": "OnBookEvent(const string& symbol)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя финансового инструмента, по которому пришло событие BookEvent"
            ],
            "en": [
                "symbol  [in]  Name of a symbol the BookEvent has arrived for"
            ]
        },
        "description": {
            "ru": "(void) Вызывается в индикаторах и экспертах при наступлении события BookEvent. Функция предназначена для обработки изменений стакана цен (Depth of Market).",
            "en": "(void) The function is called in indicators and EAs when the BookEvent event occurs. It is meant for handling Depth of Market changes."
        }
    },
    "OnChartEvent": {
        "group": 2,
        "label": "OnChartEvent",
        "body": "OnChartEvent$0",
        "code": [
            {
                "label": "OnChartEvent(const int id, const long& lparam, const double& dparam, const string& sparam)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "id  [in]  Идентификатор события из перечисления ENUM_CHART_EVENT.",
                "lparam  [in]  Параметр события типа long",
                "dparam  [in]  Параметр события типа double",
                "sparam  [in]  Параметр события типа string"
            ],
            "en": [
                "id  [in]  Event ID from the ENUM_CHART_EVENT enumeration.",
                "lparam  [in]  long type event parameter",
                "dparam  [in]  double type event parameter",
                "sparam  [in]  string type event parameter"
            ]
        },
        "description": {
            "ru": "(void) Вызывается в экспертах и индикаторах при наступлении события ChartEvent. Функция предназначена для обработки изменений графика, вызванных действиями пользователя или работой MQL5-программ.",
            "en": "(void) The function is called in indicators and EAs when the ChartEvent event occurs. The function is meant for handling chart changes made by a user or an MQL5 program."
        }
    },
    "OnTester": {
        "group": 2,
        "label": "OnTester",
        "body": "OnTester$0",
        "code": [
            {
                "label": "OnTester(void)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(double) Вызывается в экспертах при наступлении события Tester для выполнения необходимых действий по окончании тестирования.",
            "en": "(double) The function is called in Expert Advisors when the Tester event occurs to perform necessary actions after testing."
        }
    },
    "OnTesterInit": {
        "group": 2,
        "label": "OnTesterInit",
        "body": "OnTesterInit$0",
        "code": [
            {
                "label": "int OnTesterInit(void)",
                "description": {
                    "ru": "Версия с возвратом результата",
                    "en": "The version that returns the result"
                }
            },
            {
                "label": "void OnTesterInit(void)",
                "description": {
                    "ru": "Версия без возврата результата оставлена только для совместимости со старыми кодами.",
                    "en": "The version without a result return is left only for compatibility with old codes. Not recommended for use"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int_void) Вызывается в экспертах при наступлении события TesterInit для выполнения необходимых действий перед началом оптимизации в тестере стратегий. Существуют два варианта функции.",
            "en": "(int) The function is called in EAs when the TesterInit event occurs to perform necessary actions before optimization in the strategy tester. There are two function types."
        }
    },
    "OnTesterDeinit": {
        "group": 2,
        "label": "OnTesterDeinit",
        "body": "OnTesterDeinit$0",
        "code": [
            {
                "label": "OnTesterDeinit(void)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Вызывается в экспертах при наступлении события TesterDeinit для выполнения необходимых действий по окончании оптимизации эксперта.",
            "en": "(void) The function is called in EAs when the TesterDeinit event occurs after EA optimization."
        }
    },
    "OnTesterPass": {
        "group": 2,
        "label": "OnTesterPass",
        "body": "OnTesterPass$0",
        "code": [
            {
                "label": "OnTesterPass(void)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Вызывается в экспертах при наступлении события TesterPass для обработки нового фрейма данных во время оптимизации эксперта.",
            "en": "(void) The function is called in EAs when the TesterPass event occurs for handling a new data frame during EA optimization."
        }
    },
    "OrderCalcMargin": {
        "group": 2,
        "label": "OrderCalcMargin",
        "body": "OrderCalcMargin$0",
        "code": [
            {
                "label": "OrderCalcMargin(ENUM_ORDER_TYPE action, string symbol, double volume, double price, double& margin)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "action  [in]  Тип ордера, может принимать значения из перечисления ENUM_ORDER_TYPE.",
                "symbol  [in]  Имя финансового инструмента.",
                "volume  [in]  Объем торговой операции.",
                "price  [in]  Цена открытия.",
                "margin  [out]  Переменная, в которую будет записан необходимый размер маржи в случае успешного выполнения функции. Вычисление производится как если бы на текущем счете не было отложенных ордеров и открытых позиций. Значение маржи зависит от многих факторов и может меняться при изменении рыночного окружения."
            ],
            "en": [
                "action  [in]  The order type, can be one of the values of the ENUM_ORDER_TYPE enumeration.",
                "symbol  [in]  Symbol name.",
                "volume  [in]  Volume of the trade operation.",
                "price  [in]  Open price.",
                "margin  [out]  The variable, to which the value of the required margin will be written in case the function is successfully executed. The calculation is performed as if there were no pending orders and open positions on the current account. The margin value depends on many factors, and can differ in different market environments."
            ]
        },
        "description": {
            "ru": "(bool) Вычисляет размер маржи, необходимой для указанного типа ордера на текущем счете и при текущем рыночном окружении без учета текущих отложенных ордеров и открытых позиций. Позволяет оценить размер маржи для планируемой торговой операции. Значение возвращается в валюте счета.",
            "en": "(bool) The function calculates the margin required for the specified order type, on the current account, in the current market environment not taking into account current pending orders and open positions. It allows the evaluation of margin for the trade operation planned. The value is returned in the account currency."
        }
    },
    "OrderCalcProfit": {
        "group": 2,
        "label": "OrderCalcProfit",
        "body": "OrderCalcProfit$0",
        "code": [
            {
                "label": "OrderCalcProfit(ENUM_ORDER_TYPE action, string symbol, double volume, double price_open, double price_close, double& profit)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "action  [in]  Тип ордера, может принимать одно из двух значений перечисления ENUM_ORDER_TYPE: ORDER_TYPE_BUY или ORDER_TYPE_SELL.",
                "symbol  [in]  Имя финансового инструмента.",
                "volume  [in]  Объем торговой операции.",
                "price_open  [in]  Цена открытия.",
                "price_close  [in]  Цена закрытия.",
                "profit  [out]  Переменная, в которую будет записано вычисленное значение прибыли в случае успешного выполнения функции. Значение оценки прибыли зависит от многих факторов и может меняться при изменении рыночного окружения."
            ],
            "en": [
                "action  [in]  Type of the order, can be one of the two values of the ENUM_ORDER_TYPE enumeration: ORDER_TYPE_BUY or ORDER_TYPE_SELL.",
                "symbol  [in]  Symbol name.",
                "volume  [in]  Volume of the trade operation.",
                "price_open  [in]  Open price.",
                "price_close  [in]  Close price.",
                "profit  [out]  The variable, to which the calculated value of the profit will be written in case the function is successfully executed. The estimated profit value depends on many factors, and can differ in different market environments."
            ]
        },
        "description": {
            "ru": "(bool) Вычисляет размер прибыли для текущего счета и рыночного окружения на основании переданных параметров. Предназначена для предварительной оценки результата торговой операции. Значение возвращается в валюте счета.",
            "en": "(bool) The function calculates the profit for the current account, in the current market conditions, based on the parameters passed. The function is used for pre-evaluation of the result of a trade operation. The value is returned in the account currency."
        }
    },
    "OrderCheck": {
        "group": 2,
        "label": "OrderCheck",
        "body": "OrderCheck$0",
        "code": [
            {
                "label": "OrderCheck(MqlTradeRequest& request, MqlTradeCheckResult& result)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Указатель на структуру типа MqlTradeRequest, которая описывает требуемое торговое действие.",
                "result  [in,out]  Указатель на структуру типа MqlTradeCheckResult, в которую будет помещен результат проверки."
            ],
            "en": [
                "request  [in]  Pointer to the structure of the MqlTradeRequest type, which describes the required trade action.",
                "result  [in,out]  Pointer to the structure of the MqlTradeCheckResult type, to which the check result will be placed."
            ]
        },
        "description": {
            "ru": "(bool) Функция OrderCheck() проверяет достаточность средств для совершения требуемой торговой операции. Результаты проверки помещаются в поля структуры MqlTradeCheckResult.",
            "en": "(bool) The OrderCheck() function checks if there are enough money to execute a required trade operation. The check results are placed to the fields of the MqlTradeCheckResult structure."
        }
    },
    "OrderGetDouble": {
        "group": 2,
        "label": "OrderGetDouble",
        "body": "OrderGetDouble$0",
        "code": [
            {
                "label": "OrderGetDouble(ENUM_ORDER_PROPERTY_DOUBLE property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "OrderGetDouble(ENUM_ORDER_PROPERTY_DOUBLE property_id, double& double_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of a function. If successful, the value of the property is placed in a target variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства ордера. Значение может быть одним из значений перечисления ENUM_ORDER_PROPERTY_DOUBLE.",
                "double_var  [out]  Переменная типа double, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "property_id  [in]  Identifier of the order property. The value can be one of the values of the ENUM_ORDER_PROPERTY_DOUBLE enumeration.",
                "double_var  [out]  Variable of the double type that accepts the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает запрошенное свойство ордера, предварительно выбранного при помощи функции OrderGetTicket или OrderSelect. Свойство ордера должно быть типа double.  Существует 2 варианта функции.",
            "en": "(bool) Returns the requested property of an order, pre-selected using OrderGetTicket or OrderSelect. The order property must be of the double type. There are 2 variants of the function."
        }
    },
    "OrderGetInteger": {
        "group": 2,
        "label": "OrderGetInteger",
        "body": "OrderGetInteger$0",
        "code": [
            {
                "label": "OrderGetInteger(ENUM_ORDER_PROPERTY_INTEGER property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "OrderGetInteger(ENUM_ORDER_PROPERTY_INTEGER property_id, long& long_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false depending on the success of the function. If successful, the value of the property is placed into a target variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства ордера. Значение может быть одним из значений перечисления ENUM_ORDER_PROPERTY_INTEGER.",
                "long_var  [out]  Переменная типа long, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "property_id  [in]  Identifier of the order property. The value can be one of the values of the ENUM_ORDER_PROPERTY_INTEGER enumeration.",
                "long_var  [out]  Variable of the long type that accepts the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает запрошенное свойство ордера, предварительно выбранного при помощи функции OrderGetTicket или OrderSelect. Свойство ордера должно быть типа datetime, int. Существует 2 варианта функции.",
            "en": "(bool) Returns the requested order property, pre-selected using OrderGetTicket or OrderSelect. Order property must be of the datetime, int type. There are 2 variants of the function."
        }
    },
    "OrderGetString": {
        "group": 2,
        "label": "OrderGetString",
        "body": "OrderGetString$0",
        "code": [
            {
                "label": "OrderGetString(ENUM_ORDER_PROPERTY_STRING property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "OrderGetString(ENUM_ORDER_PROPERTY_STRING property_id, string& string_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function. If successful, the value of the property is placed into a target variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства ордера. Значение может быть одним из значений перечисления ENUM_ORDER_PROPERTY_STRING.",
                "string_var  [out]  Переменная типа string, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "property_id  [in]  Identifier of the order property. The value can be one of the values of the ENUM_ORDER_PROPERTY_STRING enumeration.",
                "string_var  [out]  Variable of the string type that accepts the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает запрошенное свойство ордера, предварительно выбранного при помощи функции OrderGetTicket или OrderSelect. Свойство ордера должно быть типа string. Существует 2 варианта функции.",
            "en": "(bool) Returns the requested order property, pre-selected using OrderGetTicket or OrderSelect. The order property must be of the string type. There are 2 variants of the function."
        }
    },
    "OrderGetTicket": {
        "group": 2,
        "label": "OrderGetTicket",
        "body": "OrderGetTicket$0",
        "code": [
            {
                "label": "OrderGetTicket(int index)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "index  [in]  Номер ордера в списке текущих ордеров."
            ],
            "en": [
                "index  [in]  Number of an order in the list of current orders."
            ]
        },
        "description": {
            "ru": "(ulong) Возвращает тикет соответствующего ордера и автоматически выбирает ордер для дальнейшей работы с ним при помощи функций.",
            "en": "(ulong) Returns ticket of a corresponding order and automatically selects the order for further working with it using functions."
        }
    },
    "OrderSelect": {
        "group": 2,
        "label": "OrderSelect",
        "body": "OrderSelect$0",
        "code": [
            {
                "label": "OrderSelect(ulong ticket)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket  [in]  Тикет ордера."
            ],
            "en": [
                "ticket  [in]  Order ticket."
            ]
        },
        "description": {
            "ru": "(bool) Выбирает ордер для дальнейшей работы с ним. Возвращает true при успешном завершении функции. Возвращает false при неудачном завершении функции. Чтобы получить информацию об ошибке, необходимо вызвать функцию GetLastError().",
            "en": "(bool) Selects an order to work with. Returns true if the function has been successfully completed. Returns false if the function completion has failed. For more information about an error call GetLastError()."
        }
    },
    "OrderSend": {
        "group": 2,
        "label": "OrderSend",
        "body": "OrderSend$0",
        "code": [
            {
                "label": "OrderSend(MqlTradeRequest& request, MqlTradeResult& result)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Указатель на структуру типа MqlTradeRequest, описывающую торговое действие клиента.",
                "result  [in,out]  Указатель на структуру типа MqlTradeResult, описывающую результат торговой операции в случае успешного выполнения (возврата true)."
            ],
            "en": [
                "request  [in]  Pointer to a structure of MqlTradeRequest type describing the trade activity of the client.",
                "result  [in,out]  Pointer to a structure of MqlTradeResult type describing the result of trade operation in case of a successful completion (if true is returned)."
            ]
        },
        "description": {
            "ru": "(bool) Функция OrderSend() предназначена для совершения торговых операций через отправку запросов на торговый сервер.",
            "en": "(bool) The OrderSend() function is used for executing trade operations by sending requests to a trade server."
        }
    },
    "OrderSendAsync": {
        "group": 2,
        "label": "OrderSendAsync",
        "body": "OrderSendAsync$0",
        "code": [
            {
                "label": "OrderSendAsync(MqlTradeRequest& request, MqlTradeResult& result)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "request  [in]  Указатель на структуру типа MqlTradeRequest, описывающую торговое действие клиента.",
                "result  [in,out]  Указатель на структуру типа MqlTradeResult, описывающую результат торговой операции в случае успешного выполнения функции (при возврате true)."
            ],
            "en": [
                "request  [in]  A pointer to a structure of the MqlTradeRequest type that describes the trade action of the client.",
                "result  [in,out]  A pointer to a structure of the MqlTradeResult type that describes the result of a trade operation in case of successful execution of the function (if true is returned)."
            ]
        },
        "description": {
            "ru": "(bool) Функция OrderSendAsync() предназначена для проведения асинхронных торговых операций без ожидания ответа торгового сервера на отправленный запрос. Функция предназначена для высокочастотной торговли, когда по условиям торгового алгоритма недопустимо терять время на ожидание ответа от сервера.",
            "en": "(bool) The OrderSendAsync() function is used for conducting asynchronous trade operations without waiting for the trade server's response to a sent request. The function is designed for high-frequency trading, when under the terms of the trading algorithm it is unacceptable to waste time waiting for a response from the server."
        }
    },
    "OrdersTotal": {
        "group": 2,
        "label": "OrdersTotal",
        "body": "OrdersTotal($0)",
        "code": [
            {
                "label": "OrdersTotal()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает количество действующих ордеров.",
            "en": "(int) Returns the number of current orders."
        }
    },
    "ParameterGetRange": {
        "group": 2,
        "label": "ParameterGetRange",
        "body": "ParameterGetRange$0",
        "code": [
            {
                "label": "ParameterGetRange(const string name, bool& enable, long& value, long& start, long& step, long& stop)",
                "description": {
                    "ru": "1. Получение информации для input-параметра целого типа",
                    "en": "1. Receiving data for the integer type input parameter"
                }
            },
            {
                "label": "ParameterGetRange(const string name, bool& enable, double& value, double& start, double& step, double& stop)",
                "description": {
                    "ru": "2. Получение информации для input-параметра вещественного типа",
                    "en": "2. Receiving data for the real type input parameter"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Идентификатор input-переменной. Такие переменные являются внешними параметрами программы, значения которых можно задавать при запуске на графике или при одиночном тестировании.",
                "enable  [out]  Признак того, что данный параметр можно использовать для перебора значений в процессе оптимизации в тестере стратегий.",
                "value  [out]  Значение параметра.",
                "start  [out]  Начальное значение параметра при оптимизации.",
                "step  [out]  Шаг изменения параметра при переборе его значений.",
                "stop  [out]  Конечное значение параметра при оптимизации."
            ],
            "en": [
                "name  [in]  input variable ID. These variables are external parameters of an application. Their values can be specified when launching on a chart or during a single test.",
                "enable  [out]  Flag that this parameter can be used to enumerate the values during the optimization in the Strategy Tester.",
                "value  [out]  Parameter value.",
                "start  [out]  Initial parameter value during the optimization.",
                "step  [out]  Parameter change step when enumerating its values.",
                "stop  [out]  Final parameter value during the optimization."
            ]
        },
        "description": {
            "ru": "(bool) Получает для input-переменной информацию о диапазоне значений и шаге изменения при оптимизации эксперта в тестере стратегий.  Существует 2 варианта функции.",
            "en": "(bool) Receives data on the values range and the change step for an input variable when optimizing an Expert Advisor in the Strategy Tester. There are 2 variants of the function."
        }
    },
    "ParameterSetRange": {
        "group": 2,
        "label": "ParameterSetRange",
        "body": "ParameterSetRange$0",
        "code": [
            {
                "label": "ParameterSetRange(const string name, bool enable, long value, long start, long step, long stop)",
                "description": {
                    "ru": "1. Установка значений для input-параметра целого типа",
                    "en": "1. Specifying the values for the integer type input parameter"
                }
            },
            {
                "label": "ParameterSetRange(const string name, bool enable, double value, double start, double step, double stop)",
                "description": {
                    "ru": "2. Установка значений для input-параметра вещественного типа",
                    "en": "2. Specifying the values for the real type input parameter"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Идентификатор переменной input или sinput. Такие переменные являются внешними параметрами программы, значения которых можно задавать при запуске.",
                "enable  [in]  Разрешить данный параметр для перебора значений в процессе оптимизации в тестере стратегий.",
                "value  [in]  Значение параметра.",
                "start  [in]  Начальное значение параметра при оптимизации.",
                "step  [in]  Шаг изменения параметра при переборе его значений.",
                "stop  [in]  Конечное значение параметра при оптимизации."
            ],
            "en": [
                "name  [in]  input or sinput variable ID. These variables are external parameters of an application. Their values can be specified when launching the program.",
                "enable  [in]  Enable this parameter to enumerate the values during the optimization in the Strategy Tester.",
                "value  [in]  Parameter value.",
                "start  [in]  Initial parameter value during the optimization.",
                "step  [in]  Parameter change step when enumerating its values.",
                "stop  [in]  Final parameter value during the optimization."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает правила использования input-переменной при оптимизации эксперта в тестере стратегий: значение, шаг изменения, начальное и конечное значения.  Существует 2 варианта функции.",
            "en": "(bool) Specifies the use of input variable when optimizing an Expert Advisor in the Strategy Tester: value, change step, initial and final values. There are 2 variants of the function."
        }
    },
    "Period": {
        "group": 2,
        "label": "Period",
        "body": "Period($0)",
        "code": [
            {
                "label": "Period()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(ENUM_TIMEFRAMES) Возвращает значение таймфрейма текущего графика.",
            "en": "(ENUM_TIMEFRAMES) Returns the current chart timeframe."
        }
    },
    "PeriodSeconds": {
        "group": 2,
        "label": "PeriodSeconds",
        "body": "PeriodSeconds$0",
        "code": [
            {
                "label": "PeriodSeconds(ENUM_TIMEFRAMES period)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "period  [in]  Значение периода графика из перечисления ENUM_TIMEFRAMES. Если параметр не указан, то возвращается количество секунд текущего периода графика, на котором запущена программа."
            ],
            "en": [
                "period  [in]  Value of a chart period from the enumeration ENUM_TIMEFRAMES. If the parameter isn't specified, it returns the number of seconds of the current chart period, at which the program runs."
            ]
        },
        "description": {
            "ru": "(int) Возвращает количество секунд в периоде.",
            "en": "(int) This function returns number of seconds in a period."
        }
    },
    "PlaySound": {
        "group": 2,
        "label": "PlaySound",
        "body": "PlaySound$0",
        "code": [
            {
                "label": "PlaySound(string filename)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "filename  [in]  Путь к звуковому файлу. Если filename=NULL, воспроизведение звука прекращается."
            ],
            "en": [
                "filename  [in]  Path to a sound file. If filename=NULL, the playback is stopped."
            ]
        },
        "description": {
            "ru": "(bool) Воспроизводит звуковой файл.",
            "en": "(bool) It plays a sound file."
        }
    },
    "PlotIndexGetInteger": {
        "group": 2,
        "label": "PlotIndexGetInteger",
        "body": "PlotIndexGetInteger$0",
        "code": [
            {
                "label": "PlotIndexGetInteger(int plot_index, int prop_id)",
                "description": {
                    "ru": "Вызов с указанием  идентификатора свойства.",
                    "en": "Call indicating identifier of the property."
                }
            },
            {
                "label": "PlotIndexGetInteger(int plot_index, int prop_id, int prop_modifier)",
                "description": {
                    "ru": "Вызов с указанием  идентификатора и модификатора свойства.",
                    "en": "Call indicating the identifier and modifier of the property."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "plot_index  [in]  Индекс графического построения",
                "prop_id  [in]  Идентификатор свойства индикатора. Значение может быть одним из значений перечисления ENUM_PLOT_PROPERTY_INTEGER.",
                "prop_modifier  [in]  Модификатор указанного свойства. Только свойства индексов цветов требуют модификатора."
            ],
            "en": [
                "plot_index  [in]  Index of the graphical plotting",
                "prop_id  [in] The value can be one of the values of the ENUM_PLOT_PROPERTY_INTEGER enumeration.",
                "prop_modifier  [in]  Modifier of the specified property. Only color index properties require a modifier."
            ]
        },
        "description": {
            "ru": "(int) Возвращает значение соответствующего свойства соответствующей линии индикатора. Свойство должно быть типов int, color, bool или char. Существует 2 варианта функции.",
            "en": "(int) The function sets the value of the corresponding property of the corresponding indicator line. The indicator property must be of the int, color, bool or char type. There are 2 variants of the function."
        }
    },
    "PlotIndexSetDouble": {
        "group": 2,
        "label": "PlotIndexSetDouble",
        "body": "PlotIndexSetDouble$0",
        "code": [
            {
                "label": "PlotIndexSetDouble(int plot_index, int prop_id, double prop_value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "plot_index  [in]  Индекс графического построения",
                "prop_id  [in]  Идентификатор свойства индикатора. Значение может быть одним из значений перечисления ENUM_PLOT_PROPERTY_DOUBLE.",
                "prop_value  [in]  Значение свойства."
            ],
            "en": [
                "plot_index  [in]  Index of the graphical plotting",
                "prop_id  [in] The value can be one of the values of the ENUM_PLOT_PROPERTY_DOUBLE enumeration.",
                "prop_value  [in]  The value of the property."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства соответствующей линии индикатора. Свойство индикатора должно быть типа double.",
            "en": "(bool) The function sets the value of the corresponding property of the corresponding indicator line. The indicator property must be of the double type."
        }
    },
    "PlotIndexSetInteger": {
        "group": 2,
        "label": "PlotIndexSetInteger",
        "body": "PlotIndexSetInteger$0",
        "code": [
            {
                "label": "PlotIndexSetInteger(int plot_index, int prop_id, int prop_value)",
                "description": {
                    "ru": "Вызов с указанием идентификатора свойства.",
                    "en": "Call indicating identifier of the property."
                }
            },
            {
                "label": "PlotIndexSetInteger(int plot_index, int prop_id, int prop_modifier, int prop_value)",
                "description": {
                    "ru": "Вызов с указанием  идентификатора и модификатора свойства.",
                    "en": "Call indicating the identifier and modifier of the property."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "plot_index  [in]  Индекс графического построения",
                "prop_id  [in]  Идентификатор свойства индикатора. Значение может быть одним из значений перечисления ENUM_PLOT_PROPERTY_INTEGER.",
                "prop_modifier  [in]  Модификатор указанного свойства. Только свойства индексов цветов требуют модификатора.",
                "prop_value  [in]  Значение свойства."
            ],
            "en": [
                "plot_index  [in]  Index of the graphical plotting",
                "prop_id  [in] The value can be one of the values of the ENUM_PLOT_PROPERTY_INTEGER enumeration.",
                "prop_modifier  [in]  Modifier of the specified property. Only color index properties require a modifier.",
                "prop_value  [in]  The value of the property."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства соответствующей линии индикатора. Свойство индикатора должно быть типа int, char, bool или color. Существует 2 варианта функции.",
            "en": "(bool) The function sets the value of the corresponding property of the corresponding indicator line. The indicator property must be of the int, char, bool or color type. There are 2 variants of the function."
        }
    },
    "PlotIndexSetString": {
        "group": 2,
        "label": "PlotIndexSetString",
        "body": "PlotIndexSetString$0",
        "code": [
            {
                "label": "PlotIndexSetString(int plot_index, int prop_id, string prop_value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "plot_index  [in]  Индекс графического построения",
                "prop_id  [in]  Идентификатор свойства индикатора. Значение может быть одним из значений перечисления ENUM_PLOT_PROPERTY_STRING.",
                "prop_value  [in]  Значение свойства."
            ],
            "en": [
                "plot_index  [in]  Index of graphical plot",
                "prop_id  [in] The value can be one of the values of the ENUM_PLOT_PROPERTY_STRING enumeration.",
                "prop_value  [in]  The value of the property."
            ]
        },
        "description": {
            "ru": "(bool) Задает значение соответствующего свойства соответствующей линии индикатора. Свойство индикатора должно быть типа string.",
            "en": "(bool) The function sets the value of the corresponding property of the corresponding indicator line. The indicator property must be of the string type."
        }
    },
    "Point": {
        "group": 2,
        "label": "Point",
        "body": "Point($0)",
        "code": [
            {
                "label": "Point()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(double) Возвращает размер пункта текущего инструмента в валюте котировки.",
            "en": "(double) Returns the point size of the current symbol in the quote currency."
        }
    },
    "PositionGetDouble": {
        "group": 2,
        "label": "PositionGetDouble",
        "body": "PositionGetDouble$0",
        "code": [
            {
                "label": "PositionGetDouble(ENUM_POSITION_PROPERTY_DOUBLE property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "PositionGetDouble(ENUM_POSITION_PROPERTY_DOUBLE property_id, double& double_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function execution. If successful, the value of the property is placed in a receiving variable passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства позиции. Значение может быть одним из значений перечисления ENUM_POSITION_PROPERTY_DOUBLE.",
                "double_var  [out]  Переменная типа double, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "property_id  [in]  Identifier of a position property. The value can be one of the values of the ENUM_POSITION_PROPERTY_DOUBLE enumeration.",
                "double_var  [out]  Variable of the double type, accepting the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Функция возвращает запрошенное свойство открытой позиции, предварительно выбранной при помощи функции PositionGetSymbol или PositionSelect. Свойство позиции должно быть типа double.  Существует 2 варианта функции.",
            "en": "(bool) The function returns the requested property of an open position, pre-selected using PositionGetSymbol or PositionSelect. The position property must be of the double type. There are 2 variants of the function."
        }
    },
    "PositionGetInteger": {
        "group": 2,
        "label": "PositionGetInteger",
        "body": "PositionGetInteger$0",
        "code": [
            {
                "label": "PositionGetInteger(ENUM_POSITION_PROPERTY_INTEGER property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "PositionGetInteger(ENUM_POSITION_PROPERTY_INTEGER property_id, long& long_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function execution. If successful, the value of the property is placed in a receiving variables passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства позиции. Значение может быть одним из значений перечисления ENUM_POSITION_PROPERTY_INTEGER.",
                "long_var  [out]  Переменная типа long, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "property_id  [in]  Identifier of a position property. The value can be one of the values of the ENUM_POSITION_PROPERTY_INTEGER enumeration.",
                "long_var  [out]  Variable of the long type accepting the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Функция возвращает запрошенное свойство открытой позиции, предварительно выбранной при помощи функции PositionGetSymbol или PositionSelect. Свойство позиции должно быть типа datetime, int. Существует 2 варианта функции.",
            "en": "(bool) The function returns the requested property of an open position, pre-selected using PositionGetSymbol or PositionSelect. The position property should be of datetime, int type. There are 2 variants of the function."
        }
    },
    "PositionGetString": {
        "group": 2,
        "label": "PositionGetString",
        "body": "PositionGetString$0",
        "code": [
            {
                "label": "PositionGetString(ENUM_POSITION_PROPERTY_STRING property_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "PositionGetString(ENUM_POSITION_PROPERTY_STRING property_id, string& string_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of the function execution. If successful, the value of the property is placed in a receiving variables passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства позиции. Значение может быть одним из значений перечисления ENUM_POSITION_PROPERTY_STRING.",
                "string_var  [out]  Переменная типа string, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "property_id  [in]  Identifier of a position property. The value can be one of the values of the ENUM_POSITION_PROPERTY_STRING enumeration.",
                "string_var  [out]  Variable of the string type accepting the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Функция возвращает запрошенное свойство открытой позиции, предварительно выбранной при помощи функции PositionGetSymbol или PositionSelect. Свойство позиции должно быть типа string. Существует 2 варианта функции.",
            "en": "(bool) The function returns the requested property of an open position, pre-selected using PositionGetSymbol or PositionSelect. The position property should be of the string type. There are 2 variants of the function."
        }
    },
    "PositionGetSymbol": {
        "group": 2,
        "label": "PositionGetSymbol",
        "body": "PositionGetSymbol$0",
        "code": [
            {
                "label": "PositionGetSymbol(int index)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "index  [in]  Номер позиции в списке открытых позиций."
            ],
            "en": [
                "index  [in]  Number of the position in the list of open positions."
            ]
        },
        "description": {
            "ru": "(string) Возвращает символ соответствующей открытой позиции и автоматически выбирает позицию для дальнейшей работы с ней при помощи функций PositionGetDouble, PositionGetInteger, PositionGetString.",
            "en": "(string) Returns the symbol corresponding to the open position and automatically selects the position for further working with it using functions PositionGetDouble, PositionGetInteger, PositionGetString."
        }
    },
    "PositionGetTicket": {
        "group": 2,
        "label": "PositionGetTicket",
        "body": "PositionGetTicket$0",
        "code": [
            {
                "label": "PositionGetTicket(int index)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "index  [in]  Индекс позиции в списке открытых позиций, начиная с 0."
            ],
            "en": [
                "index  [in]  The index of a position in the list of open positions, numeration starts with 0."
            ]
        },
        "description": {
            "ru": "(ulong) Функция возвращает тикет позиции по индексу в списке открытых позиций и автоматически выбирает эту позицию для дальнейшей работы с ней при помощи функций PositionGetDouble, PositionGetInteger, PositionGetString.",
            "en": "(ulong) The function returns the ticket of a position with the specified index in the list of open positions and automatically selects the position to work with using functions PositionGetDouble, PositionGetInteger, PositionGetString."
        }
    },
    "PositionSelect": {
        "group": 2,
        "label": "PositionSelect",
        "body": "PositionSelect$0",
        "code": [
            {
                "label": "PositionSelect(string symbol)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Наименование финансового инструмента."
            ],
            "en": [
                "symbol  [in]  Name of the financial security."
            ]
        },
        "description": {
            "ru": "(bool) Выбирает открытую позицию для дальнейшей работы с ней. Возвращает true при успешном завершении функции. Возвращает false при неудачном завершении функции. Чтобы получить информацию об ошибке, необходимо вызвать функцию GetLastError().",
            "en": "(bool) Chooses an open position for further working with it. Returns true if the function is successfully completed. Returns false in case of failure. To obtain information about the error, call GetLastError()."
        }
    },
    "PositionSelectByTicket": {
        "group": 2,
        "label": "PositionSelectByTicket",
        "body": "PositionSelectByTicket$0",
        "code": [
            {
                "label": "PositionSelectByTicket(ulong ticket)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ticket  [in]  Тикет позиции."
            ],
            "en": [
                "ticket  [in]  Position ticket."
            ]
        },
        "description": {
            "ru": "(bool) Выбирает открытую позицию для дальнейшей работы с ней по указанному тикету. Возвращает true при успешном завершении функции. Возвращает false при неудачном завершении функции. Чтобы получить информацию об ошибке, необходимо вызвать функцию GetLastError().",
            "en": "(bool) Selects an open position to work with based on the ticket number specified in the position. If successful, returns true. Returns false if the function failed. Call GetLastError() for error details."
        }
    },
    "PositionsTotal": {
        "group": 2,
        "label": "PositionsTotal",
        "body": "PositionsTotal($0)",
        "code": [
            {
                "label": "PositionsTotal()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает количество открытых позиций.",
            "en": "(int) Returns the number of open positions."
        }
    },
    "pow": {
        "group": 2,
        "label": "pow",
        "body": "pow$0",
        "code": [
            {
                "label": "pow(double base, double exponent)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "base  [in]  Основание.",
                "exponent  [in]  Значение степени."
            ],
            "en": [
                "base  [in]  Base.",
                "exponent  [in]  Exponent value."
            ]
        },
        "description": {
            "ru": "(double) Возводит основание в указанную степень.",
            "en": "(double) The function raises a base to a specified power."
        }
    },
    "Print": {
        "group": 2,
        "label": "Print",
        "body": "Print$0",
        "code": [
            {
                "label": "Print(any values)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 1,
        "hm": 0,
        "parameters": {
            "ru": [
                "values  [in]  Любые значения, разделенные запятыми. Количество параметров не может превышать 64."
            ],
            "en": [
                "values  [in]  Any values separated by commas. The number of parameters cannot exceed 64."
            ]
        },
        "description": {
            "ru": "(void) Печатает некоторое сообщение в журнал экспертов. Параметры могут иметь любой тип.",
            "en": "(void) It enters a message in the Expert Advisor log. Parameters can be of any type."
        }
    },
    "PrintFormat": {
        "group": 2,
        "label": "PrintFormat",
        "body": "PrintFormat$0",
        "code": [
            {
                "label": "PrintFormat(string format_string, any values)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 2,
        "hm": 0,
        "parameters": {
            "ru": [
                "format_string  [in]  Строка формата состоит из обычных символов и, если за строкой формата следуют аргументы, еще и спецификации формата.",
                "values  [in]  Любые значения простых типов, разделенные запятыми. Общее количество параметров не может превышать 64, включая форматную строку."
            ],
            "en": [
                "format_string  [in]  A format string consists of simple symbols, and if the format string is followed by arguments, it also contains format specifications.",
                "values  [in]  Any values of simple types separated by commas. Total number of parameters can't exceed 64 including the format string."
            ]
        },
        "description": {
            "ru": "(void) Форматирует и печатает наборы символов и значений в журнал экспертов в соответствии с заданным форматом.",
            "en": "(void) It formats and enters sets of symbols and values in the Expert Advisor log in accordance with a preset format."
        }
    },
    "rand": {
        "group": 2,
        "label": "rand",
        "body": "rand($0)",
        "code": [
            {
                "label": "rand()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает псевдослучайное целое число в диапазоне от 0 до 32767.",
            "en": "(int) Returns a pseudorandom integer within the range of 0 to 32767."
        }
    },
    "ResetLastError": {
        "group": 2,
        "label": "ResetLastError",
        "body": "ResetLastError($0)",
        "code": [
            {
                "label": "ResetLastError()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(void) Устанавливает значение предопределенной переменной _LastError в ноль.",
            "en": "(void) Sets the value of the predefined variable _LastError into zero."
        }
    },
    "ResourceCreate": {
        "group": 2,
        "label": "ResourceCreate",
        "body": "ResourceCreate$0",
        "code": [
            {
                "label": "ResourceCreate(const string resource_name, const string path)",
                "description": {
                    "ru": "Создание ресурса на основе файла",
                    "en": "Creating a resource based on a file"
                }
            },
            {
                "label": "ResourceCreate(const string resource_name, const uint& data[], uint img_width, uint img_height, uint data_xoffset, uint data_yoffset, uint data_width, ENUM_COLOR_FORMAT color_format)",
                "description": {
                    "ru": "Динамическое создание ресурса на основе массива пикселей",
                    "en": "Creating a resource based on the array of pixels"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "resource_name  [in]  Имя ресурса.",
                "path  [in]  Относительный путь к файлу, содержащему данные для ресурса.",
                "data[]  [in]  Одномерный или двумерный массив для создания полного изображения.",
                "img_width  [in]  Ширина прямоугольной области изображения в пикселях для помещения в ресурс в виде картинки. Не может быть больше значения data_width.",
                "img_height  [in]  Высота прямоугольной области изображения в пикселях для помещения в ресурс  в виде картинки.",
                "data_xoffset  [in]  Смещение в пикселях прямоугольной области изображения по горизонтали вправо.",
                "data_yoffset  [in]  Смещение в пикселях прямоугольной области изображения по вертикали вниз.",
                "data_width  [in]  Требуется только для одномерных массивов и означает полную ширину создаваемого изображения из набора данных. Если data_width=0, то подразумевается равным img_width. Для двумерных массивов данный параметр игнорируется и принимается равным второй размерности массива data[].",
                "color_format  [in]  Способ обработки цвета из перечисления ENUM_COLOR_FORMAT."
            ],
            "en": [
                "resource_name  [in]  Resource name.",
                "path  [in]  Relative path to the file containing the data for the resource.",
                "data[]  [in]  A one-dimensional or two-dimensional array for creating a complete image.",
                "img_width  [in]  The width of the rectangular image area in pixels to be placed in the resource in the form of an image. It cannot be greater than the data_width value.",
                "img_height  [in]  The height of the rectangular image area in pixels to be placed in the resource in the form of an image.",
                "data_xoffset  [in]  The horizontal rightward offset of the rectangular area of the image.",
                "data_yoffset  [in]  The vertical downward offset of the rectangular area of the image.",
                "data_width  [in]  Required only for one-dimensional arrays. It denotes the full width of the image from the data set. If data_width=0, it is assumed to be equal to img_width. For two-dimensional arrays the parameter is ignored and is assumed to be equal to the second dimension of the data[] array.",
                "color_format  [in]  Color processing method, from a value from the ENUM_COLOR_FORMAT enumeration."
            ]
        },
        "description": {
            "ru": "(bool) Создает ресурс изображения на основе набора данных. Существует два варианта функции:",
            "en": "(bool) Creates an image resource based on a data set. There are two variants of the function:"
        }
    },
    "ResourceFree": {
        "group": 2,
        "label": "ResourceFree",
        "body": "ResourceFree$0",
        "code": [
            {
                "label": "ResourceFree(const string resource_name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "resource_name  [in]  Имя ресурса, должно начинаться с \"::\"."
            ],
            "en": [
                "resource_name  [in]  Resource name should start with \"::\"."
            ]
        },
        "description": {
            "ru": "(bool) Удаляет динамически созданный ресурс (освобождает занятую ресурсом память).",
            "en": "(bool) The function deletes dynamically created resource (freeing the memory allocated for it)."
        }
    },
    "ResourceReadImage": {
        "group": 2,
        "label": "ResourceReadImage",
        "body": "ResourceReadImage$0",
        "code": [
            {
                "label": "ResourceReadImage(const string resource_name, uint& data[], uint& width, uint& height)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "resource_name  [in]  Имя графического ресурса, содержащего изображение. Для доступа к собственным ресурсам указывается в коротком виде \"::resourcename\". Если же необходимо загрузить ресурс из скомпилированного EX5-файла, то необходимо имя в полном виде с указанием пути относительно папки MQL5, имени файла и имени ресурса – \"path\\\\filename.ex5::resourcename\".",
                "data[]  [in]  Одномерный или двумерный массив для получения данных из графического ресурса.",
                "width  [out]  Ширина картинки графического ресурса в пикселях.",
                "height  [out]  Высота картинки графического ресурса в пикселях."
            ],
            "en": [
                "resource_name  [in]  Name of the graphical resource containing an image. To gain access to its own resources, the name is used in brief form \"::resourcename\". If we download a resource from a compiled EX5 file, the full name should be used with the path relative to MQL5 directory, file and resource names – \"path\\\\filename.ex5::resourcename\".",
                "data[]  [in]  One- or two-dimensional array for receiving data from the graphical resource.",
                "width  [out]  Graphical resource image width in pixels.",
                "height  [out]  Graphical resource image height in pixels."
            ]
        },
        "description": {
            "ru": "(bool) Читает данные графического ресурса, созданного функцией ResourceCreate() или сохраненного в EX5-файле при компиляции.",
            "en": "(bool) The function reads data from the graphical resource created by ResourceCreate() function or saved in EX5 file during compilation."
        }
    },
    "ResourceSave": {
        "group": 2,
        "label": "ResourceSave",
        "body": "ResourceSave$0",
        "code": [
            {
                "label": "ResourceSave(const string resource_name, const string file_name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "resource_name  [in]  Имя ресурса, должно начинаться с \"::\".",
                "file_name  [in]  Имя файла относительно MQL5\\Files."
            ],
            "en": [
                "resource_name  [in]  The name of the resource, must start with \"::\".",
                "file_name  [in]  The name of the file relative to MQL5\\Files."
            ]
        },
        "description": {
            "ru": "(bool) Сохраняет ресурс в указанный файл.",
            "en": "(bool) Saves a resource into the specified file."
        }
    },
    "round": {
        "group": 2,
        "label": "round",
        "body": "round$0",
        "code": [
            {
                "label": "round(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Числовая величина для округления."
            ],
            "en": [
                "value  [in]  Numeric value before rounding."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение, округленное до ближайшего целого числа указанного числового значения.",
            "en": "(double) The function returns a value rounded off to the nearest integer of the specified numeric value."
        }
    },
    "SendFTP": {
        "group": 2,
        "label": "SendFTP",
        "body": "SendFTP$0",
        "code": [
            {
                "label": "SendFTP(string filename, string ftp_path)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "filename  [in]   Имя отсылаемого файла.",
                "ftp_path  [in]   Каталог FTP. Если каталог не указан, то используется каталог, описанный в настройках."
            ],
            "en": [
                "filename  [in]   Name of sent file.",
                "ftp_path  [in]   FTP catalog. If a directory is not specified, directory described in settings is used."
            ]
        },
        "description": {
            "ru": "(bool) Посылает файл по адресу, указанному в окне настроек на закладке \"FTP\".",
            "en": "(bool) Sends a file at the address, specified in the setting window of the \"FTP\" tab."
        }
    },
    "SendMail": {
        "group": 2,
        "label": "SendMail",
        "body": "SendMail$0",
        "code": [
            {
                "label": "SendMail(string subject, string some_text)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "subject  [in]  Заголовок письма.",
                "some_text  [in]  Тело письма."
            ],
            "en": [
                "subject  [in]  Email header.",
                "some_text  [in]  Email body."
            ]
        },
        "description": {
            "ru": "(bool) Посылает электронное письмо по адресу, указанному в окне настроек на закладке \"Почта\".",
            "en": "(bool) Sends an email at the address specified in the settings window of the \"Email\" tab."
        }
    },
    "SendNotification": {
        "group": 2,
        "label": "SendNotification",
        "body": "SendNotification$0",
        "code": [
            {
                "label": "SendNotification(string text)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "text  [in]   Текст сообщения в уведомлении. Длина сообщения должна быть не более 255 символов."
            ],
            "en": [
                "text  [in]   The text of the notification. The message length should not exceed 255 characters."
            ]
        },
        "description": {
            "ru": "(bool) Посылает уведомление на мобильные терминалы, чьи MetaQuotes ID указаны в окне настроек на закладке \"Уведомления\".",
            "en": "(bool) Sends push notifications to the mobile terminals, whose MetaQuotes IDs are specified in the \"Notifications\" tab."
        }
    },
    "SeriesInfoInteger": {
        "group": 2,
        "label": "SeriesInfoInteger",
        "body": "SeriesInfoInteger$0",
        "code": [
            {
                "label": "SeriesInfoInteger(string symbol_name, ENUM_TIMEFRAMES timeframe, ENUM_SERIES_INFO_INTEGER prop_id)",
                "description": {
                    "ru": "Непосредственно возвращает значение свойства.",
                    "en": "Directly returns the property value."
                }
            },
            {
                "label": "SeriesInfoInteger(string symbol_name, ENUM_TIMEFRAMES timeframe, ENUM_SERIES_INFO_INTEGER prop_id, long& long_var)",
                "description": {
                    "ru": "Возвращает true или false в зависимости от успешности выполнения функции.",
                    "en": "Returns true or false depending on the success of the function run."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_name  [in]  Символ.",
                "timeframe  [in]  Период.",
                "prop_id  [in]  Идентификатор запрашиваемого свойства, значение перечисления ENUM_SERIES_INFO_INTEGER.",
                "long_var  [out]  Переменная, в которую помещается значение запрошенного свойства."
            ],
            "en": [
                "symbol_name  [in]  Symbol name.",
                "timeframe  [in]  Period.",
                "prop_id  [in]  Identifier of the requested property, value of the ENUM_SERIES_INFO_INTEGER enumeration.",
                "long_var  [out]  Variable to which the value of the requested property is placed."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает информацию о состоянии исторических данных. Существует 2 варианта функции.",
            "en": "(bool) Returns information about the state of historical data. There are 2 variants of function calls."
        }
    },
    "SetIndexBuffer": {
        "group": 2,
        "label": "SetIndexBuffer",
        "body": "SetIndexBuffer$0",
        "code": [
            {
                "label": "SetIndexBuffer(int index, double buffer[], ENUM_INDEXBUFFER_TYPE data_type)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "index  [in]  Номер индикаторного буфера. Нумерация начинается с 0. Номер должен быть меньше значения, объявленного в #property indicator_buffers.",
                "buffer[]  [in]  Массив, объявленный в программе пользовательского индикатора.",
                "data_type  [in]  Тип данных, хранящихся в индикаторном массиве. По умолчанию INDICATOR_DATA (значения рассчитанного индикатора). Может также принимать значение INDICATOR_COLOR_INDEX, тогда данный буфер предназначен для хранения индексов цветов для предыдущего индикаторного буфера. Можно задать до 64 цветов в строке #property indicator_colorN. Значение INDICATOR_CALCULATIONS означает, что данный буфер участвует в промежуточных расчетах индикатора и не предназначен для отрисовки."
            ],
            "en": [
                "index  [in] Number of the indicator buffer. The numbering starts with 0. The number must be less than the value declared in #property indicator_buffers.",
                "buffer[]  [in]  An array declared in the custom indicator program.",
                "data_type  [in] Type of data stored in the indicator array. By default it is INDICATOR_DATA (values of the calculated indicator). It may also take the value of INDICATOR_COLOR_INDEX; in this case this buffer is used for storing color indexes for the previous indicator buffer. You can specify up to 64 colors in the #property indicator_colorN line. The INDICATOR_CALCULATIONS value means that the buffer is used in intermediate calculations of the indicator and is not intended for drawing."
            ]
        },
        "description": {
            "ru": "(bool) Связывает указанный индикаторный буфер с одномерным динамическим массивом типа double.",
            "en": "(bool) The function binds a specified indicator buffer with one-dimensional dynamic array of the double type."
        }
    },
    "ShortArrayToString": {
        "group": 2,
        "label": "ShortArrayToString",
        "body": "ShortArrayToString$0",
        "code": [
            {
                "label": "ShortArrayToString(ushort array[], int start, int count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "array[]  [in]  Массив типа ushort (аналог типа wchar_t).",
                "start  [in]  Позиция, с которой начинается копирование. По умолчанию 0.",
                "count  [in]  Количество элементов массива для копирования. Определяет длину результатной строки. По умолчанию -1, что означает копирование до конца массива, либо до встречи терминального 0."
            ],
            "en": [
                "array[]  [in]  Array of ushort type (analog of wchar_t type).",
                "start  [in] Position, from which copying starts, Default - 0.",
                "count  [in]  Number of array elements to copy. Defines the length of a resulting string. Default value is -1, which means copying up to the array end, or till terminal 0."
            ]
        },
        "description": {
            "ru": "(string) Копирует часть массива в возвращаемую строку.",
            "en": "(string) It copies part of array into a returned string."
        }
    },
    "ShortToString": {
        "group": 2,
        "label": "ShortToString",
        "body": "ShortToString$0",
        "code": [
            {
                "label": "ShortToString(ushort symbol_code)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol_code  [in]  Код символа. Вместо кода символа можно использовать литеральную строку, содержащую символ, либо литеральную строку с двухбайтовым шестнадцатеричным кодом, соответствующему символу из таблицы Unicode."
            ],
            "en": [
                "symbol_code  [in]  Symbol code. Instead of a symbol code you can use literal string containing a symbol or a literal string with 2-byte hexadecimal code corresponding to the symbol from the Unicode table."
            ]
        },
        "description": {
            "ru": "(string) Преобразует код символа (unicode) в односимвольную строку и возвращает полученную строку.",
            "en": "(string) It converts the symbol code (unicode) into one-symbol string and returns resulting string."
        }
    },
    "SignalBaseGetDouble": {
        "group": 2,
        "label": "SignalBaseGetDouble",
        "body": "SignalBaseGetDouble$0",
        "code": [
            {
                "label": "SignalBaseGetDouble(ENUM_SIGNAL_BASE_DOUBLE property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства сигнала. Может быть одним из значений перечисления ENUM_SIGNAL_BASE_DOUBLE."
            ],
            "en": [
                "property_id  [in]  Signal property identifier. The value can be one of the values of the ENUM_SIGNAL_BASE_DOUBLE enumeration."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение свойства типа double для выбранного сигнала.",
            "en": "(double) Returns the value of double type property for selected signal."
        }
    },
    "SignalBaseGetInteger": {
        "group": 2,
        "label": "SignalBaseGetInteger",
        "body": "SignalBaseGetInteger$0",
        "code": [
            {
                "label": "SignalBaseGetInteger(ENUM_SIGNAL_BASE_INTEGER property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства сигнала. Может быть одним из значений перечисления ENUM_SIGNAL_BASE_INTEGER."
            ],
            "en": [
                "property_id  [in]  Signal property identifier. The value can be one of the values of the ENUM_SIGNAL_BASE_INTEGER enumeration."
            ]
        },
        "description": {
            "ru": "(long) Возвращает значение свойства типа integer для выбранного сигнала.",
            "en": "(long) Returns the value of integer type property for selected signal."
        }
    },
    "SignalBaseGetString": {
        "group": 2,
        "label": "SignalBaseGetString",
        "body": "SignalBaseGetString$0",
        "code": [
            {
                "label": "SignalBaseGetString(ENUM_SIGNAL_BASE_STRING property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства сигнала. Может быть одним из значений перечисления ENUM_SIGNAL_BASE_STRING."
            ],
            "en": [
                "property_id  [in]  Signal property identifier. The value can be one of the values of the ENUM_SIGNAL_BASE_STRING enumeration."
            ]
        },
        "description": {
            "ru": "(string) Возвращает значение свойства типа string для выбранного сигнала.",
            "en": "(string) Returns the value of string type property for selected signal."
        }
    },
    "SignalBaseSelect": {
        "group": 2,
        "label": "SignalBaseSelect",
        "body": "SignalBaseSelect$0",
        "code": [
            {
                "label": "SignalBaseSelect(int index)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "index  [in]  Индекс записи сигнала в базе торговых сигналов."
            ],
            "en": [
                "index  [in]  Signal index in base of trading signals."
            ]
        },
        "description": {
            "ru": "(bool) Выбирает для работы сигнал из базы торговых сигналов, доступных в терминале.",
            "en": "(bool) Selects a signal from signals, available in terminal for further working with it."
        }
    },
    "SignalBaseTotal": {
        "group": 2,
        "label": "SignalBaseTotal",
        "body": "SignalBaseTotal($0)",
        "code": [
            {
                "label": "SignalBaseTotal()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает общее количество сигналов, доступных в терминале.",
            "en": "(int) Returns the total amount of signals, available in terminal."
        }
    },
    "SignalInfoGetDouble": {
        "group": 2,
        "label": "SignalInfoGetDouble",
        "body": "SignalInfoGetDouble$0",
        "code": [
            {
                "label": "SignalInfoGetDouble(ENUM_SIGNAL_INFO_DOUBLE property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства настроек копирования торгового сигнала. Может быть одним из значений перечисления ENUM_SIGNAL_INFO_DOUBLE."
            ],
            "en": [
                "property_id  [in]  Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_DOUBLE enumeration."
            ]
        },
        "description": {
            "ru": "(double) Возвращает из настроек копирования торгового сигнала значение свойства типа double.",
            "en": "(double) Returns the value of double type property of signal copy settings."
        }
    },
    "SignalInfoGetInteger": {
        "group": 2,
        "label": "SignalInfoGetInteger",
        "body": "SignalInfoGetInteger$0",
        "code": [
            {
                "label": "SignalInfoGetInteger(ENUM_SIGNAL_INFO_INTEGER property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства настроек копирования торгового сигнала. Может быть одним из значений перечисления ENUM_SIGNAL_INFO_INTEGER."
            ],
            "en": [
                "property_id  [in]  Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_INTEGER enumeration."
            ]
        },
        "description": {
            "ru": "(long) Возвращает из настроек копирования торгового сигнала значение свойства типа integer.",
            "en": "(long) Returns the value of integer type property of signal copy settings."
        }
    },
    "SignalInfoGetString": {
        "group": 2,
        "label": "SignalInfoGetString",
        "body": "SignalInfoGetString$0",
        "code": [
            {
                "label": "SignalInfoGetString(ENUM_SIGNAL_INFO_STRING property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства настроек копирования торгового сигнала. Значение может быть одним из значений перечисления ENUM_SIGNAL_INFO_STRING."
            ],
            "en": [
                "property_id  [in]  Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_STRING enumeration."
            ]
        },
        "description": {
            "ru": "(string) Возвращает из настроек копирования торгового сигнала значение свойства типа string.",
            "en": "(string) Returns the value of string type property of signal copy settings."
        }
    },
    "SignalInfoSetDouble": {
        "group": 2,
        "label": "SignalInfoSetDouble",
        "body": "SignalInfoSetDouble$0",
        "code": [
            {
                "label": "SignalInfoSetDouble(ENUM_SIGNAL_INFO_DOUBLE property_id, double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства настроек копирования торгового сигнала. Может быть одним из значений перечисления ENUM_SIGNAL_INFO_DOUBLE.",
                "value  [in]  Значение свойства настроек копирования торгового сигнала."
            ],
            "en": [
                "property_id  [in]  Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_DOUBLE enumeration.",
                "value  [in]  The value of signal copy settings property."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает в настройках копирования торгового сигнала значение свойства типа double.",
            "en": "(bool) Sets the value of double type property of signal copy settings."
        }
    },
    "SignalInfoSetInteger": {
        "group": 2,
        "label": "SignalInfoSetInteger",
        "body": "SignalInfoSetInteger$0",
        "code": [
            {
                "label": "SignalInfoSetInteger(ENUM_SIGNAL_INFO_INTEGER property_id, long value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства настроек копирования торгового сигнала. Может быть одним из значений перечисления ENUM_SIGNAL_INFO_INTEGER.",
                "value  [in]  Значение свойства настроек копирования торгового сигнала."
            ],
            "en": [
                "property_id  [in]  Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_INTEGER enumeration.",
                "value  [in]  The value of signal copy settings property."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает в настройках копирования торгового сигнала значение свойства типа integer.",
            "en": "(bool) Sets the value of integer type property of signal copy settings."
        }
    },
    "SignalSubscribe": {
        "group": 2,
        "label": "SignalSubscribe",
        "body": "SignalSubscribe$0",
        "code": [
            {
                "label": "SignalSubscribe(long signal_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "signal_id  [in]  Идентификатор сигнала."
            ],
            "en": [
                "signal_id  [in]  Signal identifier."
            ]
        },
        "description": {
            "ru": "(bool) Производит подписку на копирование указанного торгового сигнала.",
            "en": "(bool) Subscribes to the trading signal."
        }
    },
    "SignalUnsubscribe": {
        "group": 2,
        "label": "SignalUnsubscribe",
        "body": "SignalUnsubscribe($0)",
        "code": [
            {
                "label": "SignalUnsubscribe()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(bool) Отменяет подписку на копирование торгового сигнала.",
            "en": "(bool) Cancels subscription."
        }
    },
    "sin": {
        "group": 2,
        "label": "sin",
        "body": "sin$0",
        "code": [
            {
                "label": "sin(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Угол в радианах."
            ],
            "en": [
                "value  [in]  Angle in radians."
            ]
        },
        "description": {
            "ru": "(double) Возвращает синус указанного угла.",
            "en": "(double) Returns the sine of a specified angle."
        }
    },
    "Sleep": {
        "group": 2,
        "label": "Sleep",
        "body": "Sleep$0",
        "code": [
            {
                "label": "Sleep(int milliseconds)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "milliseconds  [in]  Интервал задержки в миллисекундах."
            ],
            "en": [
                "milliseconds  [in]  Delay interval in milliseconds."
            ]
        },
        "description": {
            "ru": "(void) Функция задерживает выполнение текущего эксперта или скрипта на определенный интервал.",
            "en": "(void) The function suspends execution of the current Expert Advisor or script within a specified interval."
        }
    },
    "SocketCreate": {
        "group": 2,
        "label": "SocketCreate",
        "body": "SocketCreate$0",
        "code": [
            {
                "label": "SocketCreate(uint flags)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "flags  [in]  Комбинация флагов, определяющая режим работы с сокетом. В данный момент поддерживается один флаг — SOCKET_DEFAULT."
            ],
            "en": [
                "flags  [in]  Combination of flags defining the mode of working with a socket. Currently, only one flag is supported — SOCKET_DEFAULT."
            ]
        },
        "description": {
            "ru": "(int) Создает сокет с указанными флагами и возвращает его хэндл.",
            "en": "(int) Create a socket with specified flags and return its handle."
        }
    },
    "SocketClose": {
        "group": 2,
        "label": "SocketClose",
        "body": "SocketClose$0",
        "code": [
            {
                "label": "SocketClose(const int socket)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, который необходимо закрыть. Хэндл возвращается функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE)."
            ],
            "en": [
                "socket  [in]  Handle of a socket to be closed. The handle is returned by the SocketCreate function. When an incorrect handle is passed, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is written to _LastError."
            ]
        },
        "description": {
            "ru": "(bool) Закрывает сокет.",
            "en": "(bool) Close a socket."
        }
    },
    "SocketConnect": {
        "group": 2,
        "label": "SocketConnect",
        "body": "SocketConnect$0",
        "code": [
            {
                "label": "SocketConnect(int socket, const string server, uint port, uint timeout_receive_ms)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE).",
                "server  [in]  Доменное имя сервера, к которому необходимо подключиться, или его IP-адрес.",
                "port  [in]  Номер порта для подключения.",
                "timeout_receive_ms  [in]  Таймаут подключения в миллисекундах. Если в течение этого времени подключение не удается выполнить, попытки останавливаются."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is written to _LastError.",
                "server  [in]  Domain name of the server you want to connect to or its IP address.",
                "port  [in]  Connection port number.",
                "timeout_receive_ms  [in]  Connection timeout in milliseconds. If connection is not established within that time interval, attempts are stopped."
            ]
        },
        "description": {
            "ru": "(bool) Выполняет подключение к серверу с контролем таймаута.",
            "en": "(bool) Connect to the server with timeout control."
        }
    },
    "SocketIsConnected": {
        "group": 2,
        "label": "SocketIsConnected",
        "body": "SocketIsConnected$0",
        "code": [
            {
                "label": "SocketIsConnected(const int socket)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate(). При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE)."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate() function. When an incorrect handle is passed to _LastError, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is activated."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет, подключен ли сокет в текущий момент времени.",
            "en": "(bool) Checks if the socket is currently connected."
        }
    },
    "SocketIsReadable": {
        "group": 2,
        "label": "SocketIsReadable",
        "body": "SocketIsReadable$0",
        "code": [
            {
                "label": "SocketIsReadable(const int socket)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE)."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed to _LastError, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is activated."
            ]
        },
        "description": {
            "ru": "(uint) Получает количество байт, которое можно прочитать из сокета.",
            "en": "(uint) Get a number of bytes that can be read from a socket."
        }
    },
    "SocketIsWritable": {
        "group": 2,
        "label": "SocketIsWritable",
        "body": "SocketIsWritable$0",
        "code": [
            {
                "label": "SocketIsWritable(const int socket)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE)."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is written to _LastError."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет, возможна ли запись данных в сокет в текущий момент времени.",
            "en": "(bool) Check whether data can be written to a socket at the current time."
        }
    },
    "SocketTimeouts": {
        "group": 2,
        "label": "SocketTimeouts",
        "body": "SocketTimeouts$0",
        "code": [
            {
                "label": "SocketTimeouts(int socket, uint timeout_send_ms, uint timeout_receive_ms)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE).",
                "timeout_send_ms  [in]  Таймаут отправки данных в миллисекундах.",
                "timeout_receive_ms  [in]  Таймаут получения данных в миллисекундах."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is written to _LastError.",
                "timeout_send_ms  [in]  Data sending timeout in milliseconds.",
                "timeout_receive_ms  [in]  Data obtaining timeout in milliseconds."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает таймауты получения и отправки данных для системного объекта сокета.",
            "en": "(bool) Set timeouts for receiving and sending data for a socket system object."
        }
    },
    "SocketRead": {
        "group": 2,
        "label": "SocketRead",
        "body": "SocketRead$0",
        "code": [
            {
                "label": "SocketRead(int socket, uchar& buffer[], uint buffer_maxlen, uint timeout_ms)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE).",
                "buffer[]  [out]  Ссылка на массив типа uchar, в который будут прочитаны данные. Размер динамического массива увеличивается на количество прочитанных байт. Размер массива не может превышать INT_MAX (2147483647).",
                "buffer_maxlen  [in]  Количество байт, которые необходимо прочитать в массив buffer[]. Данные, которые не поместятся в массив, останутся в сокете. Их можно будет получить следующим вызовом SocketRead. Значение buffer_maxlen не может превышать INT_MAX (2147483647).",
                "timeout_ms  [in]  Таймаут чтения данных в миллисекундах. Если в течение этого времени не удается получить данные, попытки завершаются и функция возвращает -1."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed to _LastError, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is activated.",
                "buffer[]  [out]  Reference to the uchar type array the data is read in. Dynamic array size is increased by the number of read bytes. The array size cannot exceed INT_MAX (2147483647).",
                "buffer_maxlen  [in]  Number of bytes to read to the buffer[] array. Data not fitting into the array remain in the socket. They can be received by the next SocketRead call. buffer_maxlen cannot exceed INT_MAX (2147483647).",
                "timeout_ms  [in]  Data reading timeout in milliseconds. If data is not obtained within this time, attempts are stopped and the function returns -1."
            ]
        },
        "description": {
            "ru": "(int) Читает данные из сокета.",
            "en": "(int) Read data from a socket."
        }
    },
    "SocketSend": {
        "group": 2,
        "label": "SocketSend",
        "body": "SocketSend$0",
        "code": [
            {
                "label": "SocketSend(int socket, const uchar& buffer[], uint buffer_len)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE).",
                "buffer[]  [in]  Ссылка на массив типа uchar с данными, которые необходимо отправить в сокет.",
                "buffer_len  [in]  Размер массива buffer."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is written to _LastError.",
                "buffer[]  [in]  Reference to the uchar type array with the data to be sent to the socket.",
                "buffer_len  [in]  'buffer' array size."
            ]
        },
        "description": {
            "ru": "(int) Записывает данные в сокете.",
            "en": "(int) Write data to a socket."
        }
    },
    "SocketTlsHandshake": {
        "group": 2,
        "label": "SocketTlsHandshake",
        "body": "SocketTlsHandshake$0",
        "code": [
            {
                "label": "SocketTlsHandshake(int socket, const string host)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE).",
                "host  [in]  Адрес хоста, с которым устанавливается защищенное соединение."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is written to _LastError.",
                "host  [in]  Address of a host a secure connection is established with."
            ]
        },
        "description": {
            "ru": "(bool) Инициирует защищенное TLS (SSL)-соединение с указанным хостом по протоколу TLS Handshake. Во время Handshake клиент и сервер согласовывают параметры соединения: версию используемого протокола и способ шифрования данных.",
            "en": "(bool) Initiate secure TLS (SSL) connection to a specified host via TLS Handshake protocol. During Handshake, a client and a server agree on connection parameters: applied protocol version and data encryption method."
        }
    },
    "SocketTlsCertificate": {
        "group": 2,
        "label": "SocketTlsCertificate",
        "body": "SocketTlsCertificate$0",
        "code": [
            {
                "label": "SocketTlsCertificate(int socket, string& subject, string& issuer, string& serial, string& thumbprint, datetime& expiration)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE).",
                "subject  [in]  Имя владельца сертификата. Соответствует полю Subject.",
                "issuer  [in]  Имя издателя сертификата. Соответствует полю Issuer.",
                "serial  [in]  Серийный номер сертификата. Соответствует полю SerialNumber.",
                "thumbprint  [in]  Отпечаток сертификата. Соответствует хэшу SHA-1 от всего файла сертификата (все поля, включая подпись издателя).",
                "expiration  [in]  Срок истечения сертификата в формате datetime."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is written to _LastError.",
                "subject  [in]  Certificate owner name. Corresponds to the Subject field.",
                "issuer  [in]  Certificate issuer name. Corresponds to the Issuer field.",
                "serial  [in]  Certificate serial number. Corresponds to the SerialNumber field.",
                "thumbprint  [in]  Certificate print. Corresponds to the SHA-1 hash from the entire certificate file (all fields including the issuer signature).",
                "expiration  [in]  Certificate expiration date in the datetime format."
            ]
        },
        "description": {
            "ru": "(int) Получает данные о сертификате, используемом для защиты сетевого соединения.",
            "en": "(int) Get data on the certificate used to secure network connection."
        }
    },
    "SocketTlsRead": {
        "group": 2,
        "label": "SocketTlsRead",
        "body": "SocketTlsRead$0",
        "code": [
            {
                "label": "SocketTlsRead(int socket, uchar& buffer[], uint buffer_maxlen)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE).",
                "buffer[]  [out]  Ссылка на массив типа uchar, в который будут прочитаны данные. Размер динамического массива увеличивается на количество прочитанных байт. Размер массива не может превышать INT_MAX (2147483647).",
                "buffer_maxlen  [in]  Количество байт, которые необходимо прочитать в массив buffer[]. Данные, которые не поместятся в массив, останутся в сокете. Их можно будет получить следующим вызовом SocketTLSRead. Значение buffer_maxlen не может превышать INT_MAX (2147483647)."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed to _LastError, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is activated.",
                "buffer[]  [out]  Reference to the uchar type array the data is read in. Dynamic array size is increased by the number of read bytes. The array size cannot exceed INT_MAX (2147483647).",
                "buffer_maxlen  [in]  Number of bytes to read to the buffer[] array. Data not fitting into the array remain in the socket. They can be received by the next SocketTLSRead call. buffer_maxlen cannot exceed INT_MAX (2147483647)."
            ]
        },
        "description": {
            "ru": "(int) Читает данные из защищенного TLS-соединения.",
            "en": "(int) Read data from secure TLS connection."
        }
    },
    "SocketTlsReadAvailable": {
        "group": 2,
        "label": "SocketTlsReadAvailable",
        "body": "SocketTlsReadAvailable$0",
        "code": [
            {
                "label": "SocketTlsReadAvailable(int socket, uchar& buffer[], const uint buffer_maxlen)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE).",
                "buffer[]  [out]  Ссылка на массив типа uchar, в который будут прочитаны данные. Размер динамического массива увеличивается на количество прочитанных байт. Размер массива не может превышать INT_MAX (2147483647).",
                "buffer_maxlen  [in]  Количество байт, которые необходимо прочитать в массив buffer[]. Данные, которые не поместятся в массив, останутся в сокете. Их можно будет получить следующим вызовом SocketTlsReadAvailable или  SocketTlsRead. Значение buffer_maxlen не может превышать INT_MAX (2147483647)."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed to _LastError, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is activated.",
                "buffer[]  [out]  Reference to the uchar type array the data is read in. Dynamic array size is increased by the number of read bytes. The array size cannot exceed INT_MAX (2147483647).",
                "buffer_maxlen  [in]  Number of bytes to read to the buffer[] array. Data not fitting into the array remain in the socket. They can be received by the next SocketTlsReadAvailable or  SocketTlsRead call. buffer_maxlen cannot exceed INT_MAX (2147483647)."
            ]
        },
        "description": {
            "ru": "(int) Читает все доступные данные из защищенного TLS-соединения.",
            "en": "(int) Read all available data from secure TLS connection."
        }
    },
    "SocketTlsSend": {
        "group": 2,
        "label": "SocketTlsSend",
        "body": "SocketTlsSend$0",
        "code": [
            {
                "label": "SocketTlsSend(int socket, const uchar& buffer[], uint buffer_len)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "socket  [in]  Хэндл сокета, возвращаемый функцией SocketCreate. При передаче неверного хэндла в _LastError записывается ошибка 5270 (ERR_NETSOCKET_INVALIDHANDLE).",
                "buffer[]  [in]  Ссылка на массив типа uchar с данными, которые необходимо отправить.",
                "buffer_len  [in]  Размер массива buffer."
            ],
            "en": [
                "socket  [in]  Socket handle returned by the SocketCreate function. When an incorrect handle is passed, the error 5270 (ERR_NETSOCKET_INVALIDHANDLE) is written to _LastError.",
                "buffer[]  [in]  Reference to the uchar type array with the data to be sent.",
                "buffer_len  [in]  'buffer' array size."
            ]
        },
        "description": {
            "ru": "(int) Отправляет данные через защищенное TLS-соединение.",
            "en": "(int) Send data via secure TLS connection."
        }
    },
    "sqrt": {
        "group": 2,
        "label": "sqrt",
        "body": "sqrt$0",
        "code": [
            {
                "label": "sqrt(double value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Положительная числовая величина."
            ],
            "en": [
                "value  [in]  Positive numeric value."
            ]
        },
        "description": {
            "ru": "(double) Возвращает квадратный корень числа.",
            "en": "(double) Returns the square root of a number."
        }
    },
    "srand": {
        "group": 2,
        "label": "srand",
        "body": "srand$0",
        "code": [
            {
                "label": "srand(int seed)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "seed  [in]  Начальное число для ряда случайных чисел."
            ],
            "en": [
                "seed  [in]  Starting number for the sequence of random numbers."
            ]
        },
        "description": {
            "ru": "(void) Устанавливает начальное состояние для генерации ряда псевдослучайных целых чисел.",
            "en": "(void) Sets the starting point for generating a series of pseudorandom integers."
        }
    },
    "StringAdd": {
        "group": 2,
        "label": "StringAdd",
        "body": "StringAdd$0",
        "code": [
            {
                "label": "StringAdd(string& string_var, string add_substring)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [in][out]  Строка, которая будет дополнена.",
                "add_substring  [in]  Строка, которая будет добавлена в конец исходной строки."
            ],
            "en": [
                "string_var  [in][out]  String, to which another one is added.",
                "add_substring  [in]  String that is added to the end of a  source string."
            ]
        },
        "description": {
            "ru": "(bool) Присоединяет к концу строки по месту указанную подстроку.",
            "en": "(bool) The function adds a substring to the end of a string."
        }
    },
    "StringBufferLen": {
        "group": 2,
        "label": "StringBufferLen",
        "body": "StringBufferLen$0",
        "code": [
            {
                "label": "StringBufferLen(string string_var)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [in]  Строка."
            ],
            "en": [
                "string_var  [in]  String."
            ]
        },
        "description": {
            "ru": "(int) Возвращает размер буфера, распределенного для строки.",
            "en": "(int) The function returns the size of buffer allocated for the string."
        }
    },
    "StringCompare": {
        "group": 2,
        "label": "StringCompare",
        "body": "StringCompare$0",
        "code": [
            {
                "label": "StringCompare(const string& string1, const string& string2, bool case_sensitive)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string1  [in]  Первая строка.",
                "string2  [in]  Вторая строка.",
                "case_sensitive  [in]  Режим учета регистра букв. Если значения равно true, то \"A\">\"a\". Если значение равно false, то \"A\"=\"a\". По умолчанию значение параметра равно true."
            ],
            "en": [
                "string1  [in]  The first string.",
                "string2  [in]  The second string.",
                "case_sensitive  [in]  Case sensitivity mode selection. If it is true, then \"A\">\"a\". If it is false, then \"A\"=\"a\". By default the value is equal to true."
            ]
        },
        "description": {
            "ru": "(int) Сравнивает между собой две строки и возвращает результат сравнения в виде целого числа.",
            "en": "(int) The function compares two strings and returns the comparison result in form of an integer."
        }
    },
    "StringConcatenate": {
        "group": 2,
        "label": "StringConcatenate",
        "body": "StringConcatenate$0",
        "code": [
            {
                "label": "StringConcatenate(string& string_var, any values)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 2,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [out]  Строка, которая будет сформирована в результате конкатенации.",
                "values  [in]  Любые значения, разделенные запятыми. От 2 до 63 параметров любого простого типа."
            ],
            "en": [
                "string_var  [out]  String that will be formed as a result of concatenation.",
                "values  [in]  Any comma separated values. From 2 to 63 parameters of any simple type."
            ]
        },
        "description": {
            "ru": "(int) Формирует строку из переданных параметров и возвращает размер сформированной строки. Параметры могут иметь любой тип. Количество параметров не может быть меньше 2 и не может превышать 64.",
            "en": "(int) The function forms a string of passed parameters and returns the size of the formed string. Parameters can be of any type. Number of parameters can't be less than 2 or more than 64."
        }
    },
    "StringFill": {
        "group": 2,
        "label": "StringFill",
        "body": "StringFill$0",
        "code": [
            {
                "label": "StringFill(string& string_var, ushort character)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [in][out]  Строка, которая будет заполнена указанным символом.",
                "character  [in]  Символ, которым будет заполнена строка."
            ],
            "en": [
                "string_var  [in][out]  String, that will be filled out by the selected symbol.",
                "character  [in]  Symbol, by which the string will be filled out."
            ]
        },
        "description": {
            "ru": "(bool) Заполняет указанную строку по месту указанными символами.",
            "en": "(bool) It fills out a selected string by specified symbols."
        }
    },
    "StringFind": {
        "group": 2,
        "label": "StringFind",
        "body": "StringFind$0",
        "code": [
            {
                "label": "StringFind(string string_value, string match_substring, int start_pos)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_value  [in]  Строка, в которой производится поиск.",
                "match_substring  [in]  Искомая подстрока.",
                "start_pos  [in]  Позиция в строке, с которой должен быть начат поиск."
            ],
            "en": [
                "string_value  [in]  String, in which search is made.",
                "match_substring  [in]  Searched substring.",
                "start_pos  [in]  Position in the string from which search is started."
            ]
        },
        "description": {
            "ru": "(int) Поиск подстроки в строке.",
            "en": "(int) Search for a substring in a string."
        }
    },
    "StringFormat": {
        "group": 2,
        "label": "StringFormat",
        "body": "StringFormat$0",
        "code": [
            {
                "label": "StringFormat(string format, any values)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 2,
        "hm": 0,
        "parameters": {
            "ru": [
                "format  [in]  Строка, содержащая способ форматирования. Правила форматирования такие же, как и для функции PrintFormat",
                "values  [in]  Параметры, разделенные запятой."
            ],
            "en": [
                "format  [in]  String containing method of formatting. Formatting rules are the same as for the PrintFormat function.",
                "values  [in]  Parameters, separated by a comma."
            ]
        },
        "description": {
            "ru": "(string) Форматирует полученные параметры и возвращает строку.",
            "en": "(string) The function formats obtained parameters and returns a string."
        }
    },
    "StringGetCharacter": {
        "group": 2,
        "label": "StringGetCharacter",
        "body": "StringGetCharacter$0",
        "code": [
            {
                "label": "StringGetCharacter(string string_value, int pos)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_value  [in]  Строка.",
                "pos  [in]  Позиция символа в строке. Может быть от 0 до StringLen(text) -1."
            ],
            "en": [
                "string_value  [in]  String.",
                "pos  [in]  Position of a symbol in the string. Can be from 0 to StringLen(text) -1."
            ]
        },
        "description": {
            "ru": "(ushort) Возвращает значение символа, расположенного в указанной позиции строки.",
            "en": "(ushort) Returns value of a symbol, located in the specified position of a string."
        }
    },
    "StringInit": {
        "group": 2,
        "label": "StringInit",
        "body": "StringInit$0",
        "code": [
            {
                "label": "StringInit(string& string_var, int new_len, ushort character)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [in][out]  Строка, которая должна быть инициализирована или деинициализирована.",
                "new_len  [in]  Длина строки после инициализации. Если размер=0, то деинициализирует строку, то есть, буфер строки освобождается и адрес буфера обнуляется.",
                "character  [in]  Символ для заполнения строки."
            ],
            "en": [
                "string_var  [in][out]  String that should be initialized and deinitialized.",
                "new_len  [in]  String length after initialization. If length=0, it deinitializes the string, i.e. the string buffer is cleared and the buffer address is zeroed.",
                "character  [in]  Symbol to fill the string."
            ]
        },
        "description": {
            "ru": "(bool) Инициализирует строку указанными символами и обеспечивает указанный размер строки.",
            "en": "(bool) Initializes a string by specified symbols and provides the specified string size."
        }
    },
    "StringLen": {
        "group": 2,
        "label": "StringLen",
        "body": "StringLen$0",
        "code": [
            {
                "label": "StringLen(string string_value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_value  [in]  Строка для вычисления длины."
            ],
            "en": [
                "string_value  [in]  String to calculate length."
            ]
        },
        "description": {
            "ru": "(int) Возвращает число символов в строке.",
            "en": "(int) Returns the number of symbols in a string."
        }
    },
    "StringReplace": {
        "group": 2,
        "label": "StringReplace",
        "body": "StringReplace$0",
        "code": [
            {
                "label": "StringReplace(string& str, const string find, const string replacement)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "str  [in][out]  Строка, в которой необходимо произвести замены.",
                "find  [in]  Искомая подстрока для замены.",
                "replacement  [in]  Подстрока, которая будет вставлена вместо найденной."
            ],
            "en": [
                "str  [in][out]  The string in which you are going to replace substrings.",
                "find  [in]  The desired substring to replace.",
                "replacement  [in]  The string that will be inserted instead of the found one."
            ]
        },
        "description": {
            "ru": "(int) Заменяет в строке все найденные подстроки на заданную последовательность символов.",
            "en": "(int) It replaces all the found substrings of a string by a set sequence of symbols."
        }
    },
    "StringSetCharacter": {
        "group": 2,
        "label": "StringSetCharacter",
        "body": "StringSetCharacter$0",
        "code": [
            {
                "label": "StringSetCharacter(string& string_var, int pos, ushort character)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [in][out]  Строка.",
                "pos  [in]  Позиция символа в строке. Может быть от 0 до StringLen(text).",
                "character  [in]  Символьный код Unicode."
            ],
            "en": [
                "string_var  [in][out]  String.",
                "pos  [in]  Position of a character in a string. Can be from 0 to StringLen(text).",
                "character  [in]  Symbol code Unicode."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает копию строки с измененным значением символа в указанной позиции.",
            "en": "(bool) Returns copy of a string with a changed character in a specified position."
        }
    },
    "StringSplit": {
        "group": 2,
        "label": "StringSplit",
        "body": "StringSplit$0",
        "code": [
            {
                "label": "StringSplit(const string string_value, const ushort separator, string result[])",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_value  [in]  Строка, из которой необходимо получить подстроки. Сама строка при этом не изменяется.",
                "separator  [in]  Код символа разделителя. Для получения кода можно использовать функцию StringGetCharacter().",
                "result[]  [out]  Массив строк, в который помещаются полученные подстроки."
            ],
            "en": [
                "string_value  [in]  The string from which you need to get substrings. The string will not change.",
                "separator  [in]  The code of the separator character. To get the code, you can use the StringGetCharacter() function.",
                "result[]  [out]  An array of strings where the obtained substrings are located."
            ]
        },
        "description": {
            "ru": "(int) Получает из указанной строки подстроки по заданному разделителю и возвращает количество полученных подстрок.",
            "en": "(int) Gets substrings by a specified separator from the specified string, returns the number of substrings obtained."
        }
    },
    "StringSubstr": {
        "group": 2,
        "label": "StringSubstr",
        "body": "StringSubstr$0",
        "code": [
            {
                "label": "StringSubstr(string string_value, int start_pos, int length)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_value  [in]  Строка, из которой должна быть извлечена подстрока.",
                "start_pos  [in]  Начальная позиция подстроки. Может быть от 0 до StringLen(text) -1.",
                "length  [in]  Длина извлекаемой подстроки. Если значение параметра равно -1 либо параметр не задан, то будет извлекаться подстрока, начиная с указанной позиции и до конца строки."
            ],
            "en": [
                "string_value  [in]  String to extract a substring from.",
                "start_pos  [in]  Initial position of a substring. Can be from 0 to StringLen(text) -1.",
                "length  [in] Length of an extracted substring. If the parameter value is equal to -1 or parameter isn't set, the substring will be extracted from the indicated position till the string end."
            ]
        },
        "description": {
            "ru": "(string) Извлекает подстроку из текстовой строки, начинающейся c указанной позиции.",
            "en": "(string) Extracts a substring from a text string starting from the specified position."
        }
    },
    "StringToCharArray": {
        "group": 2,
        "label": "StringToCharArray",
        "body": "StringToCharArray$0",
        "code": [
            {
                "label": "StringToCharArray(string text_string, uchar& array[], int start, int count, uint codepage)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "text_string  [in]  Строка для копирования.",
                "array[]  [out]  Массив типа uchar.",
                "start  [in]  Позиция, с которой начинается копирование. По умолчанию 0.",
                "count  [in]  Количество элементов массива для копирования. Определяет длину результатной строки. По умолчанию -1, что означает копирование до конца массива, либо до встречи терминального 0. Терминальный 0 также будет скопирован в массив-приемник, при этом размер динамического массива может быть увеличен при необходимости под размер строки. Если размер динамического массива больше длины строки, то размер массива уменьшен не будет.",
                "codepage  [in]  Значение кодовой страницы. Для наиболее употребимых кодовых страниц предусмотрены соответствующие константы."
            ],
            "en": [
                "text_string  [in]  String to copy.",
                "array[]  [out]  Array of uchar type.",
                "start  [in]  Position from which copying starts. Default - 0.",
                "count  [in]  Number of array elements to copy. Defines length of a resulting string. Default value is -1, which means copying up to the array end, or till terminal 0. Terminal 0 will also be copied to the recipient array, in this case the size of a dynamic array can be increased if necessary to the size of the string. If the size of the dynamic array exceeds the length of the string, the size of the array will not be reduced.",
                "codepage  [in]  The value of the code page. For the most-used code pages provide appropriate constants."
            ]
        },
        "description": {
            "ru": "(int) Посимвольно копирует преобразованную из unicode в ansi строку в указанное место массива типа uchar. Функция возвращает количество скопированных элементов.",
            "en": "(int) Symbol-wise copies a string converted from Unicode to ANSI, to a selected place of array of uchar type. It returns the number of copied elements."
        }
    },
    "StringToColor": {
        "group": 2,
        "label": "StringToColor",
        "body": "StringToColor$0",
        "code": [
            {
                "label": "StringToColor(string color_string)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "color_string  [in]  Строковое представление цвета типа \"R,G,B\" или название одного из предопределенных  Web-цветов."
            ],
            "en": [
                "color_string  [in]  String representation of a color of \"R,G,B\" type or name of one of predefined Web-colors."
            ]
        },
        "description": {
            "ru": "(color) Преобразует строку типа \"R,G,B\" или строку, содержащую наименование цвета, в значение типа color.",
            "en": "(color) Converting \"R,G,B\" string or string with color name into color type value."
        }
    },
    "StringToDouble": {
        "group": 2,
        "label": "StringToDouble",
        "body": "StringToDouble$0",
        "code": [
            {
                "label": "StringToDouble(string value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Строка, содержащая символьное представление числа."
            ],
            "en": [
                "value  [in]  String containing a symbol representation of a number."
            ]
        },
        "description": {
            "ru": "(double) Преобразование строки, содержащей символьное представление числа, в число типа double.",
            "en": "(double) The function converts string containing a symbol representation of number into number of double type."
        }
    },
    "StringToInteger": {
        "group": 2,
        "label": "StringToInteger",
        "body": "StringToInteger$0",
        "code": [
            {
                "label": "StringToInteger(string value)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Строка, содержащая число."
            ],
            "en": [
                "value  [in]  String containing a number."
            ]
        },
        "description": {
            "ru": "(long) Преобразование строки, содержащей символьное представление числа, в число типа long (целое).",
            "en": "(long) The function converts string containing a symbol representation of number into number of long (integer) type."
        }
    },
    "StringToLower": {
        "group": 2,
        "label": "StringToLower",
        "body": "StringToLower$0",
        "code": [
            {
                "label": "StringToLower(string& string_var)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [in][out]  Строка."
            ],
            "en": [
                "string_var  [in][out]  String."
            ]
        },
        "description": {
            "ru": "(bool) Преобразует все символы указанной строки в строчные (маленькие) по месту.",
            "en": "(bool) Transforms all symbols of a selected string into lowercase."
        }
    },
    "StringToShortArray": {
        "group": 2,
        "label": "StringToShortArray",
        "body": "StringToShortArray$0",
        "code": [
            {
                "label": "StringToShortArray(string text_string, ushort& array[], int start, int count)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "text_string  [in]  Строка для копирования.",
                "array[]  [out]  Массив типа ushort (аналог типа wchar_t).",
                "start  [in]  Позиция, с которой начинается копирование. По умолчанию 0.",
                "count  [in]  Количество элементов массива для копирования. Определяет длину результатной строки. По умолчанию -1, что означает копирование до конца массива, либо до встречи терминального 0. Терминальный 0 также будет скопирован в массив-приемник, при этом размер динамического массива может быть увеличен при необходимости под размер строки. Если размер динамического массива больше длины строки, то размер массива уменьшен не будет."
            ],
            "en": [
                "text_string  [in]  String to copy",
                "array[]  [out]  Array of ushort type (analog of wchar_t type).",
                "start  [in]  Position, from which copying starts. Default - 0.",
                "count  [in]  Number of array elements to copy. Defines length of a resulting string. Default value is -1, which means copying up to the array end, or till terminal 0.Terminal 0 will also be copied to the recipient array, in this case the size of a dynamic array can be increased if necessary to the size of the string. If the size of the dynamic array exceeds the length of the string, the size of the array will not be reduced."
            ]
        },
        "description": {
            "ru": "(int) Посимвольно копирует строку в указанное место массива типа ushort. Функция возвращает количество скопированных элементов.",
            "en": "(int) The function symbol-wise copies a string into a specified place of an array of ushort type. It returns the number of copied elements."
        }
    },
    "StringToTime": {
        "group": 2,
        "label": "StringToTime",
        "body": "StringToTime$0",
        "code": [
            {
                "label": "StringToTime(const string time_string)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "time_string  [in]  Строка в одном из указанных форматов:"
            ],
            "en": [
                "time_string  [in]  String in one of the specified formats:"
            ]
        },
        "description": {
            "ru": "(datetime) Преобразование строки, содержащей время и/или дату в формате \"yyyy.mm.dd [hh:mi]\", в число типа datetime.",
            "en": "(datetime) Transforms the string containing time and/or date in the \"yyyy.mm.dd [hh:mi]\" format into the datetime type number."
        }
    },
    "StringToUpper": {
        "group": 2,
        "label": "StringToUpper",
        "body": "StringToUpper$0",
        "code": [
            {
                "label": "StringToUpper(string& string_var)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [in][out]  Строка."
            ],
            "en": [
                "string_var  [in][out]  String."
            ]
        },
        "description": {
            "ru": "(bool) Преобразует все символы указанной строки в прописные (большие) по месту.",
            "en": "(bool) Transforms all symbols of a selected string into capitals."
        }
    },
    "StringTrimLeft": {
        "group": 2,
        "label": "StringTrimLeft",
        "body": "StringTrimLeft$0",
        "code": [
            {
                "label": "StringTrimLeft(string& string_var)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [in][out]  Строка, которая должна быть обрезана слева."
            ],
            "en": [
                "string_var  [in][out]  String that will be cut from the left."
            ]
        },
        "description": {
            "ru": "(int) Удаляет символы перевода каретки, пробелы и символы табуляции с начала строки до первого значимого символа. Строка модифицируется по месту.",
            "en": "(int) The function cuts line feed characters, spaces and tabs in the left part of the string till the first meaningful symbol. The string is modified at place."
        }
    },
    "StringTrimRight": {
        "group": 2,
        "label": "StringTrimRight",
        "body": "StringTrimRight$0",
        "code": [
            {
                "label": "StringTrimRight(string& string_var)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "string_var  [in][out]  Строка, которая должна быть обрезана справа."
            ],
            "en": [
                "string_var  [in][out]  String that will be cut from the right."
            ]
        },
        "description": {
            "ru": "(int) Удаляет символы перевода каретки, пробелы и символы табуляции от последнего значимого символа до конца строки. Строка модифицируется по месту.",
            "en": "(int) The function cuts line feed characters, spaces and tabs in the right part of the string after the last meaningful symbol. The string is modified at place."
        }
    },
    "StructToTime": {
        "group": 2,
        "label": "StructToTime",
        "body": "StructToTime$0",
        "code": [
            {
                "label": "StructToTime(MqlDateTime& dt_struct)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "dt_struct  [in]  Переменная структуры типа MqlDateTime."
            ],
            "en": [
                "dt_struct  [in] Variable of structure type MqlDateTime."
            ]
        },
        "description": {
            "ru": "(datetime) Производит конвертацию из переменной типа структуры MqlDateTime в значение типа datetime и возвращает полученное значение.",
            "en": "(datetime) Converts a structure variable MqlDateTime into a value of datetime type and returns the resulting value."
        }
    },
    "Symbol": {
        "group": 2,
        "label": "Symbol",
        "body": "Symbol($0)",
        "code": [
            {
                "label": "Symbol()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(string) Возвращает имя символа текущего графика.",
            "en": "(string) Returns the name of a symbol of the current chart."
        }
    },
    "SymbolInfoDouble": {
        "group": 2,
        "label": "SymbolInfoDouble",
        "body": "SymbolInfoDouble$0",
        "code": [
            {
                "label": "SymbolInfoDouble(string name, ENUM_SYMBOL_INFO_DOUBLE prop_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "SymbolInfoDouble(string name, ENUM_SYMBOL_INFO_DOUBLE prop_id, double& double_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false depending on whether a function is successfully performed. In case of success, the value of the property is placed into a recipient variable, passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя символа.",
                "prop_id  [in]  Идентификатор свойства символа. Значение может быть одним из значений перечисления ENUM_SYMBOL_INFO_DOUBLE.",
                "double_var  [out]  Переменная типа double, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "name  [in] Symbol name.",
                "prop_id  [in] Identifier of a symbol property. The value can be one of the values of the ENUM_SYMBOL_INFO_DOUBLE enumeration.",
                "double_var  [out] Variable of double type receiving the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает соответствующее свойство указанного символа. Существует 2 варианта функции.",
            "en": "(bool) Returns the corresponding property of a specified symbol. There are 2 variants of the function."
        }
    },
    "SymbolInfoInteger": {
        "group": 2,
        "label": "SymbolInfoInteger",
        "body": "SymbolInfoInteger$0",
        "code": [
            {
                "label": "SymbolInfoInteger(string name, ENUM_SYMBOL_INFO_INTEGER prop_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "SymbolInfoInteger(string name, ENUM_SYMBOL_INFO_INTEGER prop_id, long& long_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции.  В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false depending on whether a function is successfully performed. In case of success, the value of the property is placed into a recipient variable, passed by reference by the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя символа.",
                "prop_id  [in]  Идентификатор свойства символа. Значение может быть одним из значений перечисления ENUM_SYMBOL_INFO_INTEGER.",
                "long_var  [out]  Переменная типа long, принимающая  значение запрашиваемого свойства."
            ],
            "en": [
                "name  [in] Symbol name.",
                "prop_id  [in] Identifier of a symbol property. The value can be one of the values of the ENUM_SYMBOL_INFO_INTEGER enumeration.",
                "long_var  [out] Variable of the long type receiving the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает соответствующее свойство указанного символа. Существует 2 варианта функции.",
            "en": "(bool) Returns the corresponding property of a specified symbol. There are 2 variants of the function."
        }
    },
    "SymbolInfoMarginRate": {
        "group": 2,
        "label": "SymbolInfoMarginRate",
        "body": "SymbolInfoMarginRate$0",
        "code": [
            {
                "label": "SymbolInfoMarginRate(string name, ENUM_ORDER_TYPE order_type, double& initial_margin_rate, double& maintenance_margin_rate)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя символа.",
                "order_type  [in]  Тип ордера.",
                "initial_margin_rate  [in] Переменная типа double для получения коэффициента взимания начальной маржи. Начальная маржа – это размер гарантийной суммы под совершение сделки объемом в 1 лот соответствующего направления. Умножая коэффициент на начальную маржу, мы можем получить размер средств, который будет зарезервирован на счете при размещении ордера указанного типа.",
                "maintenance_margin_rate  [out] Переменная типа double для получения коэффициента взимания поддерживающей маржи. Поддерживающая маржа – это размер минимальной суммы для поддержания открытой позиции объемом в 1 лот соответствующего направления. Умножая коэффициент на поддерживающую маржу, мы можем получить размер средств, который будет зарезервирован на счете после срабатывания ордера указанного типа."
            ],
            "en": [
                "name  [in] Symbol name.",
                "order_type  [in] Order type.",
                "initial_margin_rate  [in] A double type variable for receiving an initial margin rate. Initial margin is a security deposit for 1 lot deal in the appropriate direction. Multiplying the rate by the initial margin, we receive the amount of funds to be reserved on the account when placing an order of the specified type.",
                "maintenance_margin_rate  [out] A double type variable for receiving a maintenance margin rate. Maintenance margin is a minimum amount for maintaining an open position of 1 lot in the appropriate direction. Multiplying the rate by the maintenance margin, we receive the amount of funds to be reserved on the account after an order of the specified type is activated."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает коэффициенты взимания маржи в зависимости от типа и направления ордера.",
            "en": "(bool) Returns the margin rates depending on the order type and direction."
        }
    },
    "SymbolInfoSessionQuote": {
        "group": 2,
        "label": "SymbolInfoSessionQuote",
        "body": "SymbolInfoSessionQuote$0",
        "code": [
            {
                "label": "SymbolInfoSessionQuote(string name, ENUM_DAY_OF_WEEK day_of_week, uint session_index, datetime& from, datetime& to)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя символа.",
                "day_of_week  [in]  День недели, значение из перечисления ENUM_DAY_OF_WEEK.",
                "session_index  [in]  Порядковый номер сессии, для которой нужно получить время начала и время окончания. Индексация сессий начинается с 0.",
                "from  [out]  Время начала сессии в секундах от 00 часов 00 минут, в полученном значении дату следует игнорировать.",
                "to  [out]  Время окончания сессии  в секундах от 00 часов 00 минут, в полученном значении дату следует игнорировать."
            ],
            "en": [
                "name  [in]  Symbol name.",
                "day_of_week  [in]  Day of the week, value of enumeration ENUM_DAY_OF_WEEK.",
                "session_index  [in]  Ordinal number of a session, whose beginning and end time we want to receive. Indexing of sessions starts with 0.",
                "from  [out]  Session beginning time in seconds from 00 hours 00 minutes, in the returned value date should be ignored.",
                "to  [out]  Session end time in seconds from 00 hours 00 minutes, in the returned value date should be ignored."
            ]
        },
        "description": {
            "ru": "(bool) Позволяет получить время начала и время окончания  указанной котировочной сессии для указанных символа и дня недели.",
            "en": "(bool) Allows receiving time of beginning and end of the specified quoting sessions for a specified symbol and day of week."
        }
    },
    "SymbolInfoSessionTrade": {
        "group": 2,
        "label": "SymbolInfoSessionTrade",
        "body": "SymbolInfoSessionTrade$0",
        "code": [
            {
                "label": "SymbolInfoSessionTrade(string name, ENUM_DAY_OF_WEEK day_of_week, uint session_index, datetime& from, datetime& to)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя символа.",
                "day_of_week  [in]  День недели, значение из перечисления ENUM_DAY_OF_WEEK.",
                "session_index  [in]  Порядковый номер сессии, для которой нужно получить время начала и время окончания. Индексация сессий начинается с 0.",
                "from  [out]  Время начала сессии в секундах от 00 часов 00 минут, в полученном значении дату следует игнорировать.",
                "to  [out]  Время окончания сессии  в секундах от 00 часов 00 минут, в полученном значении дату следует игнорировать."
            ],
            "en": [
                "name  [in]  Symbol name.",
                "day_of_week  [in]  Day of the week, value of enumeration ENUM_DAY_OF_WEEK.",
                "session_index  [in]  Ordinal number of a session, whose beginning and end time we want to receive. Indexing of sessions starts with 0.",
                "from  [out]  Session beginning time in seconds from 00 hours 00 minutes, in the returned value date should be ignored.",
                "to  [out]  Session end time in seconds from 00 hours 00 minutes, in the returned value date should be ignored."
            ]
        },
        "description": {
            "ru": "(bool) Позволяет получить время начала и время окончания  указанной торговой сессии для указанных символа и дня недели.",
            "en": "(bool) Allows receiving time of beginning and end of the specified trading sessions for a specified symbol and day of week."
        }
    },
    "SymbolInfoString": {
        "group": 2,
        "label": "SymbolInfoString",
        "body": "SymbolInfoString$0",
        "code": [
            {
                "label": "SymbolInfoString(string name, ENUM_SYMBOL_INFO_STRING prop_id)",
                "description": {
                    "ru": "1. Непосредственно возвращает значение свойства.",
                    "en": "1. Immediately returns the property value."
                }
            },
            {
                "label": "SymbolInfoString(string name, ENUM_SYMBOL_INFO_STRING prop_id, string& string_var)",
                "description": {
                    "ru": "2. Возвращает true или false в зависимости от успешности выполнения функции. В случае успеха значение свойства помещается в приемную переменную, передаваемую по ссылке последним параметром.",
                    "en": "2. Returns true or false, depending on the success of a function. If successful, the value of the property is placed in a placeholder variable passed by reference in the last parameter."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя символа.",
                "prop_id  [in]  Идентификатор свойства символа. Значение может быть одним из значений перечисления ENUM_SYMBOL_INFO_STRING.",
                "string_var  [out]  Переменная типа string, принимающая  значение запрашиваемого свойства. В случае неудачного выполнения информацию об ошибке можно получить с помощью функции GetLastError():"
            ],
            "en": [
                "name  [in] Symbol name.",
                "prop_id  [in] Identifier of a symbol property. The value can be one of the values of the ENUM_SYMBOL_INFO_STRING enumeration.",
                "string_var  [out] Variable of the string type receiving the value of the requested property."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает соответствующее свойство указанного символа. Существует 2 варианта функции.",
            "en": "(bool) Returns the corresponding property of a specified symbol. There are 2 variants of the function."
        }
    },
    "SymbolInfoTick": {
        "group": 2,
        "label": "SymbolInfoTick",
        "body": "SymbolInfoTick$0",
        "code": [
            {
                "label": "SymbolInfoTick(string symbol, MqlTick& tick)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "symbol  [in]  Имя символа.",
                "tick  [out]  Ссылка на структуру типа MqlTick, в которую будут помещены текущие цены и время последнего обновления цен."
            ],
            "en": [
                "symbol  [in]  Symbol name.",
                "tick  [out]  Link to the structure of the MqlTick type, to which the current prices and time of the last price update will be placed."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает текущие цены  для указанного символа в переменной типа MqlTick.",
            "en": "(bool) The function returns current prices of a specified symbol in a variable of the MqlTick type."
        }
    },
    "SymbolIsSynchronized": {
        "group": 2,
        "label": "SymbolIsSynchronized",
        "body": "SymbolIsSynchronized$0",
        "code": [
            {
                "label": "SymbolIsSynchronized(string name)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя символа."
            ],
            "en": [
                "name  [in]  Symbol name."
            ]
        },
        "description": {
            "ru": "(bool) Проверяет факт синхронизированности данных по указанному символу в терминале с данными на торговом сервере",
            "en": "(bool) The function checks whether data of a selected symbol in the terminal are synchronized with data on the trade server."
        }
    },
    "SymbolName": {
        "group": 2,
        "label": "SymbolName",
        "body": "SymbolName$0",
        "code": [
            {
                "label": "SymbolName(int pos, bool selected)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "pos  [in]  Номер символа по порядку.",
                "selected  [in]  Режим запроса. Если значение true, то символ берется из списка выбранных в MarketWatch. Если значение false, то символ берется из общего списка."
            ],
            "en": [
                "pos  [in] Order number of a symbol.",
                "selected  [in] Request mode. If the value is true, the symbol is taken from the list of symbols selected in MarketWatch. If the value is false, the symbol is taken from the general list."
            ]
        },
        "description": {
            "ru": "(string) Возвращает наименование указанного символа.",
            "en": "(string) Returns the name of a symbol."
        }
    },
    "SymbolSelect": {
        "group": 2,
        "label": "SymbolSelect",
        "body": "SymbolSelect$0",
        "code": [
            {
                "label": "SymbolSelect(string name, bool select)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя символа.",
                "select  [in]  Переключатель. Если значение false, то символ должен быть убран из окна MarketWatch, в противном случае символ должен быть выбран в окно MarketWatch. Символ не может быть убран, если есть открытые графики с этим символом или есть открытые позиции по этому символу."
            ],
            "en": [
                "name  [in] Symbol name.",
                "select  [in] Switch. If the value is false, a symbol should be removed from MarketWatch, otherwise a symbol should be selected in this window. A symbol can't be removed if the symbol chart is open, or there are open positions for this symbol."
            ]
        },
        "description": {
            "ru": "(bool) Выбирает символ в окне MarketWatch (Обзор рынка) или убирает символ из этого окна.",
            "en": "(bool) Selects a symbol in the Market Watch window or removes a symbol from the window."
        }
    },
    "SymbolsTotal": {
        "group": 2,
        "label": "SymbolsTotal",
        "body": "SymbolsTotal$0",
        "code": [
            {
                "label": "SymbolsTotal(bool selected)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "selected  [in]  Режим запроса. Может принимать значения true или false."
            ],
            "en": [
                "selected  [in] Request mode. Can be true or false."
            ]
        },
        "description": {
            "ru": "(int) Возвращает количество доступных (выбранных в MarketWatch или всех) символов.",
            "en": "(int) Returns the number of available (selected in Market Watch or all) symbols."
        }
    },
    "tan": {
        "group": 2,
        "label": "tan",
        "body": "tan$0",
        "code": [
            {
                "label": "tan(double rad)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "rad  [in]  Угол в радианах."
            ],
            "en": [
                "rad  [in]  Angle in radians."
            ]
        },
        "description": {
            "ru": "(double) Возвращает тангенс числа.",
            "en": "(double) The function returns a tangent of a number."
        }
    },
    "TerminalClose": {
        "group": 2,
        "label": "TerminalClose",
        "body": "TerminalClose$0",
        "code": [
            {
                "label": "TerminalClose(int ret_code)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "ret_code  [in]  Код возврата, возвращаемый процессом клиентского терминала при завершении работы."
            ],
            "en": [
                "ret_code  [in]  Return code, returned by the process of the client terminal at the operation completion."
            ]
        },
        "description": {
            "ru": "(bool) Посылает терминалу команду на завершение работы.",
            "en": "(bool) The function commands the terminal to complete operation."
        }
    },
    "TerminalInfoDouble": {
        "group": 2,
        "label": "TerminalInfoDouble",
        "body": "TerminalInfoDouble$0",
        "code": [
            {
                "label": "TerminalInfoDouble(int property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства. Может быть одним из значений перечисления ENUM_TERMINAL_INFO_DOUBLE."
            ],
            "en": [
                "property_id  [in] Identifier of a property. Can be one of the values of the ENUM_TERMINAL_INFO_DOUBLE enumeration."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение соответствующего свойства окружения mql5-программы.",
            "en": "(double) Returns the value of a corresponding property of the mql5 program environment."
        }
    },
    "TerminalInfoInteger": {
        "group": 2,
        "label": "TerminalInfoInteger",
        "body": "TerminalInfoInteger$0",
        "code": [
            {
                "label": "TerminalInfoInteger(int property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства. Может быть одним из значений перечисления ENUM_TERMINAL_INFO_INTEGER."
            ],
            "en": [
                "property_id  [in] Identifier of a property. Can be one of the values of the ENUM_TERMINAL_INFO_INTEGER enumeration."
            ]
        },
        "description": {
            "ru": "(int) Возвращает значение соответствующего свойства окружения mql5-программы.",
            "en": "(int) Returns the value of a corresponding property of the mql5 program environment."
        }
    },
    "TerminalInfoString": {
        "group": 2,
        "label": "TerminalInfoString",
        "body": "TerminalInfoString$0",
        "code": [
            {
                "label": "TerminalInfoString(int property_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "property_id  [in]  Идентификатор свойства. Может быть одним из значений перечисления ENUM_TERMINAL_INFO_STRING."
            ],
            "en": [
                "property_id  [in] Identifier of a property. Can be one of the values of the ENUM_TERMINAL_INFO_STRING enumeration."
            ]
        },
        "description": {
            "ru": "(string) Функция возвращает значение соответствующего свойства окружения mql5-программы. Свойство должно быть типа string",
            "en": "(string) Returns the value of a corresponding property of the mql5 program environment. The property must be of string type."
        }
    },
    "TesterStatistics": {
        "group": 2,
        "label": "TesterStatistics",
        "body": "TesterStatistics$0",
        "code": [
            {
                "label": "TesterStatistics(ENUM_STATISTICS statistic_id)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "statistic_id  [in]   Идентификатор статистического показателя из перечисления ENUM_STATISTICS."
            ],
            "en": [
                "statistic_id  [in]   The ID of the statistical parameter from the ENUM_STATISTICS enumeration."
            ]
        },
        "description": {
            "ru": "(double) Возвращает значение указанного статистического показателя, рассчитанного по результатам тестирования",
            "en": "(double) The function returns the value of the specified statistical parameter calculated based on testing results."
        }
    },
    "TextGetSize": {
        "group": 2,
        "label": "TextGetSize",
        "body": "TextGetSize$0",
        "code": [
            {
                "label": "TextGetSize(const string text, uint& width, uint& height)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "text  [in]  Строка для которой получаем длину и ширину.",
                "width  [out]  Входной параметр для получения ширины.",
                "height  [out]  Входной параметр для получения высоты."
            ],
            "en": [
                "text  [in]  String, for which length and width should be obtained.",
                "width  [out]  Input parameter for receiving width.",
                "height  [out]  Input parameter for receiving height."
            ]
        },
        "description": {
            "ru": "(bool) Возвращает ширину и высоту строки при текущих настройках шрифта.",
            "en": "(bool) The function returns the line width and height at the current font settings."
        }
    },
    "TextOut": {
        "group": 2,
        "label": "TextOut",
        "body": "TextOut$0",
        "code": [
            {
                "label": "TextOut(const string text, int x, int y, uint anchor, uint & data[], uint width, uint height, uint color, ENUM_COLOR_FORMAT color_format)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "text  [in]  Выводимый текст, который будет записан в буфер. Осуществляется только однострочный вывод текста.",
                "x  [in]  Координата X точки привязки для выводимого текста.",
                "y  [in]  Координата Y точки привязки для выводимого текста.",
                "anchor  [in]  Значение из набора 9 предопределенных способов расположения точки привязки  выводимого текста. Задаётся комбинацией двух флагов – флага выравнивания текста по горизонтали и флага выравнивания текста по вертикали. Наименования флагов приведены в Примечании.",
                "data[]  [in]  Буфер, в который выводится текст. Данный буфер используется для создания графического ресурса.",
                "width  [in]  Ширина буфера в точках (пикселях).",
                "height  [in]  Высота буфера в точках (пикселях).",
                "color  [in]  Цвет текста.",
                "color_format  [in]  Формат цвета, задаётся значением из перечисления ENUM_COLOR_FORMAT."
            ],
            "en": [
                "text  [in]  Displayed text that will be written to the buffer. Only one-lined text is displayed.",
                "x  [in]  X coordinate of the anchor point of the displayed text.",
                "y  [in]  Y coordinate of the anchor point of the displayed text.",
                "anchor  [in]  The value out of the 9 pre-defined methods of the displayed text's anchor point location. The value is set by a combination of two flags – flags of horizontal and vertical text align. Flag names are listed in the Note below.",
                "data[]  [in]  Buffer, in which text is displayed. The buffer is used to create the graphical resource.",
                "width  [in]  Buffer width in pixels.",
                "height  [in]  Buffer height in pixels.",
                "color  [in]  Text color.",
                "color_format  [in]  Color format is set by ENUM_COLOR_FORMAT enumeration value."
            ]
        },
        "description": {
            "ru": "(bool) Выводит текст в пользовательский массив (буфер) и возвращает результат успешности этой операции. Данный массив предназначается для создания графического ресурса.",
            "en": "(bool) The function displays a text in a custom array (buffer) and returns the result of that operation. The array is designed to create the graphical resource."
        }
    },
    "TextSetFont": {
        "group": 2,
        "label": "TextSetFont",
        "body": "TextSetFont$0",
        "code": [
            {
                "label": "TextSetFont(const string name, int size, uint flags, int orientation)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "name  [in]  Имя шрифта в системе, или имя ресурса, содержащего шрифт, или путь к файлу шрифта на диске.",
                "size  [in]  Размер шрифта, который может задаваться положительными и отрицательными значениями. При положительных значениях размер выводимого текста не зависит от настроек размеров шрифтов в операционной системе. При отрицательных значениях значение задается в десятых долях пункта и размер текста будет зависеть от настроек системы (\"стандартный масштаб\" или \"крупный масштаб\"). Более подробно о разнице в режимах смотрите в Примечании.",
                "flags  [in]  Комбинация флагов, описывающих стиль шрифт.",
                "orientation  [in]  Угол наклона текста по горизонтали к оси X, единица измерения равна 0.1 градуса. То есть orientation=450 означает наклон в 45 градусов."
            ],
            "en": [
                "name  [in]  Font name in the system or the name of the resource containing the font or the path to font file on the disk.",
                "size  [in]  The font size that can be set using positive and negative values. In case of positive values, the size of a displayed text does not depend on the operating system's font size settings. In case of negative values, the value is set in tenths of a point and the text size depends on the operating system settings (\"standard scale\" or \"large scale\"). See the Note below for more information about the differences between the modes.",
                "flags  [in]  Combination of flags describing font style.",
                "orientation  [in]  Text's horizontal inclination to X axis, the unit of measurement is 0.1 degrees. It means that orientation=450 stands for inclination equal to 45 degrees."
            ]
        },
        "description": {
            "ru": "(bool) Устанавливает шрифт для вывода текста методами рисования и возвращает результат успешности этой операции. По умолчанию используется шрифт Arial и размер -120 (12 pt).",
            "en": "(bool) The function sets the font for displaying the text using drawing methods and returns the result of that operation. Arial font with the size -120 (12 pt) is used by default."
        }
    },
    "TimeCurrent": {
        "group": 2,
        "label": "TimeCurrent",
        "body": "TimeCurrent$0",
        "code": [
            {
                "label": "TimeCurrent()",
                "description": {
                    "ru": "Вызов без параметров",
                    "en": "Call without parameters"
                }
            },
            {
                "label": "TimeCurrent(MqlDateTime& dt_struct)",
                "description": {
                    "ru": "Вызов с параметром типа MqlDateTime",
                    "en": "Call with MqlDateTime type parameter"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "dt_struct  [out]  Переменная типа структуры MqlDateTime."
            ],
            "en": [
                "dt_struct  [out]  MqlDateTime structure type variable."
            ]
        },
        "description": {
            "ru": "(datetime) Возвращает последнее известное время сервера, время прихода последней котировки по одному из выбранных в \"Обзоре рынка\" символов. В обработчике OnTick() данная функция вернет время пришедшего обрабатываемого тика. В других случаях (например, вызов в обработчиках OnInit(), OnDeinit(), OnTimer() и так далее) это – время прихода последней котировки по любому символу, доступного в окне \"Обзор рынка\", то самое время, которое показано в заголовке этого окна. Значение времени формируется на торговом сервере и не зависит от настроек времени на компьютере пользователя. Существует 2 варианта функции.",
            "en": "(datetime) Returns the last known server time, time of the last quote receipt for one of the symbols selected in the \"Market Watch\" window. In the OnTick() handler, this function returns the time of the received handled tick. In other cases (for example, call in handlers OnInit(), OnDeinit(), OnTimer() and so on) this is the time of the last quote receipt for any symbol available in the \"Market Watch\" window, the time shown in the title of this window. The time value is formed on a trade server and does not depend on the time settings on your computer. There are 2 variants of the function."
        }
    },
    "TimeDaylightSavings": {
        "group": 2,
        "label": "TimeDaylightSavings",
        "body": "TimeDaylightSavings($0)",
        "code": [
            {
                "label": "TimeDaylightSavings()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает поправку на летнее время в секундах, если был произведен переход на летнее время. Зависит от настроек времени на компьютере пользователя.",
            "en": "(int) Returns correction for daylight saving time in seconds, if the switch to summer time has been made. It depends on the time settings of your computer."
        }
    },
    "TimeGMT": {
        "group": 2,
        "label": "TimeGMT",
        "body": "TimeGMT$0",
        "code": [
            {
                "label": "TimeGMT()",
                "description": {
                    "ru": "Вызов без параметров",
                    "en": "Call without parameters"
                }
            },
            {
                "label": "TimeGMT(MqlDateTime& dt_struct)",
                "description": {
                    "ru": "Вызов с параметром типа MqlDateTime",
                    "en": "Call with MqlDateTime type parameter"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "dt_struct  [out]  Переменная типа структуры MqlDateTime."
            ],
            "en": [
                "dt_struct  [out]  Variable of structure type MqlDateTime."
            ]
        },
        "description": {
            "ru": "(datetime) Возвращает время GMT, которое вычисляется с учётом перехода на зимнее или летнее время по локальному времени компьютера, на котором запущен клиентский терминал. Существует 2 варианта функции.",
            "en": "(datetime) Returns the GMT, which is calculated taking into account the DST switch by the local time on the computer where the client terminal is running. There are 2 variants of the function."
        }
    },
    "TimeGMTOffset": {
        "group": 2,
        "label": "TimeGMTOffset",
        "body": "TimeGMTOffset($0)",
        "code": [
            {
                "label": "TimeGMTOffset()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает текущую разницу между временем GMT и локальным временем компьютера в секундах с учетом перехода на зимнее или летнее время. Зависит от настроек времени на компьютере пользователя.",
            "en": "(int) Returns the current difference between GMT time and the local computer time in seconds, taking into account switch to winter or summer time. Depends on the time settings of your computer."
        }
    },
    "TimeLocal": {
        "group": 2,
        "label": "TimeLocal",
        "body": "TimeLocal$0",
        "code": [
            {
                "label": "TimeLocal()",
                "description": {
                    "ru": "Вызов без параметров",
                    "en": "Call without parameters"
                }
            },
            {
                "label": "TimeLocal(MqlDateTime& dt_struct)",
                "description": {
                    "ru": "Вызов с параметром типа MqlDateTime",
                    "en": "Call with MqlDateTime type parameter"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "dt_struct  [out]  Переменная типа структуры MqlDateTime."
            ],
            "en": [
                "dt_struct  [out]  Variable of structure type MqlDateTime."
            ]
        },
        "description": {
            "ru": "(datetime) Возвращает локальное время компьютера, на котором запущен клиентский терминал. Существует 2 варианта функции.",
            "en": "(datetime) Returns the local time of a computer, where the client terminal is running. There are 2 variants of the function."
        }
    },
    "TimeToString": {
        "group": 2,
        "label": "TimeToString",
        "body": "TimeToString$0",
        "code": [
            {
                "label": "TimeToString(datetime value, int mode)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "value  [in]  Время в секундах от 00:00 1 января 1970.",
                "mode  [in]  Дополнительный режим вывода данных. Может быть одним или комбинированным флагом:  TIME_DATE получает результат в форме \" yyyy.mm.dd \" ,  TIME_MINUTES получает результат в форме \" hh:mi \" ,  TIME_SECONDS получает результат в форме \" hh:mi:ss \"."
            ],
            "en": [
                "value  [in]  Time in seconds from 00:00 1970/01/01.",
                "mode  [in] Additional data input mode. Can be one or combined flag:  TIME_DATE gets result as \"yyyy.mm.dd\",  TIME_MINUTES gets result as \"hh:mi\",  TIME_SECONDS gets results as \"hh:mi:ss\"."
            ]
        },
        "description": {
            "ru": "(string) Преобразование значения, содержащего время в секундах, прошедшее с 01.01.1970, в строку формата \"yyyy.mm.dd hh:mi\".",
            "en": "(string) Converting a value containing time in seconds elapsed since 01.01.1970 into a string of \"yyyy.mm.dd hh:mi\" format."
        }
    },
    "TimeToStruct": {
        "group": 2,
        "label": "TimeToStruct",
        "body": "TimeToStruct$0",
        "code": [
            {
                "label": "TimeToStruct(datetime dt, MqlDateTime& dt_struct)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "dt  [in]  Значение даты для конвертации.",
                "dt_struct  [out]  Переменная структуры типа MqlDateTime."
            ],
            "en": [
                "dt  [in]  Date value to convert.",
                "dt_struct  [out]  Variable of structure type MqlDateTime."
            ]
        },
        "description": {
            "ru": "(bool) Производит конвертацию из значения типа datetime (количество секунд с 01.01.1970) в переменную типа структуры MqlDateTime.",
            "en": "(bool) Converts a value of datetime type (number of seconds since 01.01.1970) into a structure variable MqlDateTime."
        }
    },
    "TimeTradeServer": {
        "group": 2,
        "label": "TimeTradeServer",
        "body": "TimeTradeServer$0",
        "code": [
            {
                "label": "TimeTradeServer()",
                "description": {
                    "ru": "Вызов без параметров",
                    "en": "Call without parameters"
                }
            },
            {
                "label": "TimeTradeServer(MqlDateTime& dt_struct)",
                "description": {
                    "ru": "Вызов с параметром типа MqlDateTime",
                    "en": "Call with MqlDateTime type parameter"
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "dt_struct  [out]  Переменная типа структуры MqlDateTime."
            ],
            "en": [
                "dt_struct  [out]  Variable of structure type MqlDateTime."
            ]
        },
        "description": {
            "ru": "(datetime) Возвращает расчетное текущее время торгового сервера. В отличие от функции TimeCurrent(), расчет значения времени производится в клиентском терминале и зависит от настроек времени на компьютере пользователя. Существует 2 варианта функции.",
            "en": "(datetime) Returns the calculated current time of the trade server. Unlike TimeCurrent(), the calculation of the time value is performed in the client terminal and depends on the time settings on your computer. There are 2 variants of the function."
        }
    },
    "UninitializeReason": {
        "group": 2,
        "label": "UninitializeReason",
        "body": "UninitializeReason($0)",
        "code": [
            {
                "label": "UninitializeReason()",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(int) Возвращает код причины деинициализации.",
            "en": "(int) Returns the code of a reason for deinitialization."
        }
    },
    "WebRequest": {
        "group": 2,
        "label": "WebRequest",
        "body": "WebRequest$0",
        "code": [
            {
                "label": "WebRequest(const string method, const string url, const string cookie, const string referer, int timeout, const char & data[], int data_size, char & result[], string & result_headers)",
                "description": {
                    "ru": "1.Для отправки простых запросов вида \"ключ=значение\" с использованием заголовка Content-Type: application/x-www-form-urlencoded.",
                    "en": "1.Sending simple requestsof type \"key=value\" using the header Content-Type: application/x-www-form-urlencoded."
                }
            },
            {
                "label": "WebRequest(const string method, const string url, const string headers, int timeout, const char & data[], char & result[], string & result_headers)",
                "description": {
                    "ru": "2.Для отправки запросов произвольного типа с указанием собственного набора заголовков для более гибкого взаимодействия с различными Web-сервисами.",
                    "en": "2.Sending a request of any typespecifying the customset of headers for a more flexible interaction with various Web services."
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "method  [in]  Метод HTTP.",
                "url  [in]  URL-адрес.",
                "headers  [in]  Заголовки запроса вида \"ключ: значение\", разделенные переносом строки \"\\r\\n\".",
                "cookie  [in]  Значение Cookie.",
                "referer  [in]  Значение заголовка Referer HTTP-запроса.",
                "timeout  [in]  Таймаут в миллисекундах.",
                "data[]  [in]  Массив данных тела HTTP-сообщения.",
                "data_size  [in]  Размер массива data[].",
                "result[]  [out]  Массив с данными ответа сервера.",
                "result_headers  [out] Заголовки ответа сервера."
            ],
            "en": [
                "method  [in]  HTTP method.",
                "url  [in]  URL.",
                "headers  [in]  Request headers of type \"key: value\", separated by a line break \"\\r\\n\".",
                "cookie  [in]  Cookie value.",
                "referer  [in]  Value of the Referer header of the HTTP request.",
                "timeout  [in]  Timeout in milliseconds.",
                "data[]  [in]  Data array of the HTTP message body.",
                "data_size  [in]  Size of the data[] array.",
                "result[]  [out]  An array containing server response data.",
                "result_headers  [out] Server response headers."
            ]
        },
        "description": {
            "ru": "(int) Отправляет HTTP-запрос на указанный сервер. Существует два варианта функции:",
            "en": "(int) The function sends an HTTP request to a specified server. The function has two versions:"
        }
    },
    "ZeroMemory": {
        "group": 2,
        "label": "ZeroMemory",
        "body": "ZeroMemory$0",
        "code": [
            {
                "label": "ZeroMemory(void & variable)",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [
                "variable  [in] [out] Переменная, передаваемая по ссылке, которую требуется обнулить (инициализировать нулевыми значениями)."
            ],
            "en": [
                "variable  [in] [out]  Variable passed by reference, you want to reset (initialize by zero values)."
            ]
        },
        "description": {
            "ru": "(void) Функция обнуляет переменную, переданную ей по ссылке.",
            "en": "(void) The function resets a variable passed to it by reference."
        }
    },
    "clrAliceBlue": {
        "group": 15,
        "label": "clrAliceBlue",
        "body": "clrAliceBlue",
        "code": [
            {
                "label": "clrAliceBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет AliceBlue",
            "en": "(color) Web color AliceBlue"
        }
    },
    "clrAntiqueWhite": {
        "group": 15,
        "label": "clrAntiqueWhite",
        "body": "clrAntiqueWhite",
        "code": [
            {
                "label": "clrAntiqueWhite",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет AntiqueWhite",
            "en": "(color) Web color AntiqueWhite"
        }
    },
    "clrAqua": {
        "group": 15,
        "label": "clrAqua",
        "body": "clrAqua",
        "code": [
            {
                "label": "clrAqua",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Aqua",
            "en": "(color) Web color Aqua"
        }
    },
    "clrAquamarine": {
        "group": 15,
        "label": "clrAquamarine",
        "body": "clrAquamarine",
        "code": [
            {
                "label": "clrAquamarine",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Aquamarine",
            "en": "(color) Web color Aquamarine"
        }
    },
    "clrAzure": {
        "group": 15,
        "label": "clrAzure",
        "body": "clrAzure",
        "code": [
            {
                "label": "clrAzure",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Azure",
            "en": "(color) Web color Azure"
        }
    },
    "clrBeige": {
        "group": 15,
        "label": "clrBeige",
        "body": "clrBeige",
        "code": [
            {
                "label": "clrBeige",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Beige",
            "en": "(color) Web color Beige"
        }
    },
    "clrBisque": {
        "group": 15,
        "label": "clrBisque",
        "body": "clrBisque",
        "code": [
            {
                "label": "clrBisque",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Bisque",
            "en": "(color) Web color Bisque"
        }
    },
    "clrBlack": {
        "group": 15,
        "label": "clrBlack",
        "body": "clrBlack",
        "code": [
            {
                "label": "clrBlack",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Black",
            "en": "(color) Web color Black"
        }
    },
    "clrBlanchedAlmond": {
        "group": 15,
        "label": "clrBlanchedAlmond",
        "body": "clrBlanchedAlmond",
        "code": [
            {
                "label": "clrBlanchedAlmond",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет BlanchedAlmond",
            "en": "(color) Web color BlanchedAlmond"
        }
    },
    "clrBlue": {
        "group": 15,
        "label": "clrBlue",
        "body": "clrBlue",
        "code": [
            {
                "label": "clrBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Blue",
            "en": "(color) Web color Blue"
        }
    },
    "clrBlueViolet": {
        "group": 15,
        "label": "clrBlueViolet",
        "body": "clrBlueViolet",
        "code": [
            {
                "label": "clrBlueViolet",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет BlueViolet",
            "en": "(color) Web color BlueViolet"
        }
    },
    "clrBrown": {
        "group": 15,
        "label": "clrBrown",
        "body": "clrBrown",
        "code": [
            {
                "label": "clrBrown",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Brown",
            "en": "(color) Web color Brown"
        }
    },
    "clrBurlyWood": {
        "group": 15,
        "label": "clrBurlyWood",
        "body": "clrBurlyWood",
        "code": [
            {
                "label": "clrBurlyWood",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет BurlyWood",
            "en": "(color) Web color BurlyWood"
        }
    },
    "clrCadetBlue": {
        "group": 15,
        "label": "clrCadetBlue",
        "body": "clrCadetBlue",
        "code": [
            {
                "label": "clrCadetBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет CadetBlue",
            "en": "(color) Web color CadetBlue"
        }
    },
    "clrChartreuse": {
        "group": 15,
        "label": "clrChartreuse",
        "body": "clrChartreuse",
        "code": [
            {
                "label": "clrChartreuse",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Chartreuse",
            "en": "(color) Web color Chartreuse"
        }
    },
    "clrChocolate": {
        "group": 15,
        "label": "clrChocolate",
        "body": "clrChocolate",
        "code": [
            {
                "label": "clrChocolate",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Chocolate",
            "en": "(color) Web color Chocolate"
        }
    },
    "clrCoral": {
        "group": 15,
        "label": "clrCoral",
        "body": "clrCoral",
        "code": [
            {
                "label": "clrCoral",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Coral",
            "en": "(color) Web color Coral"
        }
    },
    "clrCornflowerBlue": {
        "group": 15,
        "label": "clrCornflowerBlue",
        "body": "clrCornflowerBlue",
        "code": [
            {
                "label": "clrCornflowerBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет CornflowerBlue",
            "en": "(color) Web color CornflowerBlue"
        }
    },
    "clrCornsilk": {
        "group": 15,
        "label": "clrCornsilk",
        "body": "clrCornsilk",
        "code": [
            {
                "label": "clrCornsilk",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Cornsilk",
            "en": "(color) Web color Cornsilk"
        }
    },
    "clrCrimson": {
        "group": 15,
        "label": "clrCrimson",
        "body": "clrCrimson",
        "code": [
            {
                "label": "clrCrimson",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Crimson",
            "en": "(color) Web color Crimson"
        }
    },
    "clrCyan": {
        "group": 15,
        "label": "clrCyan",
        "body": "clrCyan",
        "code": [
            {
                "label": "clrCyan",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Cyan",
            "en": "(color) Web color Cyan"
        }
    },
    "clrDarkBlue": {
        "group": 15,
        "label": "clrDarkBlue",
        "body": "clrDarkBlue",
        "code": [
            {
                "label": "clrDarkBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkBlue",
            "en": "(color) Web color DarkBlue"
        }
    },
    "clrDarkCyan": {
        "group": 15,
        "label": "clrDarkCyan",
        "body": "clrDarkCyan",
        "code": [
            {
                "label": "clrDarkCyan",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkCyan",
            "en": "(color) Web color DarkCyan"
        }
    },
    "clrDarkGoldenrod": {
        "group": 15,
        "label": "clrDarkGoldenrod",
        "body": "clrDarkGoldenrod",
        "code": [
            {
                "label": "clrDarkGoldenrod",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkGoldenrod",
            "en": "(color) Web color DarkGoldenrod"
        }
    },
    "clrDarkGray": {
        "group": 15,
        "label": "clrDarkGray",
        "body": "clrDarkGray",
        "code": [
            {
                "label": "clrDarkGray",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkGray",
            "en": "(color) Web color DarkGray"
        }
    },
    "clrDarkGreen": {
        "group": 15,
        "label": "clrDarkGreen",
        "body": "clrDarkGreen",
        "code": [
            {
                "label": "clrDarkGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkGreen",
            "en": "(color) Web color DarkGreen"
        }
    },
    "clrDarkKhaki": {
        "group": 15,
        "label": "clrDarkKhaki",
        "body": "clrDarkKhaki",
        "code": [
            {
                "label": "clrDarkKhaki",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkKhaki",
            "en": "(color) Web color DarkKhaki"
        }
    },
    "clrDarkMagenta": {
        "group": 15,
        "label": "clrDarkMagenta",
        "body": "clrDarkMagenta",
        "code": [
            {
                "label": "clrDarkMagenta",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkMagenta",
            "en": "(color) Web color DarkMagenta"
        }
    },
    "clrDarkOliveGreen": {
        "group": 15,
        "label": "clrDarkOliveGreen",
        "body": "clrDarkOliveGreen",
        "code": [
            {
                "label": "clrDarkOliveGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkOliveGreen",
            "en": "(color) Web color DarkOliveGreen"
        }
    },
    "clrDarkOrange": {
        "group": 15,
        "label": "clrDarkOrange",
        "body": "clrDarkOrange",
        "code": [
            {
                "label": "clrDarkOrange",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkOrange",
            "en": "(color) Web color DarkOrange"
        }
    },
    "clrDarkOrchid": {
        "group": 15,
        "label": "clrDarkOrchid",
        "body": "clrDarkOrchid",
        "code": [
            {
                "label": "clrDarkOrchid",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkOrchid",
            "en": "(color) Web color DarkOrchid"
        }
    },
    "clrDarkRed": {
        "group": 15,
        "label": "clrDarkRed",
        "body": "clrDarkRed",
        "code": [
            {
                "label": "clrDarkRed",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkRed",
            "en": "(color) Web color DarkRed"
        }
    },
    "clrDarkSalmon": {
        "group": 15,
        "label": "clrDarkSalmon",
        "body": "clrDarkSalmon",
        "code": [
            {
                "label": "clrDarkSalmon",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkSalmon",
            "en": "(color) Web color DarkSalmon"
        }
    },
    "clrDarkSeaGreen": {
        "group": 15,
        "label": "clrDarkSeaGreen",
        "body": "clrDarkSeaGreen",
        "code": [
            {
                "label": "clrDarkSeaGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkSeaGreen",
            "en": "(color) Web color DarkSeaGreen"
        }
    },
    "clrDarkSlateBlue": {
        "group": 15,
        "label": "clrDarkSlateBlue",
        "body": "clrDarkSlateBlue",
        "code": [
            {
                "label": "clrDarkSlateBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkSlateBlue",
            "en": "(color) Web color DarkSlateBlue"
        }
    },
    "clrDarkSlateGray": {
        "group": 15,
        "label": "clrDarkSlateGray",
        "body": "clrDarkSlateGray",
        "code": [
            {
                "label": "clrDarkSlateGray",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkSlateGray",
            "en": "(color) Web color DarkSlateGray"
        }
    },
    "clrDarkTurquoise": {
        "group": 15,
        "label": "clrDarkTurquoise",
        "body": "clrDarkTurquoise",
        "code": [
            {
                "label": "clrDarkTurquoise",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkTurquoise",
            "en": "(color) Web color DarkTurquoise"
        }
    },
    "clrDarkViolet": {
        "group": 15,
        "label": "clrDarkViolet",
        "body": "clrDarkViolet",
        "code": [
            {
                "label": "clrDarkViolet",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DarkViolet",
            "en": "(color) Web color DarkViolet"
        }
    },
    "clrDeepPink": {
        "group": 15,
        "label": "clrDeepPink",
        "body": "clrDeepPink",
        "code": [
            {
                "label": "clrDeepPink",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DeepPink",
            "en": "(color) Web color DeepPink"
        }
    },
    "clrDeepSkyBlue": {
        "group": 15,
        "label": "clrDeepSkyBlue",
        "body": "clrDeepSkyBlue",
        "code": [
            {
                "label": "clrDeepSkyBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DeepSkyBlue",
            "en": "(color) Web color DeepSkyBlue"
        }
    },
    "clrDimGray": {
        "group": 15,
        "label": "clrDimGray",
        "body": "clrDimGray",
        "code": [
            {
                "label": "clrDimGray",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DimGray",
            "en": "(color) Web color DimGray"
        }
    },
    "clrDodgerBlue": {
        "group": 15,
        "label": "clrDodgerBlue",
        "body": "clrDodgerBlue",
        "code": [
            {
                "label": "clrDodgerBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет DodgerBlue",
            "en": "(color) Web color DodgerBlue"
        }
    },
    "clrFireBrick": {
        "group": 15,
        "label": "clrFireBrick",
        "body": "clrFireBrick",
        "code": [
            {
                "label": "clrFireBrick",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет FireBrick",
            "en": "(color) Web color FireBrick"
        }
    },
    "clrFloralWhite": {
        "group": 15,
        "label": "clrFloralWhite",
        "body": "clrFloralWhite",
        "code": [
            {
                "label": "clrFloralWhite",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет FloralWhite",
            "en": "(color) Web color FloralWhite"
        }
    },
    "clrForestGreen": {
        "group": 15,
        "label": "clrForestGreen",
        "body": "clrForestGreen",
        "code": [
            {
                "label": "clrForestGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет ForestGreen",
            "en": "(color) Web color ForestGreen"
        }
    },
    "clrFuchsia": {
        "group": 15,
        "label": "clrFuchsia",
        "body": "clrFuchsia",
        "code": [
            {
                "label": "clrFuchsia",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Fuchsia",
            "en": "(color) Web color Fuchsia"
        }
    },
    "clrGainsboro": {
        "group": 15,
        "label": "clrGainsboro",
        "body": "clrGainsboro",
        "code": [
            {
                "label": "clrGainsboro",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Gainsboro",
            "en": "(color) Web color Gainsboro"
        }
    },
    "clrGhostWhite": {
        "group": 15,
        "label": "clrGhostWhite",
        "body": "clrGhostWhite",
        "code": [
            {
                "label": "clrGhostWhite",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет GhostWhite",
            "en": "(color) Web color GhostWhite"
        }
    },
    "clrGold": {
        "group": 15,
        "label": "clrGold",
        "body": "clrGold",
        "code": [
            {
                "label": "clrGold",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Gold",
            "en": "(color) Web color Gold"
        }
    },
    "clrGoldenrod": {
        "group": 15,
        "label": "clrGoldenrod",
        "body": "clrGoldenrod",
        "code": [
            {
                "label": "clrGoldenrod",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Goldenrod",
            "en": "(color) Web color Goldenrod"
        }
    },
    "clrGray": {
        "group": 15,
        "label": "clrGray",
        "body": "clrGray",
        "code": [
            {
                "label": "clrGray",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Gray",
            "en": "(color) Web color Gray"
        }
    },
    "clrGreen": {
        "group": 15,
        "label": "clrGreen",
        "body": "clrGreen",
        "code": [
            {
                "label": "clrGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Green",
            "en": "(color) Web color Green"
        }
    },
    "clrGreenYellow": {
        "group": 15,
        "label": "clrGreenYellow",
        "body": "clrGreenYellow",
        "code": [
            {
                "label": "clrGreenYellow",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет GreenYellow",
            "en": "(color) Web color GreenYellow"
        }
    },
    "clrHoneydew": {
        "group": 15,
        "label": "clrHoneydew",
        "body": "clrHoneydew",
        "code": [
            {
                "label": "clrHoneydew",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Honeydew",
            "en": "(color) Web color Honeydew"
        }
    },
    "clrHotPink": {
        "group": 15,
        "label": "clrHotPink",
        "body": "clrHotPink",
        "code": [
            {
                "label": "clrHotPink",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет HotPink",
            "en": "(color) Web color HotPink"
        }
    },
    "clrIndianRed": {
        "group": 15,
        "label": "clrIndianRed",
        "body": "clrIndianRed",
        "code": [
            {
                "label": "clrIndianRed",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет IndianRed",
            "en": "(color) Web color IndianRed"
        }
    },
    "clrIndigo": {
        "group": 15,
        "label": "clrIndigo",
        "body": "clrIndigo",
        "code": [
            {
                "label": "clrIndigo",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Indigo",
            "en": "(color) Web color Indigo"
        }
    },
    "clrIvory": {
        "group": 15,
        "label": "clrIvory",
        "body": "clrIvory",
        "code": [
            {
                "label": "clrIvory",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Ivory",
            "en": "(color) Web color Ivory"
        }
    },
    "clrKhaki": {
        "group": 15,
        "label": "clrKhaki",
        "body": "clrKhaki",
        "code": [
            {
                "label": "clrKhaki",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Khaki",
            "en": "(color) Web color Khaki"
        }
    },
    "clrLavender": {
        "group": 15,
        "label": "clrLavender",
        "body": "clrLavender",
        "code": [
            {
                "label": "clrLavender",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Lavender",
            "en": "(color) Web color Lavender"
        }
    },
    "clrLavenderBlush": {
        "group": 15,
        "label": "clrLavenderBlush",
        "body": "clrLavenderBlush",
        "code": [
            {
                "label": "clrLavenderBlush",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LavenderBlush",
            "en": "(color) Web color LavenderBlush"
        }
    },
    "clrLawnGreen": {
        "group": 15,
        "label": "clrLawnGreen",
        "body": "clrLawnGreen",
        "code": [
            {
                "label": "clrLawnGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LawnGreen",
            "en": "(color) Web color LawnGreen"
        }
    },
    "clrLemonChiffon": {
        "group": 15,
        "label": "clrLemonChiffon",
        "body": "clrLemonChiffon",
        "code": [
            {
                "label": "clrLemonChiffon",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LemonChiffon",
            "en": "(color) Web color LemonChiffon"
        }
    },
    "clrLightBlue": {
        "group": 15,
        "label": "clrLightBlue",
        "body": "clrLightBlue",
        "code": [
            {
                "label": "clrLightBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightBlue",
            "en": "(color) Web color LightBlue"
        }
    },
    "clrLightCoral": {
        "group": 15,
        "label": "clrLightCoral",
        "body": "clrLightCoral",
        "code": [
            {
                "label": "clrLightCoral",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightCoral",
            "en": "(color) Web color LightCoral"
        }
    },
    "clrLightCyan": {
        "group": 15,
        "label": "clrLightCyan",
        "body": "clrLightCyan",
        "code": [
            {
                "label": "clrLightCyan",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightCyan",
            "en": "(color) Web color LightCyan"
        }
    },
    "clrLightGoldenrod": {
        "group": 15,
        "label": "clrLightGoldenrod",
        "body": "clrLightGoldenrod",
        "code": [
            {
                "label": "clrLightGoldenrod",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightGoldenrod",
            "en": "(color) Web color LightGoldenrod"
        }
    },
    "clrLightGray": {
        "group": 15,
        "label": "clrLightGray",
        "body": "clrLightGray",
        "code": [
            {
                "label": "clrLightGray",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightGray",
            "en": "(color) Web color LightGray"
        }
    },
    "clrLightGreen": {
        "group": 15,
        "label": "clrLightGreen",
        "body": "clrLightGreen",
        "code": [
            {
                "label": "clrLightGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightGreen",
            "en": "(color) Web color LightGreen"
        }
    },
    "clrLightPink": {
        "group": 15,
        "label": "clrLightPink",
        "body": "clrLightPink",
        "code": [
            {
                "label": "clrLightPink",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightPink",
            "en": "(color) Web color LightPink"
        }
    },
    "clrLightSalmon": {
        "group": 15,
        "label": "clrLightSalmon",
        "body": "clrLightSalmon",
        "code": [
            {
                "label": "clrLightSalmon",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightSalmon",
            "en": "(color) Web color LightSalmon"
        }
    },
    "clrLightSeaGreen": {
        "group": 15,
        "label": "clrLightSeaGreen",
        "body": "clrLightSeaGreen",
        "code": [
            {
                "label": "clrLightSeaGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightSeaGreen",
            "en": "(color) Web color LightSeaGreen"
        }
    },
    "clrLightSkyBlue": {
        "group": 15,
        "label": "clrLightSkyBlue",
        "body": "clrLightSkyBlue",
        "code": [
            {
                "label": "clrLightSkyBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightSkyBlue",
            "en": "(color) Web color LightSkyBlue"
        }
    },
    "clrLightSlateGray": {
        "group": 15,
        "label": "clrLightSlateGray",
        "body": "clrLightSlateGray",
        "code": [
            {
                "label": "clrLightSlateGray",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightSlateGray",
            "en": "(color) Web color LightSlateGray"
        }
    },
    "clrLightSteelBlue": {
        "group": 15,
        "label": "clrLightSteelBlue",
        "body": "clrLightSteelBlue",
        "code": [
            {
                "label": "clrLightSteelBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightSteelBlue",
            "en": "(color) Web color LightSteelBlue"
        }
    },
    "clrLightYellow": {
        "group": 15,
        "label": "clrLightYellow",
        "body": "clrLightYellow",
        "code": [
            {
                "label": "clrLightYellow",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LightYellow",
            "en": "(color) Web color LightYellow"
        }
    },
    "clrLime": {
        "group": 15,
        "label": "clrLime",
        "body": "clrLime",
        "code": [
            {
                "label": "clrLime",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Lime",
            "en": "(color) Web color Lime"
        }
    },
    "clrLimeGreen": {
        "group": 15,
        "label": "clrLimeGreen",
        "body": "clrLimeGreen",
        "code": [
            {
                "label": "clrLimeGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет LimeGreen",
            "en": "(color) Web color LimeGreen"
        }
    },
    "clrLinen": {
        "group": 15,
        "label": "clrLinen",
        "body": "clrLinen",
        "code": [
            {
                "label": "clrLinen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Linen",
            "en": "(color) Web color Linen"
        }
    },
    "clrMagenta": {
        "group": 15,
        "label": "clrMagenta",
        "body": "clrMagenta",
        "code": [
            {
                "label": "clrMagenta",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Magenta",
            "en": "(color) Web color Magenta"
        }
    },
    "clrMaroon": {
        "group": 15,
        "label": "clrMaroon",
        "body": "clrMaroon",
        "code": [
            {
                "label": "clrMaroon",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Maroon",
            "en": "(color) Web color Maroon"
        }
    },
    "clrMediumAquamarine": {
        "group": 15,
        "label": "clrMediumAquamarine",
        "body": "clrMediumAquamarine",
        "code": [
            {
                "label": "clrMediumAquamarine",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MediumAquamarine",
            "en": "(color) Web color MediumAquamarine"
        }
    },
    "clrMediumBlue": {
        "group": 15,
        "label": "clrMediumBlue",
        "body": "clrMediumBlue",
        "code": [
            {
                "label": "clrMediumBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MediumBlue",
            "en": "(color) Web color MediumBlue"
        }
    },
    "clrMediumOrchid": {
        "group": 15,
        "label": "clrMediumOrchid",
        "body": "clrMediumOrchid",
        "code": [
            {
                "label": "clrMediumOrchid",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MediumOrchid",
            "en": "(color) Web color MediumOrchid"
        }
    },
    "clrMediumPurple": {
        "group": 15,
        "label": "clrMediumPurple",
        "body": "clrMediumPurple",
        "code": [
            {
                "label": "clrMediumPurple",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MediumPurple",
            "en": "(color) Web color MediumPurple"
        }
    },
    "clrMediumSeaGreen": {
        "group": 15,
        "label": "clrMediumSeaGreen",
        "body": "clrMediumSeaGreen",
        "code": [
            {
                "label": "clrMediumSeaGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MediumSeaGreen",
            "en": "(color) Web color MediumSeaGreen"
        }
    },
    "clrMediumSlateBlue": {
        "group": 15,
        "label": "clrMediumSlateBlue",
        "body": "clrMediumSlateBlue",
        "code": [
            {
                "label": "clrMediumSlateBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MediumSlateBlue",
            "en": "(color) Web color MediumSlateBlue"
        }
    },
    "clrMediumSpringGreen": {
        "group": 15,
        "label": "clrMediumSpringGreen",
        "body": "clrMediumSpringGreen",
        "code": [
            {
                "label": "clrMediumSpringGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MediumSpringGreen",
            "en": "(color) Web color MediumSpringGreen"
        }
    },
    "clrMediumTurquoise": {
        "group": 15,
        "label": "clrMediumTurquoise",
        "body": "clrMediumTurquoise",
        "code": [
            {
                "label": "clrMediumTurquoise",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MediumTurquoise",
            "en": "(color) Web color MediumTurquoise"
        }
    },
    "clrMediumVioletRed": {
        "group": 15,
        "label": "clrMediumVioletRed",
        "body": "clrMediumVioletRed",
        "code": [
            {
                "label": "clrMediumVioletRed",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MediumVioletRed",
            "en": "(color) Web color MediumVioletRed"
        }
    },
    "clrMidnightBlue": {
        "group": 15,
        "label": "clrMidnightBlue",
        "body": "clrMidnightBlue",
        "code": [
            {
                "label": "clrMidnightBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MidnightBlue",
            "en": "(color) Web color MidnightBlue"
        }
    },
    "clrMintCream": {
        "group": 15,
        "label": "clrMintCream",
        "body": "clrMintCream",
        "code": [
            {
                "label": "clrMintCream",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MintCream",
            "en": "(color) Web color MintCream"
        }
    },
    "clrMistyRose": {
        "group": 15,
        "label": "clrMistyRose",
        "body": "clrMistyRose",
        "code": [
            {
                "label": "clrMistyRose",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет MistyRose",
            "en": "(color) Web color MistyRose"
        }
    },
    "clrMoccasin": {
        "group": 15,
        "label": "clrMoccasin",
        "body": "clrMoccasin",
        "code": [
            {
                "label": "clrMoccasin",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Moccasin",
            "en": "(color) Web color Moccasin"
        }
    },
    "clrNavajoWhite": {
        "group": 15,
        "label": "clrNavajoWhite",
        "body": "clrNavajoWhite",
        "code": [
            {
                "label": "clrNavajoWhite",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет NavajoWhite",
            "en": "(color) Web color NavajoWhite"
        }
    },
    "clrNavy": {
        "group": 15,
        "label": "clrNavy",
        "body": "clrNavy",
        "code": [
            {
                "label": "clrNavy",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Navy",
            "en": "(color) Web color Navy"
        }
    },
    "clrOldLace": {
        "group": 15,
        "label": "clrOldLace",
        "body": "clrOldLace",
        "code": [
            {
                "label": "clrOldLace",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет OldLace",
            "en": "(color) Web color OldLace"
        }
    },
    "clrOlive": {
        "group": 15,
        "label": "clrOlive",
        "body": "clrOlive",
        "code": [
            {
                "label": "clrOlive",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Olive",
            "en": "(color) Web color Olive"
        }
    },
    "clrOliveDrab": {
        "group": 15,
        "label": "clrOliveDrab",
        "body": "clrOliveDrab",
        "code": [
            {
                "label": "clrOliveDrab",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет OliveDrab",
            "en": "(color) Web color OliveDrab"
        }
    },
    "clrOrange": {
        "group": 15,
        "label": "clrOrange",
        "body": "clrOrange",
        "code": [
            {
                "label": "clrOrange",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Orange",
            "en": "(color) Web color Orange"
        }
    },
    "clrOrangeRed": {
        "group": 15,
        "label": "clrOrangeRed",
        "body": "clrOrangeRed",
        "code": [
            {
                "label": "clrOrangeRed",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет OrangeRed",
            "en": "(color) Web color OrangeRed"
        }
    },
    "clrOrchid": {
        "group": 15,
        "label": "clrOrchid",
        "body": "clrOrchid",
        "code": [
            {
                "label": "clrOrchid",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Orchid",
            "en": "(color) Web color Orchid"
        }
    },
    "clrPaleGoldenrod": {
        "group": 15,
        "label": "clrPaleGoldenrod",
        "body": "clrPaleGoldenrod",
        "code": [
            {
                "label": "clrPaleGoldenrod",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет PaleGoldenrod",
            "en": "(color) Web color PaleGoldenrod"
        }
    },
    "clrPaleGreen": {
        "group": 15,
        "label": "clrPaleGreen",
        "body": "clrPaleGreen",
        "code": [
            {
                "label": "clrPaleGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет PaleGreen",
            "en": "(color) Web color PaleGreen"
        }
    },
    "clrPaleTurquoise": {
        "group": 15,
        "label": "clrPaleTurquoise",
        "body": "clrPaleTurquoise",
        "code": [
            {
                "label": "clrPaleTurquoise",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет PaleTurquoise",
            "en": "(color) Web color PaleTurquoise"
        }
    },
    "clrPaleVioletRed": {
        "group": 15,
        "label": "clrPaleVioletRed",
        "body": "clrPaleVioletRed",
        "code": [
            {
                "label": "clrPaleVioletRed",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет PaleVioletRed",
            "en": "(color) Web color PaleVioletRed"
        }
    },
    "clrPapayaWhip": {
        "group": 15,
        "label": "clrPapayaWhip",
        "body": "clrPapayaWhip",
        "code": [
            {
                "label": "clrPapayaWhip",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет PapayaWhip",
            "en": "(color) Web color PapayaWhip"
        }
    },
    "clrPeachPuff": {
        "group": 15,
        "label": "clrPeachPuff",
        "body": "clrPeachPuff",
        "code": [
            {
                "label": "clrPeachPuff",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет PeachPuff",
            "en": "(color) Web color PeachPuff"
        }
    },
    "clrPeru": {
        "group": 15,
        "label": "clrPeru",
        "body": "clrPeru",
        "code": [
            {
                "label": "clrPeru",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Peru",
            "en": "(color) Web color Peru"
        }
    },
    "clrPink": {
        "group": 15,
        "label": "clrPink",
        "body": "clrPink",
        "code": [
            {
                "label": "clrPink",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Pink",
            "en": "(color) Web color Pink"
        }
    },
    "clrPlum": {
        "group": 15,
        "label": "clrPlum",
        "body": "clrPlum",
        "code": [
            {
                "label": "clrPlum",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Plum",
            "en": "(color) Web color Plum"
        }
    },
    "clrPowderBlue": {
        "group": 15,
        "label": "clrPowderBlue",
        "body": "clrPowderBlue",
        "code": [
            {
                "label": "clrPowderBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет PowderBlue",
            "en": "(color) Web color PowderBlue"
        }
    },
    "clrPurple": {
        "group": 15,
        "label": "clrPurple",
        "body": "clrPurple",
        "code": [
            {
                "label": "clrPurple",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Purple",
            "en": "(color) Web color Purple"
        }
    },
    "clrRed": {
        "group": 15,
        "label": "clrRed",
        "body": "clrRed",
        "code": [
            {
                "label": "clrRed",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Red",
            "en": "(color) Web color Red"
        }
    },
    "clrRosyBrown": {
        "group": 15,
        "label": "clrRosyBrown",
        "body": "clrRosyBrown",
        "code": [
            {
                "label": "clrRosyBrown",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет RosyBrown",
            "en": "(color) Web color RosyBrown"
        }
    },
    "clrRoyalBlue": {
        "group": 15,
        "label": "clrRoyalBlue",
        "body": "clrRoyalBlue",
        "code": [
            {
                "label": "clrRoyalBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет RoyalBlue",
            "en": "(color) Web color RoyalBlue"
        }
    },
    "clrSaddleBrown": {
        "group": 15,
        "label": "clrSaddleBrown",
        "body": "clrSaddleBrown",
        "code": [
            {
                "label": "clrSaddleBrown",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет SaddleBrown",
            "en": "(color) Web color SaddleBrown"
        }
    },
    "clrSalmon": {
        "group": 15,
        "label": "clrSalmon",
        "body": "clrSalmon",
        "code": [
            {
                "label": "clrSalmon",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Salmon",
            "en": "(color) Web color Salmon"
        }
    },
    "clrSandyBrown": {
        "group": 15,
        "label": "clrSandyBrown",
        "body": "clrSandyBrown",
        "code": [
            {
                "label": "clrSandyBrown",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет SandyBrown",
            "en": "(color) Web color SandyBrown"
        }
    },
    "clrSeaGreen": {
        "group": 15,
        "label": "clrSeaGreen",
        "body": "clrSeaGreen",
        "code": [
            {
                "label": "clrSeaGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет SeaGreen",
            "en": "(color) Web color SeaGreen"
        }
    },
    "clrSeashell": {
        "group": 15,
        "label": "clrSeashell",
        "body": "clrSeashell",
        "code": [
            {
                "label": "clrSeashell",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Seashell",
            "en": "(color) Web color Seashell"
        }
    },
    "clrSienna": {
        "group": 15,
        "label": "clrSienna",
        "body": "clrSienna",
        "code": [
            {
                "label": "clrSienna",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Sienna",
            "en": "(color) Web color Sienna"
        }
    },
    "clrSilver": {
        "group": 15,
        "label": "clrSilver",
        "body": "clrSilver",
        "code": [
            {
                "label": "clrSilver",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Silver",
            "en": "(color) Web color Silver"
        }
    },
    "clrSkyBlue": {
        "group": 15,
        "label": "clrSkyBlue",
        "body": "clrSkyBlue",
        "code": [
            {
                "label": "clrSkyBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет SkyBlue",
            "en": "(color) Web color SkyBlue"
        }
    },
    "clrSlateBlue": {
        "group": 15,
        "label": "clrSlateBlue",
        "body": "clrSlateBlue",
        "code": [
            {
                "label": "clrSlateBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет SlateBlue",
            "en": "(color) Web color SlateBlue"
        }
    },
    "clrSlateGray": {
        "group": 15,
        "label": "clrSlateGray",
        "body": "clrSlateGray",
        "code": [
            {
                "label": "clrSlateGray",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет SlateGray",
            "en": "(color) Web color SlateGray"
        }
    },
    "clrSnow": {
        "group": 15,
        "label": "clrSnow",
        "body": "clrSnow",
        "code": [
            {
                "label": "clrSnow",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Snow",
            "en": "(color) Web color Snow"
        }
    },
    "clrSpringGreen": {
        "group": 15,
        "label": "clrSpringGreen",
        "body": "clrSpringGreen",
        "code": [
            {
                "label": "clrSpringGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет SpringGreen",
            "en": "(color) Web color SpringGreen"
        }
    },
    "clrSteelBlue": {
        "group": 15,
        "label": "clrSteelBlue",
        "body": "clrSteelBlue",
        "code": [
            {
                "label": "clrSteelBlue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет SteelBlue",
            "en": "(color) Web color SteelBlue"
        }
    },
    "clrTan": {
        "group": 15,
        "label": "clrTan",
        "body": "clrTan",
        "code": [
            {
                "label": "clrTan",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Tan",
            "en": "(color) Web color Tan"
        }
    },
    "clrTeal": {
        "group": 15,
        "label": "clrTeal",
        "body": "clrTeal",
        "code": [
            {
                "label": "clrTeal",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Teal",
            "en": "(color) Web color Teal"
        }
    },
    "clrThistle": {
        "group": 15,
        "label": "clrThistle",
        "body": "clrThistle",
        "code": [
            {
                "label": "clrThistle",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Thistle",
            "en": "(color) Web color Thistle"
        }
    },
    "clrTomato": {
        "group": 15,
        "label": "clrTomato",
        "body": "clrTomato",
        "code": [
            {
                "label": "clrTomato",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Tomato",
            "en": "(color) Web color Tomato"
        }
    },
    "clrTurquoise": {
        "group": 15,
        "label": "clrTurquoise",
        "body": "clrTurquoise",
        "code": [
            {
                "label": "clrTurquoise",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Turquoise",
            "en": "(color) Web color Turquoise"
        }
    },
    "clrViolet": {
        "group": 15,
        "label": "clrViolet",
        "body": "clrViolet",
        "code": [
            {
                "label": "clrViolet",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Violet",
            "en": "(color) Web color Violet"
        }
    },
    "clrWheat": {
        "group": 15,
        "label": "clrWheat",
        "body": "clrWheat",
        "code": [
            {
                "label": "clrWheat",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Wheat",
            "en": "(color) Web color Wheat"
        }
    },
    "clrWhite": {
        "group": 15,
        "label": "clrWhite",
        "body": "clrWhite",
        "code": [
            {
                "label": "clrWhite",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет White",
            "en": "(color) Web color White"
        }
    },
    "clrWhiteSmoke": {
        "group": 15,
        "label": "clrWhiteSmoke",
        "body": "clrWhiteSmoke",
        "code": [
            {
                "label": "clrWhiteSmoke",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет WhiteSmoke",
            "en": "(color) Web color WhiteSmoke"
        }
    },
    "clrYellow": {
        "group": 15,
        "label": "clrYellow",
        "body": "clrYellow",
        "code": [
            {
                "label": "clrYellow",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет Yellow",
            "en": "(color) Web color Yellow"
        }
    },
    "clrYellowGreen": {
        "group": 15,
        "label": "clrYellowGreen",
        "body": "clrYellowGreen",
        "code": [
            {
                "label": "clrYellowGreen",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "(color) Web цвет YellowGreen",
            "en": "(color) Web color YellowGreen"
        }
    },
    "clrNONE": {
        "group": 15,
        "label": "clrNONE",
        "body": "clrNONE",
        "code": [
            {
                "label": "clrNONE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отсутствие цвета",
            "en": "Absence of color"
        }
    },
    "__DATE__": {
        "group": 20,
        "label": "__DATE__",
        "body": "__DATE__",
        "code": [
            {
                "label": "__DATE__",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дата компиляции файла без времени (часы, минуты и секунды равны 0)",
            "en": "File compilation date without time (hours, minutes and seconds are equal to 0)"
        }
    },
    "__DATETIME__": {
        "group": 20,
        "label": "__DATETIME__",
        "body": "__DATETIME__",
        "code": [
            {
                "label": "__DATETIME__",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дата и время компиляции файла",
            "en": "File compilation date and time"
        }
    },
    "__FILE__": {
        "group": 20,
        "label": "__FILE__",
        "body": "__FILE__",
        "code": [
            {
                "label": "__FILE__",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя текущего компилируемого файла",
            "en": "Name of the currently compiled file"
        }
    },
    "__FUNCSIG__": {
        "group": 20,
        "label": "__FUNCSIG__",
        "body": "__FUNCSIG__",
        "code": [
            {
                "label": "__FUNCSIG__",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Сигнатура функции, в теле которой расположен макрос. Вывод в лог полного описания функции с типами параметров может пригодиться при идентификации перегруженных функций",
            "en": "Signature of the function in whose body the macro is located. Logging of the full description of functions can be useful in the identification of overloaded functions"
        }
    },
    "__FUNCTION__": {
        "group": 20,
        "label": "__FUNCTION__",
        "body": "__FUNCTION__",
        "code": [
            {
                "label": "__FUNCTION__",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя функции, в теле которой расположен макрос",
            "en": "Name of the function, in whose body the macro is located"
        }
    },
    "__LINE__": {
        "group": 20,
        "label": "__LINE__",
        "body": "__LINE__",
        "code": [
            {
                "label": "__LINE__",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Номер строки в исходном коде, на которой расположен данный макрос",
            "en": "Line number in the source code, in which the macro is located"
        }
    },
    "__MQLBUILD__, __MQL5BUILD__": {
        "group": 20,
        "label": "__MQLBUILD__, __MQL5BUILD__",
        "body": "__MQLBUILD__, __MQL5BUILD__",
        "code": [
            {
                "label": "__MQLBUILD__, __MQL5BUILD__",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Номер билда компилятора",
            "en": "Compiler build number"
        }
    },
    "__PATH__": {
        "group": 20,
        "label": "__PATH__",
        "body": "__PATH__",
        "code": [
            {
                "label": "__PATH__",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Абсолютный путь к текущему компилируемому файлу",
            "en": "An absolute path to the file that is currently being compiled"
        }
    },
    "ACCOUNT_ASSETS": {
        "group": 20,
        "label": "ACCOUNT_ASSETS",
        "body": "ACCOUNT_ASSETS",
        "code": [
            {
                "label": "ACCOUNT_ASSETS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущий размер активов на счёте",
            "en": "The current assets of an account"
        }
    },
    "ACCOUNT_BALANCE": {
        "group": 20,
        "label": "ACCOUNT_BALANCE",
        "body": "ACCOUNT_BALANCE",
        "code": [
            {
                "label": "ACCOUNT_BALANCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Баланс счета в валюте депозита",
            "en": "Account balance in the deposit currency"
        }
    },
    "ACCOUNT_COMMISSION_BLOCKED": {
        "group": 20,
        "label": "ACCOUNT_COMMISSION_BLOCKED",
        "body": "ACCOUNT_COMMISSION_BLOCKED",
        "code": [
            {
                "label": "ACCOUNT_COMMISSION_BLOCKED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущая сумма заблокированных комиссий по счёту",
            "en": "The current blocked commission amount on an account"
        }
    },
    "ACCOUNT_COMPANY": {
        "group": 20,
        "label": "ACCOUNT_COMPANY",
        "body": "ACCOUNT_COMPANY",
        "code": [
            {
                "label": "ACCOUNT_COMPANY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя компании, обслуживающей счет",
            "en": "Name of a company that serves the account"
        }
    },
    "ACCOUNT_CREDIT": {
        "group": 20,
        "label": "ACCOUNT_CREDIT",
        "body": "ACCOUNT_CREDIT",
        "code": [
            {
                "label": "ACCOUNT_CREDIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер предоставленного кредита в валюте депозита",
            "en": "Account credit in the deposit currency"
        }
    },
    "ACCOUNT_CURRENCY": {
        "group": 20,
        "label": "ACCOUNT_CURRENCY",
        "body": "ACCOUNT_CURRENCY",
        "code": [
            {
                "label": "ACCOUNT_CURRENCY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Валюта депозита",
            "en": "Account currency"
        }
    },
    "ACCOUNT_EQUITY": {
        "group": 20,
        "label": "ACCOUNT_EQUITY",
        "body": "ACCOUNT_EQUITY",
        "code": [
            {
                "label": "ACCOUNT_EQUITY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение собственных средств на счете в валюте депозита",
            "en": "Account equity in the deposit currency"
        }
    },
    "ACCOUNT_LEVERAGE": {
        "group": 20,
        "label": "ACCOUNT_LEVERAGE",
        "body": "ACCOUNT_LEVERAGE",
        "code": [
            {
                "label": "ACCOUNT_LEVERAGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер предоставленного плеча",
            "en": "Account leverage"
        }
    },
    "ACCOUNT_LIABILITIES": {
        "group": 20,
        "label": "ACCOUNT_LIABILITIES",
        "body": "ACCOUNT_LIABILITIES",
        "code": [
            {
                "label": "ACCOUNT_LIABILITIES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущий размер обязательств на счёте",
            "en": "The current liabilities on an account"
        }
    },
    "ACCOUNT_LIMIT_ORDERS": {
        "group": 20,
        "label": "ACCOUNT_LIMIT_ORDERS",
        "body": "ACCOUNT_LIMIT_ORDERS",
        "code": [
            {
                "label": "ACCOUNT_LIMIT_ORDERS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимально допустимое количество действующих отложенных ордеров",
            "en": "Maximum allowed number of active pending orders"
        }
    },
    "ACCOUNT_LOGIN": {
        "group": 20,
        "label": "ACCOUNT_LOGIN",
        "body": "ACCOUNT_LOGIN",
        "code": [
            {
                "label": "ACCOUNT_LOGIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Номер счета",
            "en": "Account number"
        }
    },
    "ACCOUNT_MARGIN": {
        "group": 20,
        "label": "ACCOUNT_MARGIN",
        "body": "ACCOUNT_MARGIN",
        "code": [
            {
                "label": "ACCOUNT_MARGIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер зарезервированных залоговых средств на счете  в валюте депозита",
            "en": "Account margin used in the deposit currency"
        }
    },
    "ACCOUNT_MARGIN_FREE": {
        "group": 20,
        "label": "ACCOUNT_MARGIN_FREE",
        "body": "ACCOUNT_MARGIN_FREE",
        "code": [
            {
                "label": "ACCOUNT_MARGIN_FREE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер свободных средств на счете  в валюте депозита, доступных для открытия позиции",
            "en": "Free margin of an account in the deposit currency"
        }
    },
    "ACCOUNT_MARGIN_INITIAL": {
        "group": 20,
        "label": "ACCOUNT_MARGIN_INITIAL",
        "body": "ACCOUNT_MARGIN_INITIAL",
        "code": [
            {
                "label": "ACCOUNT_MARGIN_INITIAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер средств, зарезервированных на счёте, для обеспечения гарантийной суммы по всем отложенным ордерам",
            "en": "Initial margin. The amount reserved on an account to cover the margin of all pending orders"
        }
    },
    "ACCOUNT_MARGIN_LEVEL": {
        "group": 20,
        "label": "ACCOUNT_MARGIN_LEVEL",
        "body": "ACCOUNT_MARGIN_LEVEL",
        "code": [
            {
                "label": "ACCOUNT_MARGIN_LEVEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень залоговых средств на счете в процентах",
            "en": "Account margin level in percents"
        }
    },
    "ACCOUNT_MARGIN_MAINTENANCE": {
        "group": 20,
        "label": "ACCOUNT_MARGIN_MAINTENANCE",
        "body": "ACCOUNT_MARGIN_MAINTENANCE",
        "code": [
            {
                "label": "ACCOUNT_MARGIN_MAINTENANCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер средств, зарезервированных на счёте, для обеспечения минимальной суммы по всем открытым позициям",
            "en": "Maintenance margin. The minimum equity reserved on an account to cover the minimum amount of all open positions"
        }
    },
    "ACCOUNT_MARGIN_SO_CALL": {
        "group": 20,
        "label": "ACCOUNT_MARGIN_SO_CALL",
        "body": "ACCOUNT_MARGIN_SO_CALL",
        "code": [
            {
                "label": "ACCOUNT_MARGIN_SO_CALL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень залоговых средств, при котором требуется пополнение счета (Margin Call). В зависимости от установленного ACCOUNT_MARGIN_SO_MODE выражается в процентах либо в валюте депозита",
            "en": "Margin call level. Depending on the set ACCOUNT_MARGIN_SO_MODE is expressed in percents or in the deposit currency"
        }
    },
    "ACCOUNT_MARGIN_SO_MODE": {
        "group": 20,
        "label": "ACCOUNT_MARGIN_SO_MODE",
        "body": "ACCOUNT_MARGIN_SO_MODE",
        "code": [
            {
                "label": "ACCOUNT_MARGIN_SO_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Режим задания минимально допустимого уровня залоговых средств",
            "en": "Mode for setting the minimal allowed margin"
        }
    },
    "ACCOUNT_MARGIN_SO_SO": {
        "group": 20,
        "label": "ACCOUNT_MARGIN_SO_SO",
        "body": "ACCOUNT_MARGIN_SO_SO",
        "code": [
            {
                "label": "ACCOUNT_MARGIN_SO_SO",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень залоговых средств, при достижении которого происходит принудительное закрытие самой убыточной позиции (Stop Out). В зависимости от установленного ACCOUNT_MARGIN_SO_MODE выражается в процентах либо в валюте депозита",
            "en": "Margin stop out level. Depending on the set ACCOUNT_MARGIN_SO_MODE is expressed in percents or in the deposit currency"
        }
    },
    "ACCOUNT_NAME": {
        "group": 20,
        "label": "ACCOUNT_NAME",
        "body": "ACCOUNT_NAME",
        "code": [
            {
                "label": "ACCOUNT_NAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя клиента",
            "en": "Client name"
        }
    },
    "ACCOUNT_PROFIT": {
        "group": 20,
        "label": "ACCOUNT_PROFIT",
        "body": "ACCOUNT_PROFIT",
        "code": [
            {
                "label": "ACCOUNT_PROFIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер текущей прибыли на счете в валюте депозита",
            "en": "Current profit of an account in the deposit currency"
        }
    },
    "ACCOUNT_SERVER": {
        "group": 20,
        "label": "ACCOUNT_SERVER",
        "body": "ACCOUNT_SERVER",
        "code": [
            {
                "label": "ACCOUNT_SERVER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя торгового сервера",
            "en": "Trade server name"
        }
    },
    "ACCOUNT_STOPOUT_MODE_MONEY": {
        "group": 20,
        "label": "ACCOUNT_STOPOUT_MODE_MONEY",
        "body": "ACCOUNT_STOPOUT_MODE_MONEY",
        "code": [
            {
                "label": "ACCOUNT_STOPOUT_MODE_MONEY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень задается в деньгах",
            "en": "Account stop out mode in money"
        }
    },
    "ACCOUNT_STOPOUT_MODE_PERCENT": {
        "group": 20,
        "label": "ACCOUNT_STOPOUT_MODE_PERCENT",
        "body": "ACCOUNT_STOPOUT_MODE_PERCENT",
        "code": [
            {
                "label": "ACCOUNT_STOPOUT_MODE_PERCENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень задается в процентах",
            "en": "Account stop out mode in percents"
        }
    },
    "ACCOUNT_TRADE_ALLOWED": {
        "group": 20,
        "label": "ACCOUNT_TRADE_ALLOWED",
        "body": "ACCOUNT_TRADE_ALLOWED",
        "code": [
            {
                "label": "ACCOUNT_TRADE_ALLOWED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешенность торговли для текущего счета",
            "en": "Allowed trade for the current account"
        }
    },
    "ACCOUNT_TRADE_EXPERT": {
        "group": 20,
        "label": "ACCOUNT_TRADE_EXPERT",
        "body": "ACCOUNT_TRADE_EXPERT",
        "code": [
            {
                "label": "ACCOUNT_TRADE_EXPERT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешенность торговли для эксперта",
            "en": "Allowed trade for an Expert Advisor"
        }
    },
    "ACCOUNT_TRADE_MODE": {
        "group": 20,
        "label": "ACCOUNT_TRADE_MODE",
        "body": "ACCOUNT_TRADE_MODE",
        "code": [
            {
                "label": "ACCOUNT_TRADE_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип торгового счета",
            "en": "Account trade mode"
        }
    },
    "ACCOUNT_TRADE_MODE_CONTEST": {
        "group": 20,
        "label": "ACCOUNT_TRADE_MODE_CONTEST",
        "body": "ACCOUNT_TRADE_MODE_CONTEST",
        "code": [
            {
                "label": "ACCOUNT_TRADE_MODE_CONTEST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Конкурсный торговый счет",
            "en": "Contest account"
        }
    },
    "ACCOUNT_TRADE_MODE_DEMO": {
        "group": 20,
        "label": "ACCOUNT_TRADE_MODE_DEMO",
        "body": "ACCOUNT_TRADE_MODE_DEMO",
        "code": [
            {
                "label": "ACCOUNT_TRADE_MODE_DEMO",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Демонстрационный торговый счет",
            "en": "Demo account"
        }
    },
    "ACCOUNT_TRADE_MODE_REAL": {
        "group": 20,
        "label": "ACCOUNT_TRADE_MODE_REAL",
        "body": "ACCOUNT_TRADE_MODE_REAL",
        "code": [
            {
                "label": "ACCOUNT_TRADE_MODE_REAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Реальный торговый счет",
            "en": "Real account"
        }
    },
    "ALIGN_CENTER": {
        "group": 20,
        "label": "ALIGN_CENTER",
        "body": "ALIGN_CENTER",
        "code": [
            {
                "label": "ALIGN_CENTER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выравнивание по центру (только для объекта \"Поле ввода\")",
            "en": "Centered (only for the Edit object)"
        }
    },
    "ALIGN_LEFT": {
        "group": 20,
        "label": "ALIGN_LEFT",
        "body": "ALIGN_LEFT",
        "code": [
            {
                "label": "ALIGN_LEFT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выравнивание по левой границе",
            "en": "Left alignment"
        }
    },
    "ALIGN_RIGHT": {
        "group": 20,
        "label": "ALIGN_RIGHT",
        "body": "ALIGN_RIGHT",
        "code": [
            {
                "label": "ALIGN_RIGHT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выравнивание по правой границе",
            "en": "Right alignment"
        }
    },
    "ANCHOR_CENTER": {
        "group": 20,
        "label": "ANCHOR_CENTER",
        "body": "ANCHOR_CENTER",
        "code": [
            {
                "label": "ANCHOR_CENTER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точка привязки строго по центру объекта",
            "en": "Anchor point strictly in the center of the object"
        }
    },
    "ANCHOR_LEFT": {
        "group": 20,
        "label": "ANCHOR_LEFT",
        "body": "ANCHOR_LEFT",
        "code": [
            {
                "label": "ANCHOR_LEFT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точка привязки слева по центру",
            "en": "Anchor point to the left in the center"
        }
    },
    "ANCHOR_LEFT_LOWER": {
        "group": 20,
        "label": "ANCHOR_LEFT_LOWER",
        "body": "ANCHOR_LEFT_LOWER",
        "code": [
            {
                "label": "ANCHOR_LEFT_LOWER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точка привязки в левом нижнем углу",
            "en": "Anchor point at the lower left corner"
        }
    },
    "ANCHOR_LEFT_UPPER": {
        "group": 20,
        "label": "ANCHOR_LEFT_UPPER",
        "body": "ANCHOR_LEFT_UPPER",
        "code": [
            {
                "label": "ANCHOR_LEFT_UPPER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точка привязки в левом верхнем углу",
            "en": "Anchor point at the upper left corner"
        }
    },
    "ANCHOR_LOWER": {
        "group": 20,
        "label": "ANCHOR_LOWER",
        "body": "ANCHOR_LOWER",
        "code": [
            {
                "label": "ANCHOR_LOWER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точка привязки снизу по центру",
            "en": "Anchor point below in the center"
        }
    },
    "ANCHOR_RIGHT": {
        "group": 20,
        "label": "ANCHOR_RIGHT",
        "body": "ANCHOR_RIGHT",
        "code": [
            {
                "label": "ANCHOR_RIGHT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точка привязки справа по центру",
            "en": "Anchor point to the right in the center"
        }
    },
    "ANCHOR_RIGHT_LOWER": {
        "group": 20,
        "label": "ANCHOR_RIGHT_LOWER",
        "body": "ANCHOR_RIGHT_LOWER",
        "code": [
            {
                "label": "ANCHOR_RIGHT_LOWER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точка привязки в правом нижнем углу",
            "en": "Anchor point at the lower right corner"
        }
    },
    "ANCHOR_RIGHT_UPPER": {
        "group": 20,
        "label": "ANCHOR_RIGHT_UPPER",
        "body": "ANCHOR_RIGHT_UPPER",
        "code": [
            {
                "label": "ANCHOR_RIGHT_UPPER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точка привязки в правом верхнем углу",
            "en": "Anchor point at the upper right corner"
        }
    },
    "ANCHOR_UPPER": {
        "group": 20,
        "label": "ANCHOR_UPPER",
        "body": "ANCHOR_UPPER",
        "code": [
            {
                "label": "ANCHOR_UPPER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точка привязки сверху по центру",
            "en": "Anchor point above in the center"
        }
    },
    "BASE_LINE": {
        "group": 20,
        "label": "BASE_LINE",
        "body": "BASE_LINE",
        "code": [
            {
                "label": "BASE_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Основная линия",
            "en": "Main line"
        }
    },
    "BOOK_TYPE_BUY": {
        "group": 20,
        "label": "BOOK_TYPE_BUY",
        "body": "BOOK_TYPE_BUY",
        "code": [
            {
                "label": "BOOK_TYPE_BUY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Заявка на покупку",
            "en": "Buy order (Bid)"
        }
    },
    "BOOK_TYPE_BUY_MARKET": {
        "group": 20,
        "label": "BOOK_TYPE_BUY_MARKET",
        "body": "BOOK_TYPE_BUY_MARKET",
        "code": [
            {
                "label": "BOOK_TYPE_BUY_MARKET",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Заявка на покупку по рыночной цене",
            "en": "Buy order by Market"
        }
    },
    "BOOK_TYPE_SELL": {
        "group": 20,
        "label": "BOOK_TYPE_SELL",
        "body": "BOOK_TYPE_SELL",
        "code": [
            {
                "label": "BOOK_TYPE_SELL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Заявка на продажу",
            "en": "Sell order (Offer)"
        }
    },
    "BOOK_TYPE_SELL_MARKET": {
        "group": 20,
        "label": "BOOK_TYPE_SELL_MARKET",
        "body": "BOOK_TYPE_SELL_MARKET",
        "code": [
            {
                "label": "BOOK_TYPE_SELL_MARKET",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Заявка на продажу по рыночной цене",
            "en": "Sell order by Market"
        }
    },
    "BORDER_FLAT": {
        "group": 20,
        "label": "BORDER_FLAT",
        "body": "BORDER_FLAT",
        "code": [
            {
                "label": "BORDER_FLAT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Плоский вид",
            "en": "Flat form"
        }
    },
    "BORDER_RAISED": {
        "group": 20,
        "label": "BORDER_RAISED",
        "body": "BORDER_RAISED",
        "code": [
            {
                "label": "BORDER_RAISED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выпуклый вид",
            "en": "Prominent form"
        }
    },
    "BORDER_SUNKEN": {
        "group": 20,
        "label": "BORDER_SUNKEN",
        "body": "BORDER_SUNKEN",
        "code": [
            {
                "label": "BORDER_SUNKEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Вогнутый вид",
            "en": "Concave form"
        }
    },
    "CHAR_MAX": {
        "group": 20,
        "label": "CHAR_MAX",
        "body": "CHAR_MAX",
        "code": [
            {
                "label": "CHAR_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом char",
            "en": "Maximal value, which can be represented by char type"
        }
    },
    "CHAR_MIN": {
        "group": 20,
        "label": "CHAR_MIN",
        "body": "CHAR_MIN",
        "code": [
            {
                "label": "CHAR_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное значение, которое может быть представлено типом char",
            "en": "Minimal value, which can be represented by char type"
        }
    },
    "CHART_AUTOSCROLL": {
        "group": 20,
        "label": "CHART_AUTOSCROLL",
        "body": "CHART_AUTOSCROLL",
        "code": [
            {
                "label": "CHART_AUTOSCROLL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Режим автоматического перехода к правому краю графика",
            "en": "Mode of automatic moving to the right border of the chart"
        }
    },
    "CHART_BARS": {
        "group": 20,
        "label": "CHART_BARS",
        "body": "CHART_BARS",
        "code": [
            {
                "label": "CHART_BARS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение в виде баров",
            "en": "Display as a sequence of bars"
        }
    },
    "CHART_BEGIN": {
        "group": 20,
        "label": "CHART_BEGIN",
        "body": "CHART_BEGIN",
        "code": [
            {
                "label": "CHART_BEGIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Начало графика (самые старые цены)",
            "en": "Chart beginning (the oldest prices)"
        }
    },
    "CHART_BRING_TO_TOP": {
        "group": 20,
        "label": "CHART_BRING_TO_TOP",
        "body": "CHART_BRING_TO_TOP",
        "code": [
            {
                "label": "CHART_BRING_TO_TOP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Показ графика поверх всех других",
            "en": "Show chart on top of other charts"
        }
    },
    "CHART_CANDLES": {
        "group": 20,
        "label": "CHART_CANDLES",
        "body": "CHART_CANDLES",
        "code": [
            {
                "label": "CHART_CANDLES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение в виде японских свечей",
            "en": "Display as Japanese candlesticks"
        }
    },
    "CHART_COLOR_ASK": {
        "group": 20,
        "label": "CHART_COLOR_ASK",
        "body": "CHART_COLOR_ASK",
        "code": [
            {
                "label": "CHART_COLOR_ASK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет линии Ask-цены",
            "en": "Ask price level color"
        }
    },
    "CHART_COLOR_BACKGROUND": {
        "group": 20,
        "label": "CHART_COLOR_BACKGROUND",
        "body": "CHART_COLOR_BACKGROUND",
        "code": [
            {
                "label": "CHART_COLOR_BACKGROUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет фона графика",
            "en": "Chart background color"
        }
    },
    "CHART_COLOR_BID": {
        "group": 20,
        "label": "CHART_COLOR_BID",
        "body": "CHART_COLOR_BID",
        "code": [
            {
                "label": "CHART_COLOR_BID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет линии Bid-цены",
            "en": "Bid price level color"
        }
    },
    "CHART_COLOR_CANDLE_BEAR": {
        "group": 20,
        "label": "CHART_COLOR_CANDLE_BEAR",
        "body": "CHART_COLOR_CANDLE_BEAR",
        "code": [
            {
                "label": "CHART_COLOR_CANDLE_BEAR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет тела медвежьей свечи",
            "en": "Body color of a bear candlestick"
        }
    },
    "CHART_COLOR_CANDLE_BULL": {
        "group": 20,
        "label": "CHART_COLOR_CANDLE_BULL",
        "body": "CHART_COLOR_CANDLE_BULL",
        "code": [
            {
                "label": "CHART_COLOR_CANDLE_BULL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет тела бычьей свечи",
            "en": "Body color of a bull candlestick"
        }
    },
    "CHART_COLOR_CHART_DOWN": {
        "group": 20,
        "label": "CHART_COLOR_CHART_DOWN",
        "body": "CHART_COLOR_CHART_DOWN",
        "code": [
            {
                "label": "CHART_COLOR_CHART_DOWN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет бара вниз, тени и окантовки тела медвежьей свечи",
            "en": "Color for the down bar, shadows and body borders of bear candlesticks"
        }
    },
    "CHART_COLOR_CHART_LINE": {
        "group": 20,
        "label": "CHART_COLOR_CHART_LINE",
        "body": "CHART_COLOR_CHART_LINE",
        "code": [
            {
                "label": "CHART_COLOR_CHART_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет линии графика и японских свечей \"Доджи\"",
            "en": "Line chart color and color of \"Doji\" Japanese candlesticks"
        }
    },
    "CHART_COLOR_CHART_UP": {
        "group": 20,
        "label": "CHART_COLOR_CHART_UP",
        "body": "CHART_COLOR_CHART_UP",
        "code": [
            {
                "label": "CHART_COLOR_CHART_UP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет бара вверх, тени и окантовки тела бычьей свечи",
            "en": "Color for the up bar, shadows and body borders of bull candlesticks"
        }
    },
    "CHART_COLOR_FOREGROUND": {
        "group": 20,
        "label": "CHART_COLOR_FOREGROUND",
        "body": "CHART_COLOR_FOREGROUND",
        "code": [
            {
                "label": "CHART_COLOR_FOREGROUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет осей, шкалы и строки OHLC",
            "en": "Color of axes, scales and OHLC line"
        }
    },
    "CHART_COLOR_GRID": {
        "group": 20,
        "label": "CHART_COLOR_GRID",
        "body": "CHART_COLOR_GRID",
        "code": [
            {
                "label": "CHART_COLOR_GRID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет сетки",
            "en": "Grid color"
        }
    },
    "CHART_COLOR_LAST": {
        "group": 20,
        "label": "CHART_COLOR_LAST",
        "body": "CHART_COLOR_LAST",
        "code": [
            {
                "label": "CHART_COLOR_LAST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет линии цены последней совершенной сделки (Last)",
            "en": "Line color of the last executed deal price (Last)"
        }
    },
    "CHART_COLOR_STOP_LEVEL": {
        "group": 20,
        "label": "CHART_COLOR_STOP_LEVEL",
        "body": "CHART_COLOR_STOP_LEVEL",
        "code": [
            {
                "label": "CHART_COLOR_STOP_LEVEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет уровней стоп-ордеров (Stop Loss и Take Profit)",
            "en": "Color of stop order levels (Stop Loss and Take Profit)"
        }
    },
    "CHART_COLOR_VOLUME": {
        "group": 20,
        "label": "CHART_COLOR_VOLUME",
        "body": "CHART_COLOR_VOLUME",
        "code": [
            {
                "label": "CHART_COLOR_VOLUME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет объемов и уровней открытия позиций",
            "en": "Color of volumes and position opening levels"
        }
    },
    "CHART_COMMENT": {
        "group": 20,
        "label": "CHART_COMMENT",
        "body": "CHART_COMMENT",
        "code": [
            {
                "label": "CHART_COMMENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текст комментария на графике",
            "en": "Text of a comment in a chart"
        }
    },
    "CHART_CURRENT_POS": {
        "group": 20,
        "label": "CHART_CURRENT_POS",
        "body": "CHART_CURRENT_POS",
        "code": [
            {
                "label": "CHART_CURRENT_POS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущая позиция",
            "en": "Current position"
        }
    },
    "CHART_DRAG_TRADE_LEVELS": {
        "group": 20,
        "label": "CHART_DRAG_TRADE_LEVELS",
        "body": "CHART_DRAG_TRADE_LEVELS",
        "code": [
            {
                "label": "CHART_DRAG_TRADE_LEVELS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешение на перетаскивание торговых уровней на графике с помощью мышки. По умолчанию режим перетаскивания включен (значение true)",
            "en": "Permission to drag trading levels on a chart with a mouse. The drag mode is enabled by default (true value)"
        }
    },
    "CHART_EVENT_MOUSE_MOVE": {
        "group": 20,
        "label": "CHART_EVENT_MOUSE_MOVE",
        "body": "CHART_EVENT_MOUSE_MOVE",
        "code": [
            {
                "label": "CHART_EVENT_MOUSE_MOVE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отправка всем mql5-программам на графике сообщений о событиях перемещения и нажатия кнопок мыши (CHARTEVENT_MOUSE_MOVE)",
            "en": "Send notifications of mouse move and mouse click events (CHARTEVENT_MOUSE_MOVE) to all mql5 programs on a chart"
        }
    },
    "CHART_EVENT_OBJECT_CREATE": {
        "group": 20,
        "label": "CHART_EVENT_OBJECT_CREATE",
        "body": "CHART_EVENT_OBJECT_CREATE",
        "code": [
            {
                "label": "CHART_EVENT_OBJECT_CREATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отправка всем mql5-программам на графике сообщений о событии создания графического объекта (CHARTEVENT_OBJECT_CREATE)",
            "en": "Send a notification of an event of new object creation (CHARTEVENT_OBJECT_CREATE) to all mql5-programs on a chart"
        }
    },
    "CHART_EVENT_OBJECT_DELETE": {
        "group": 20,
        "label": "CHART_EVENT_OBJECT_DELETE",
        "body": "CHART_EVENT_OBJECT_DELETE",
        "code": [
            {
                "label": "CHART_EVENT_OBJECT_DELETE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отправка всем mql5-программам на графике сообщений о событии уничтожения графического объекта (CHARTEVENT_OBJECT_DELETE)",
            "en": "Send a notification of an event of object deletion (CHARTEVENT_OBJECT_DELETE) to all mql5-programs on a chart"
        }
    },
    "CHART_FIRST_VISIBLE_BAR": {
        "group": 20,
        "label": "CHART_FIRST_VISIBLE_BAR",
        "body": "CHART_FIRST_VISIBLE_BAR",
        "code": [
            {
                "label": "CHART_FIRST_VISIBLE_BAR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Номер первого видимого бара на графике. Индексация баров соответствует таймсерии.",
            "en": "Number of the first visible bar in the chart. Indexing of bars is the same as for timeseries."
        }
    },
    "CHART_FIXED_MAX": {
        "group": 20,
        "label": "CHART_FIXED_MAX",
        "body": "CHART_FIXED_MAX",
        "code": [
            {
                "label": "CHART_FIXED_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Фиксированный максимум графика",
            "en": "Fixed  chart maximum"
        }
    },
    "CHART_FIXED_MIN": {
        "group": 20,
        "label": "CHART_FIXED_MIN",
        "body": "CHART_FIXED_MIN",
        "code": [
            {
                "label": "CHART_FIXED_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Фиксированный минимум графика",
            "en": "Fixed  chart minimum"
        }
    },
    "CHART_FIXED_POSITION": {
        "group": 20,
        "label": "CHART_FIXED_POSITION",
        "body": "CHART_FIXED_POSITION",
        "code": [
            {
                "label": "CHART_FIXED_POSITION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Положение фиксированной позиции графика от левого края в процентах. Фиксированная позиция графика обозначена маленьким серым треугольником на горизонтальной оси времени и показывается только в том случае, если отключена автоматическая прокрутка к правому краю при поступлении нового тика (смотри свойство CHART_AUTOSCROLL). Бар, который находится на фиксированной позиции, остаётся на том же месте при увеличении и уменьшении масштаба.",
            "en": "Chart fixed position from the left border in percent value. Chart fixed position is marked by a small gray triangle on the horizontal time axis. It is displayed only if the automatic chart scrolling to the right on tick incoming is disabled (see CHART_AUTOSCROLL property). The bar on a fixed position remains in the same place when zooming in and out."
        }
    },
    "CHART_FOREGROUND": {
        "group": 20,
        "label": "CHART_FOREGROUND",
        "body": "CHART_FOREGROUND",
        "code": [
            {
                "label": "CHART_FOREGROUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ценовой график на переднем плане",
            "en": "Price chart in the foreground"
        }
    },
    "CHART_HEIGHT_IN_PIXELS": {
        "group": 20,
        "label": "CHART_HEIGHT_IN_PIXELS",
        "body": "CHART_HEIGHT_IN_PIXELS",
        "code": [
            {
                "label": "CHART_HEIGHT_IN_PIXELS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Высота графика в пикселях",
            "en": "Chart height in pixels"
        }
    },
    "CHART_IS_OBJECT": {
        "group": 20,
        "label": "CHART_IS_OBJECT",
        "body": "CHART_IS_OBJECT",
        "code": [
            {
                "label": "CHART_IS_OBJECT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак для идентификации объекта \"График\" (OBJ_CHART) – для графического объекта возвращает true. Для настоящего графика значение равно false",
            "en": "Identifying \"Chart\" (OBJ_CHART) object – returns true for a graphical object. Returns false for a real chart"
        }
    },
    "CHART_LINE": {
        "group": 20,
        "label": "CHART_LINE",
        "body": "CHART_LINE",
        "code": [
            {
                "label": "CHART_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение в виде линии, проведенной по ценам Close",
            "en": "Display as a line drawn by Close prices"
        }
    },
    "CHART_MODE": {
        "group": 20,
        "label": "CHART_MODE",
        "body": "CHART_MODE",
        "code": [
            {
                "label": "CHART_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип графика (свечи, бары или линия)",
            "en": "Chart type (candlesticks, bars or line)"
        }
    },
    "CHART_MOUSE_SCROLL": {
        "group": 20,
        "label": "CHART_MOUSE_SCROLL",
        "body": "CHART_MOUSE_SCROLL",
        "code": [
            {
                "label": "CHART_MOUSE_SCROLL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Прокрутка графика левой кнопкой мышки по горизонтали. Прокрутка по вертикали также будет доступна, если установлено в true значение любого из трех свойств: CHART_SCALEFIX, CHART_SCALEFIX_11 или CHART_SCALE_PT_PER_BAR",
            "en": "Scrolling the chart horizontally using the left mouse button. Vertical scrolling is also available if the value of any following properties is set to true: CHART_SCALEFIX, CHART_SCALEFIX_11 or CHART_SCALE_PT_PER_BAR"
        }
    },
    "CHART_POINTS_PER_BAR": {
        "group": 20,
        "label": "CHART_POINTS_PER_BAR",
        "body": "CHART_POINTS_PER_BAR",
        "code": [
            {
                "label": "CHART_POINTS_PER_BAR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение масштаба в пунктах на бар",
            "en": "Scale in points per bar"
        }
    },
    "CHART_PRICE_MAX": {
        "group": 20,
        "label": "CHART_PRICE_MAX",
        "body": "CHART_PRICE_MAX",
        "code": [
            {
                "label": "CHART_PRICE_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимум графика",
            "en": "Chart maximum"
        }
    },
    "CHART_PRICE_MIN": {
        "group": 20,
        "label": "CHART_PRICE_MIN",
        "body": "CHART_PRICE_MIN",
        "code": [
            {
                "label": "CHART_PRICE_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимум графика",
            "en": "Chart minimum"
        }
    },
    "CHART_SCALE": {
        "group": 20,
        "label": "CHART_SCALE",
        "body": "CHART_SCALE",
        "code": [
            {
                "label": "CHART_SCALE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Масштаб",
            "en": "Scale"
        }
    },
    "CHART_SCALE_PT_PER_BAR": {
        "group": 20,
        "label": "CHART_SCALE_PT_PER_BAR",
        "body": "CHART_SCALE_PT_PER_BAR",
        "code": [
            {
                "label": "CHART_SCALE_PT_PER_BAR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Режим указания масштаба в пунктах на бар",
            "en": "Scale to be specified in points per bar"
        }
    },
    "CHART_SCALEFIX": {
        "group": 20,
        "label": "CHART_SCALEFIX",
        "body": "CHART_SCALEFIX",
        "code": [
            {
                "label": "CHART_SCALEFIX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Режим фиксированного масштаба",
            "en": "Fixed scale mode"
        }
    },
    "CHART_SCALEFIX_11": {
        "group": 20,
        "label": "CHART_SCALEFIX_11",
        "body": "CHART_SCALEFIX_11",
        "code": [
            {
                "label": "CHART_SCALEFIX_11",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Режим масштаба 1:1",
            "en": "Scale 1:1 mode"
        }
    },
    "CHART_SHIFT": {
        "group": 20,
        "label": "CHART_SHIFT",
        "body": "CHART_SHIFT",
        "code": [
            {
                "label": "CHART_SHIFT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Режим отступа ценового графика от правого края",
            "en": "Mode of price chart indent from the right border"
        }
    },
    "CHART_SHIFT_SIZE": {
        "group": 20,
        "label": "CHART_SHIFT_SIZE",
        "body": "CHART_SHIFT_SIZE",
        "code": [
            {
                "label": "CHART_SHIFT_SIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер отступа нулевого бара от правого края в процентах",
            "en": "The size of the zero bar indent from the right border in percents"
        }
    },
    "CHART_SHOW_ASK_LINE": {
        "group": 20,
        "label": "CHART_SHOW_ASK_LINE",
        "body": "CHART_SHOW_ASK_LINE",
        "code": [
            {
                "label": "CHART_SHOW_ASK_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение значения Ask горизонтальной линией на графике",
            "en": "Display Ask values as a horizontal line in a chart"
        }
    },
    "CHART_SHOW_BID_LINE": {
        "group": 20,
        "label": "CHART_SHOW_BID_LINE",
        "body": "CHART_SHOW_BID_LINE",
        "code": [
            {
                "label": "CHART_SHOW_BID_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение значения Bid горизонтальной линией на графике",
            "en": "Display Bid values as a horizontal line in a chart"
        }
    },
    "CHART_SHOW_DATE_SCALE": {
        "group": 20,
        "label": "CHART_SHOW_DATE_SCALE",
        "body": "CHART_SHOW_DATE_SCALE",
        "code": [
            {
                "label": "CHART_SHOW_DATE_SCALE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение на графике шкалы времени",
            "en": "Showing the time scale on a chart"
        }
    },
    "CHART_SHOW_GRID": {
        "group": 20,
        "label": "CHART_SHOW_GRID",
        "body": "CHART_SHOW_GRID",
        "code": [
            {
                "label": "CHART_SHOW_GRID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение сетки на графике",
            "en": "Display grid in the chart"
        }
    },
    "CHART_SHOW_LAST_LINE": {
        "group": 20,
        "label": "CHART_SHOW_LAST_LINE",
        "body": "CHART_SHOW_LAST_LINE",
        "code": [
            {
                "label": "CHART_SHOW_LAST_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение значения Last горизонтальной линией на графике",
            "en": "Display Last values as a horizontal line in a chart"
        }
    },
    "CHART_SHOW_OBJECT_DESCR": {
        "group": 20,
        "label": "CHART_SHOW_OBJECT_DESCR",
        "body": "CHART_SHOW_OBJECT_DESCR",
        "code": [
            {
                "label": "CHART_SHOW_OBJECT_DESCR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Всплывающие описания графических объектов",
            "en": "Pop-up descriptions of graphical objects"
        }
    },
    "CHART_SHOW_OHLC": {
        "group": 20,
        "label": "CHART_SHOW_OHLC",
        "body": "CHART_SHOW_OHLC",
        "code": [
            {
                "label": "CHART_SHOW_OHLC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение в левом верхнем углу значений OHLC",
            "en": "Show OHLC values in the upper left corner"
        }
    },
    "CHART_SHOW_ONE_CLICK": {
        "group": 20,
        "label": "CHART_SHOW_ONE_CLICK",
        "body": "CHART_SHOW_ONE_CLICK",
        "code": [
            {
                "label": "CHART_SHOW_ONE_CLICK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение на графике панели быстрой торговли (опция \"Торговля одним кликом\")",
            "en": "Showing the \"One click trading\" panel on a chart"
        }
    },
    "CHART_SHOW_PERIOD_SEP": {
        "group": 20,
        "label": "CHART_SHOW_PERIOD_SEP",
        "body": "CHART_SHOW_PERIOD_SEP",
        "code": [
            {
                "label": "CHART_SHOW_PERIOD_SEP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение вертикальных разделителей между соседними периодами",
            "en": "Display vertical separators between adjacent periods"
        }
    },
    "CHART_SHOW_PRICE_SCALE": {
        "group": 20,
        "label": "CHART_SHOW_PRICE_SCALE",
        "body": "CHART_SHOW_PRICE_SCALE",
        "code": [
            {
                "label": "CHART_SHOW_PRICE_SCALE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение на графике ценовой шкалы",
            "en": "Showing the price scale on a chart"
        }
    },
    "CHART_SHOW_TRADE_LEVELS": {
        "group": 20,
        "label": "CHART_SHOW_TRADE_LEVELS",
        "body": "CHART_SHOW_TRADE_LEVELS",
        "code": [
            {
                "label": "CHART_SHOW_TRADE_LEVELS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение на графике торговых уровней (уровни открытых позиций, Stop Loss, Take Profit и отложенных ордеров)",
            "en": "Displaying trade levels in the chart (levels of open positions, Stop Loss, Take Profit and pending orders)"
        }
    },
    "CHART_SHOW_VOLUMES": {
        "group": 20,
        "label": "CHART_SHOW_VOLUMES",
        "body": "CHART_SHOW_VOLUMES",
        "code": [
            {
                "label": "CHART_SHOW_VOLUMES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение объемов на графике",
            "en": "Display volume in the chart"
        }
    },
    "CHART_VISIBLE_BARS": {
        "group": 20,
        "label": "CHART_VISIBLE_BARS",
        "body": "CHART_VISIBLE_BARS",
        "code": [
            {
                "label": "CHART_VISIBLE_BARS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество баров на графике, доступных для отображения",
            "en": "The number of bars on the chart that can be displayed"
        }
    },
    "CHART_VOLUME_HIDE": {
        "group": 20,
        "label": "CHART_VOLUME_HIDE",
        "body": "CHART_VOLUME_HIDE",
        "code": [
            {
                "label": "CHART_VOLUME_HIDE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объемы не показаны",
            "en": "Volumes are not shown"
        }
    },
    "CHART_VOLUME_REAL": {
        "group": 20,
        "label": "CHART_VOLUME_REAL",
        "body": "CHART_VOLUME_REAL",
        "code": [
            {
                "label": "CHART_VOLUME_REAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Торговые объемы",
            "en": "Trade volumes"
        }
    },
    "CHART_VOLUME_TICK": {
        "group": 20,
        "label": "CHART_VOLUME_TICK",
        "body": "CHART_VOLUME_TICK",
        "code": [
            {
                "label": "CHART_VOLUME_TICK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тиковые объемы",
            "en": "Tick volumes"
        }
    },
    "CHART_WIDTH_IN_BARS": {
        "group": 20,
        "label": "CHART_WIDTH_IN_BARS",
        "body": "CHART_WIDTH_IN_BARS",
        "code": [
            {
                "label": "CHART_WIDTH_IN_BARS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ширина графика в барах",
            "en": "Chart width in bars"
        }
    },
    "CHART_WIDTH_IN_PIXELS": {
        "group": 20,
        "label": "CHART_WIDTH_IN_PIXELS",
        "body": "CHART_WIDTH_IN_PIXELS",
        "code": [
            {
                "label": "CHART_WIDTH_IN_PIXELS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ширина графика в пикселях",
            "en": "Chart width in pixels"
        }
    },
    "CHART_WINDOW_HANDLE": {
        "group": 20,
        "label": "CHART_WINDOW_HANDLE",
        "body": "CHART_WINDOW_HANDLE",
        "code": [
            {
                "label": "CHART_WINDOW_HANDLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Хэндл графика (HWND)",
            "en": "Chart window handle (HWND)"
        }
    },
    "CHART_WINDOW_IS_VISIBLE": {
        "group": 20,
        "label": "CHART_WINDOW_IS_VISIBLE",
        "body": "CHART_WINDOW_IS_VISIBLE",
        "code": [
            {
                "label": "CHART_WINDOW_IS_VISIBLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Видимость подокон",
            "en": "Visibility of subwindows"
        }
    },
    "CHART_WINDOW_YDISTANCE": {
        "group": 20,
        "label": "CHART_WINDOW_YDISTANCE",
        "body": "CHART_WINDOW_YDISTANCE",
        "code": [
            {
                "label": "CHART_WINDOW_YDISTANCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дистанция в пикселях по вертикальной оси Y между верхней рамкой подокна индикатора и верхней рамкой главного окна графика. При наступлении событий мыши координаты курсора передаются в координатах главного окна графика, в то время как координаты графических объектов в подокне индикатора задаются относительно верхнего левого угла подокна. \nЗначение требуется для перевода абсолютных координат главного графика в локальные координаты подокна для корректной работы с графическими объектами, у которых координаты задаются относительно верхнего левого угла рамки подокна.",
            "en": "The distance between the upper frame of the indicator subwindow and the upper frame of the main chart window, along the vertical Y axis, in pixels. In case of a mouse event, the cursor coordinates are passed in terms of the coordinates of the main chart window, while the coordinates of graphical objects in an indicator subwindow are set relative to the upper left corner of the subwindow. \nThe value is required for converting the absolute coordinates of the main chart to the local coordinates of a subwindow for correct work with the graphical objects, whose coordinates are set relative to  the upper left corner of the subwindow frame."
        }
    },
    "CHART_WINDOWS_TOTAL": {
        "group": 20,
        "label": "CHART_WINDOWS_TOTAL",
        "body": "CHART_WINDOWS_TOTAL",
        "code": [
            {
                "label": "CHART_WINDOWS_TOTAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общее количество окон графика, включая подокна индикаторов",
            "en": "The total number of chart windows, including indicator subwindows"
        }
    },
    "CHARTEVENT_CHART_CHANGE": {
        "group": 20,
        "label": "CHARTEVENT_CHART_CHANGE",
        "body": "CHARTEVENT_CHART_CHANGE",
        "code": [
            {
                "label": "CHARTEVENT_CHART_CHANGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изменение размеров графика или изменение свойств графика через диалог свойств",
            "en": "Change of the chart size or modification of chart properties through the Properties dialog"
        }
    },
    "CHARTEVENT_CLICK": {
        "group": 20,
        "label": "CHARTEVENT_CLICK",
        "body": "CHARTEVENT_CLICK",
        "code": [
            {
                "label": "CHARTEVENT_CLICK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нажатие мышки на графике",
            "en": "Clicking on a chart"
        }
    },
    "CHARTEVENT_CUSTOM": {
        "group": 20,
        "label": "CHARTEVENT_CUSTOM",
        "body": "CHARTEVENT_CUSTOM",
        "code": [
            {
                "label": "CHARTEVENT_CUSTOM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Начальный номер события из диапазона пользовательских событий",
            "en": "Initial number of an event from a range of custom events"
        }
    },
    "CHARTEVENT_CUSTOM_LAST": {
        "group": 20,
        "label": "CHARTEVENT_CUSTOM_LAST",
        "body": "CHARTEVENT_CUSTOM_LAST",
        "code": [
            {
                "label": "CHARTEVENT_CUSTOM_LAST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Конечный номер события из диапазона пользовательских событий",
            "en": "The final number of an event from a range of custom events"
        }
    },
    "CHARTEVENT_KEYDOWN": {
        "group": 20,
        "label": "CHARTEVENT_KEYDOWN",
        "body": "CHARTEVENT_KEYDOWN",
        "code": [
            {
                "label": "CHARTEVENT_KEYDOWN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нажатие клавиатуры",
            "en": "Keystrokes"
        }
    },
    "CHARTEVENT_MOUSE_MOVE": {
        "group": 20,
        "label": "CHARTEVENT_MOUSE_MOVE",
        "body": "CHARTEVENT_MOUSE_MOVE",
        "code": [
            {
                "label": "CHARTEVENT_MOUSE_MOVE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Перемещение мыши и нажатие кнопок мыши (если для графика установлено свойство CHART_EVENT_MOUSE_MOVE=true)",
            "en": "Mouse move, mouse clicks (if CHART_EVENT_MOUSE_MOVE=true is set for the chart)"
        }
    },
    "CHARTEVENT_OBJECT_CHANGE": {
        "group": 20,
        "label": "CHARTEVENT_OBJECT_CHANGE",
        "body": "CHARTEVENT_OBJECT_CHANGE",
        "code": [
            {
                "label": "CHARTEVENT_OBJECT_CHANGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изменение свойств графического объекта через диалог свойств",
            "en": "Graphical object property changed via the properties dialog"
        }
    },
    "CHARTEVENT_OBJECT_CLICK": {
        "group": 20,
        "label": "CHARTEVENT_OBJECT_CLICK",
        "body": "CHARTEVENT_OBJECT_CLICK",
        "code": [
            {
                "label": "CHARTEVENT_OBJECT_CLICK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нажатие мышки на графическом объекте",
            "en": "Clicking on a graphical object"
        }
    },
    "CHARTEVENT_OBJECT_CREATE": {
        "group": 20,
        "label": "CHARTEVENT_OBJECT_CREATE",
        "body": "CHARTEVENT_OBJECT_CREATE",
        "code": [
            {
                "label": "CHARTEVENT_OBJECT_CREATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Создание графического объекта (если для графика установлено свойство CHART_EVENT_OBJECT_CREATE=true)",
            "en": "Graphical object created (if CHART_EVENT_OBJECT_CREATE=true is set for the chart)"
        }
    },
    "CHARTEVENT_OBJECT_DELETE": {
        "group": 20,
        "label": "CHARTEVENT_OBJECT_DELETE",
        "body": "CHARTEVENT_OBJECT_DELETE",
        "code": [
            {
                "label": "CHARTEVENT_OBJECT_DELETE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Удаление графического объекта (если для графика установлено свойство CHART_EVENT_OBJECT_DELETE=true)",
            "en": "Graphical object deleted (if CHART_EVENT_OBJECT_DELETE=true is set for the chart)"
        }
    },
    "CHARTEVENT_OBJECT_DRAG": {
        "group": 20,
        "label": "CHARTEVENT_OBJECT_DRAG",
        "body": "CHARTEVENT_OBJECT_DRAG",
        "code": [
            {
                "label": "CHARTEVENT_OBJECT_DRAG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Перетаскивание графического объекта",
            "en": "Drag and drop of a graphical object"
        }
    },
    "CHARTEVENT_OBJECT_ENDEDIT": {
        "group": 20,
        "label": "CHARTEVENT_OBJECT_ENDEDIT",
        "body": "CHARTEVENT_OBJECT_ENDEDIT",
        "code": [
            {
                "label": "CHARTEVENT_OBJECT_ENDEDIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Окончание редактирования текста в графическом объекте Edit",
            "en": "End of text editing in the graphical object Edit"
        }
    },
    "CHARTS_MAX": {
        "group": 20,
        "label": "CHARTS_MAX",
        "body": "CHARTS_MAX",
        "code": [
            {
                "label": "CHARTS_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимально возможное количество одновременно открытых графиков в терминале",
            "en": "The maximum possible number of simultaneously open charts in the terminal"
        }
    },
    "CHIKOUSPAN_LINE": {
        "group": 20,
        "label": "CHIKOUSPAN_LINE",
        "body": "CHIKOUSPAN_LINE",
        "code": [
            {
                "label": "CHIKOUSPAN_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия Chikou Span",
            "en": "Chikou Span line"
        }
    },
    "CORNER_LEFT_LOWER": {
        "group": 20,
        "label": "CORNER_LEFT_LOWER",
        "body": "CORNER_LEFT_LOWER",
        "code": [
            {
                "label": "CORNER_LEFT_LOWER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Центр координат в левом нижнем углу графика",
            "en": "Center of coordinates is in the lower left corner of the chart"
        }
    },
    "CORNER_LEFT_UPPER": {
        "group": 20,
        "label": "CORNER_LEFT_UPPER",
        "body": "CORNER_LEFT_UPPER",
        "code": [
            {
                "label": "CORNER_LEFT_UPPER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Центр координат в левом верхнем углу графика",
            "en": "Center of coordinates is in the upper left corner of the chart"
        }
    },
    "CORNER_RIGHT_LOWER": {
        "group": 20,
        "label": "CORNER_RIGHT_LOWER",
        "body": "CORNER_RIGHT_LOWER",
        "code": [
            {
                "label": "CORNER_RIGHT_LOWER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Центр координат в правом нижнем углу графика",
            "en": "Center of coordinates is in the lower right corner of the chart"
        }
    },
    "CORNER_RIGHT_UPPER": {
        "group": 20,
        "label": "CORNER_RIGHT_UPPER",
        "body": "CORNER_RIGHT_UPPER",
        "code": [
            {
                "label": "CORNER_RIGHT_UPPER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Центр координат в правом верхнем углу графика",
            "en": "Center of coordinates is in the upper right corner of the chart"
        }
    },
    "CP_ACP": {
        "group": 20,
        "label": "CP_ACP",
        "body": "CP_ACP",
        "code": [
            {
                "label": "CP_ACP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущая кодовая страница ANSI кодировка в операционной системе Windows",
            "en": "The current Windows ANSI code page."
        }
    },
    "CP_MACCP": {
        "group": 20,
        "label": "CP_MACCP",
        "body": "CP_MACCP",
        "code": [
            {
                "label": "CP_MACCP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущая кодовая страница Macintosh.\nПримечание: Это значение преимущественно используется в ранее созданных программных кодах и теперь в нем нет необходимости, так как современные компьютеры Macintosh используют Unicode кодировку.",
            "en": "The current system Macintosh code page.\nNote: This value is mostly used in earlier created program codes and is of no use now, since modern Macintosh computers use Unicode for encoding."
        }
    },
    "CP_OEMCP": {
        "group": 20,
        "label": "CP_OEMCP",
        "body": "CP_OEMCP",
        "code": [
            {
                "label": "CP_OEMCP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущая кодовая страница OEM.",
            "en": "The current system OEM code page."
        }
    },
    "CP_SYMBOL": {
        "group": 20,
        "label": "CP_SYMBOL",
        "body": "CP_SYMBOL",
        "code": [
            {
                "label": "CP_SYMBOL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Кодовая страница Symbol",
            "en": "Symbol code page"
        }
    },
    "CP_THREAD_ACP": {
        "group": 20,
        "label": "CP_THREAD_ACP",
        "body": "CP_THREAD_ACP",
        "code": [
            {
                "label": "CP_THREAD_ACP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Кодировка Windows ANSI для текущего потока выполнения.",
            "en": "The Windows ANSI code page for the current thread."
        }
    },
    "CP_UTF7": {
        "group": 20,
        "label": "CP_UTF7",
        "body": "CP_UTF7",
        "code": [
            {
                "label": "CP_UTF7",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Кодовая страница UTF-7.",
            "en": "UTF-7 code page."
        }
    },
    "CP_UTF8": {
        "group": 20,
        "label": "CP_UTF8",
        "body": "CP_UTF8",
        "code": [
            {
                "label": "CP_UTF8",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Кодовая страница UTF-8.",
            "en": "UTF-8 code page."
        }
    },
    "CRYPT_AES128": {
        "group": 20,
        "label": "CRYPT_AES128",
        "body": "CRYPT_AES128",
        "code": [
            {
                "label": "CRYPT_AES128",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Шифрование AES с ключом 128 бит (16 байт)",
            "en": "AES encryption with 128 bit key (16 bytes)"
        }
    },
    "CRYPT_AES256": {
        "group": 20,
        "label": "CRYPT_AES256",
        "body": "CRYPT_AES256",
        "code": [
            {
                "label": "CRYPT_AES256",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Шифрование AES с ключом 256 бит (32 байта)",
            "en": "AES encryption with 256 bit key (32 bytes)"
        }
    },
    "CRYPT_ARCH_ZIP": {
        "group": 20,
        "label": "CRYPT_ARCH_ZIP",
        "body": "CRYPT_ARCH_ZIP",
        "code": [
            {
                "label": "CRYPT_ARCH_ZIP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "ZIP архивирование",
            "en": "ZIP archives"
        }
    },
    "CRYPT_BASE64": {
        "group": 20,
        "label": "CRYPT_BASE64",
        "body": "CRYPT_BASE64",
        "code": [
            {
                "label": "CRYPT_BASE64",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Шифрование BASE64 (перекодировка)",
            "en": "BASE64"
        }
    },
    "CRYPT_DES": {
        "group": 20,
        "label": "CRYPT_DES",
        "body": "CRYPT_DES",
        "code": [
            {
                "label": "CRYPT_DES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Шифрование DES с ключом 56 бит (7 байт)",
            "en": "DES encryption with 56 bit key (7 bytes)"
        }
    },
    "CRYPT_HASH_MD5": {
        "group": 20,
        "label": "CRYPT_HASH_MD5",
        "body": "CRYPT_HASH_MD5",
        "code": [
            {
                "label": "CRYPT_HASH_MD5",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Расчёт HASH MD5",
            "en": "MD5 HASH calculation"
        }
    },
    "CRYPT_HASH_SHA1": {
        "group": 20,
        "label": "CRYPT_HASH_SHA1",
        "body": "CRYPT_HASH_SHA1",
        "code": [
            {
                "label": "CRYPT_HASH_SHA1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Расчёт HASH SHA1",
            "en": "SHA1 HASH calculation"
        }
    },
    "CRYPT_HASH_SHA256": {
        "group": 20,
        "label": "CRYPT_HASH_SHA256",
        "body": "CRYPT_HASH_SHA256",
        "code": [
            {
                "label": "CRYPT_HASH_SHA256",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Расчёт HASH SHA256",
            "en": "SHA256 HASH calculation"
        }
    },
    "DBL_DIG": {
        "group": 20,
        "label": "DBL_DIG",
        "body": "DBL_DIG",
        "code": [
            {
                "label": "DBL_DIG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество значимых десятичных знаков",
            "en": "Number of significant decimal digits for double type"
        }
    },
    "DBL_EPSILON": {
        "group": 20,
        "label": "DBL_EPSILON",
        "body": "DBL_EPSILON",
        "code": [
            {
                "label": "DBL_EPSILON",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Наименьшее число для которого выполняется условие 1.0+DBL_EPSILON != 1.0",
            "en": "Minimal value, which satisfies the condition:\n1.0+DBL_EPSILON != 1.0 (for double type)"
        }
    },
    "DBL_MANT_DIG": {
        "group": 20,
        "label": "DBL_MANT_DIG",
        "body": "DBL_MANT_DIG",
        "code": [
            {
                "label": "DBL_MANT_DIG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество битов в мантиссе",
            "en": "Bits count in a mantissa for double type"
        }
    },
    "DBL_MAX": {
        "group": 20,
        "label": "DBL_MAX",
        "body": "DBL_MAX",
        "code": [
            {
                "label": "DBL_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом double",
            "en": "Maximal value, which can be represented by double type"
        }
    },
    "DBL_MAX_10_EXP": {
        "group": 20,
        "label": "DBL_MAX_10_EXP",
        "body": "DBL_MAX_10_EXP",
        "code": [
            {
                "label": "DBL_MAX_10_EXP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное десятичное значение степени экспоненты",
            "en": "Maximal decimal value of exponent degree for double type"
        }
    },
    "DBL_MAX_EXP": {
        "group": 20,
        "label": "DBL_MAX_EXP",
        "body": "DBL_MAX_EXP",
        "code": [
            {
                "label": "DBL_MAX_EXP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное двоичное значение степени экспоненты",
            "en": "Maximal binary value of exponent degree for double type"
        }
    },
    "DBL_MIN": {
        "group": 20,
        "label": "DBL_MIN",
        "body": "DBL_MIN",
        "code": [
            {
                "label": "DBL_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное положительное значение, которое может быть  представлено типом double",
            "en": "Minimal positive value, which can be represented by double type"
        }
    },
    "DBL_MIN_10_EXP": {
        "group": 20,
        "label": "DBL_MIN_10_EXP",
        "body": "DBL_MIN_10_EXP",
        "code": [
            {
                "label": "DBL_MIN_10_EXP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное десятичное значение степени экспоненты",
            "en": "Minimal decimal value of exponent degree for double type"
        }
    },
    "DBL_MIN_EXP": {
        "group": 20,
        "label": "DBL_MIN_EXP",
        "body": "DBL_MIN_EXP",
        "code": [
            {
                "label": "DBL_MIN_EXP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное двоичное значение степени экспоненты",
            "en": "Minimal binary value of exponent degree for double type"
        }
    },
    "DEAL_COMMENT": {
        "group": 20,
        "label": "DEAL_COMMENT",
        "body": "DEAL_COMMENT",
        "code": [
            {
                "label": "DEAL_COMMENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Комментарий к сделке",
            "en": "Deal comment"
        }
    },
    "DEAL_COMMISSION": {
        "group": 20,
        "label": "DEAL_COMMISSION",
        "body": "DEAL_COMMISSION",
        "code": [
            {
                "label": "DEAL_COMMISSION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Комиссия по сделке",
            "en": "Deal commission"
        }
    },
    "DEAL_ENTRY": {
        "group": 20,
        "label": "DEAL_ENTRY",
        "body": "DEAL_ENTRY",
        "code": [
            {
                "label": "DEAL_ENTRY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Направление сделки – вход в рынок, выход из рынка или разворот",
            "en": "Deal entry - entry in, entry out, reverse"
        }
    },
    "DEAL_ENTRY_IN": {
        "group": 20,
        "label": "DEAL_ENTRY_IN",
        "body": "DEAL_ENTRY_IN",
        "code": [
            {
                "label": "DEAL_ENTRY_IN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Вход в рынок",
            "en": "Entry in"
        }
    },
    "DEAL_ENTRY_INOUT": {
        "group": 20,
        "label": "DEAL_ENTRY_INOUT",
        "body": "DEAL_ENTRY_INOUT",
        "code": [
            {
                "label": "DEAL_ENTRY_INOUT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разворот",
            "en": "Reverse"
        }
    },
    "DEAL_ENTRY_OUT": {
        "group": 20,
        "label": "DEAL_ENTRY_OUT",
        "body": "DEAL_ENTRY_OUT",
        "code": [
            {
                "label": "DEAL_ENTRY_OUT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выход из рынка",
            "en": "Entry out"
        }
    },
    "DEAL_MAGIC": {
        "group": 20,
        "label": "DEAL_MAGIC",
        "body": "DEAL_MAGIC",
        "code": [
            {
                "label": "DEAL_MAGIC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Magic number для сделки (смотри ORDER_MAGIC)",
            "en": "Deal magic number (see ORDER_MAGIC)"
        }
    },
    "DEAL_ORDER": {
        "group": 20,
        "label": "DEAL_ORDER",
        "body": "DEAL_ORDER",
        "code": [
            {
                "label": "DEAL_ORDER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер, на основание которого выполнена сделка",
            "en": "Deal order number"
        }
    },
    "DEAL_POSITION_ID": {
        "group": 20,
        "label": "DEAL_POSITION_ID",
        "body": "DEAL_POSITION_ID",
        "code": [
            {
                "label": "DEAL_POSITION_ID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Идентификатор позиции, в открытии, изменении или закрытии которой участвовала эта сделка. Каждая позиция имеет уникальный идентификатор, который присваивается всем сделкам, совершенным на инструменте в течение всей жизни позиции.",
            "en": "Identifier of a position, in the opening, modification or change of which this deal took part. Each position has a unique identifier that is assigned to all deals executed for the symbol during the entire lifetime of the position."
        }
    },
    "DEAL_PRICE": {
        "group": 20,
        "label": "DEAL_PRICE",
        "body": "DEAL_PRICE",
        "code": [
            {
                "label": "DEAL_PRICE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена сделки",
            "en": "Deal price"
        }
    },
    "DEAL_PROFIT": {
        "group": 20,
        "label": "DEAL_PROFIT",
        "body": "DEAL_PROFIT",
        "code": [
            {
                "label": "DEAL_PROFIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Финансовый результат сделки",
            "en": "Deal profit"
        }
    },
    "DEAL_SWAP": {
        "group": 20,
        "label": "DEAL_SWAP",
        "body": "DEAL_SWAP",
        "code": [
            {
                "label": "DEAL_SWAP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Накопленный своп при закрытии",
            "en": "Cumulative swap on close"
        }
    },
    "DEAL_SYMBOL": {
        "group": 20,
        "label": "DEAL_SYMBOL",
        "body": "DEAL_SYMBOL",
        "code": [
            {
                "label": "DEAL_SYMBOL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя символа, по которому произведена сделка",
            "en": "Deal symbol"
        }
    },
    "DEAL_TIME": {
        "group": 20,
        "label": "DEAL_TIME",
        "body": "DEAL_TIME",
        "code": [
            {
                "label": "DEAL_TIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время совершения сделки",
            "en": "Deal time"
        }
    },
    "DEAL_TIME_MSC": {
        "group": 20,
        "label": "DEAL_TIME_MSC",
        "body": "DEAL_TIME_MSC",
        "code": [
            {
                "label": "DEAL_TIME_MSC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время совершения сделки в миллисекундах с 01.01.1970",
            "en": "The time of a deal execution in milliseconds since 01.01.1970"
        }
    },
    "DEAL_TYPE": {
        "group": 20,
        "label": "DEAL_TYPE",
        "body": "DEAL_TYPE",
        "code": [
            {
                "label": "DEAL_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип сделки",
            "en": "Deal type"
        }
    },
    "DEAL_TYPE_BALANCE": {
        "group": 20,
        "label": "DEAL_TYPE_BALANCE",
        "body": "DEAL_TYPE_BALANCE",
        "code": [
            {
                "label": "DEAL_TYPE_BALANCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Начисление баланса",
            "en": "Balance"
        }
    },
    "DEAL_TYPE_BONUS": {
        "group": 20,
        "label": "DEAL_TYPE_BONUS",
        "body": "DEAL_TYPE_BONUS",
        "code": [
            {
                "label": "DEAL_TYPE_BONUS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Перечисление бонусов",
            "en": "Bonus"
        }
    },
    "DEAL_TYPE_BUY": {
        "group": 20,
        "label": "DEAL_TYPE_BUY",
        "body": "DEAL_TYPE_BUY",
        "code": [
            {
                "label": "DEAL_TYPE_BUY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Покупка",
            "en": "Buy"
        }
    },
    "DEAL_TYPE_BUY_CANCELED": {
        "group": 20,
        "label": "DEAL_TYPE_BUY_CANCELED",
        "body": "DEAL_TYPE_BUY_CANCELED",
        "code": [
            {
                "label": "DEAL_TYPE_BUY_CANCELED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отмененная сделка покупки. Возможная ситуация, когда ранее совершенная сделка на покупку отменяется. В таком случае тип ранее совершенной сделки (DEAL_TYPE_BUY) меняется на DEAL_TYPE_BUY_CANCELED, а ее прибыль/убыток обнуляется. Ранее полученная прибыль/убыток начисляется/списывается со счета отдельной балансовой операцией",
            "en": "Canceled buy deal. There can be a situation when a previously executed buy deal is canceled. In this case, the type of the previously executed deal (DEAL_TYPE_BUY) is changed to DEAL_TYPE_BUY_CANCELED, and its profit/loss is zeroized. Previously obtained profit/loss is charged/withdrawn using a separated balance operation"
        }
    },
    "DEAL_TYPE_CHARGE": {
        "group": 20,
        "label": "DEAL_TYPE_CHARGE",
        "body": "DEAL_TYPE_CHARGE",
        "code": [
            {
                "label": "DEAL_TYPE_CHARGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дополнительные сборы",
            "en": "Additional charge"
        }
    },
    "DEAL_TYPE_COMMISSION": {
        "group": 20,
        "label": "DEAL_TYPE_COMMISSION",
        "body": "DEAL_TYPE_COMMISSION",
        "code": [
            {
                "label": "DEAL_TYPE_COMMISSION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дополнительные комиссии",
            "en": "Additional commission"
        }
    },
    "DEAL_TYPE_COMMISSION_AGENT_DAILY": {
        "group": 20,
        "label": "DEAL_TYPE_COMMISSION_AGENT_DAILY",
        "body": "DEAL_TYPE_COMMISSION_AGENT_DAILY",
        "code": [
            {
                "label": "DEAL_TYPE_COMMISSION_AGENT_DAILY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Агентская комиссия, начисляемая в конце торгового дня",
            "en": "Daily agent commission"
        }
    },
    "DEAL_TYPE_COMMISSION_AGENT_MONTHLY": {
        "group": 20,
        "label": "DEAL_TYPE_COMMISSION_AGENT_MONTHLY",
        "body": "DEAL_TYPE_COMMISSION_AGENT_MONTHLY",
        "code": [
            {
                "label": "DEAL_TYPE_COMMISSION_AGENT_MONTHLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Агентская комиссия, начисляемая в конце месяца",
            "en": "Monthly agent commission"
        }
    },
    "DEAL_TYPE_COMMISSION_DAILY": {
        "group": 20,
        "label": "DEAL_TYPE_COMMISSION_DAILY",
        "body": "DEAL_TYPE_COMMISSION_DAILY",
        "code": [
            {
                "label": "DEAL_TYPE_COMMISSION_DAILY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Комиссия, начисляемая в конце торгового дня",
            "en": "Daily commission"
        }
    },
    "DEAL_TYPE_COMMISSION_MONTHLY": {
        "group": 20,
        "label": "DEAL_TYPE_COMMISSION_MONTHLY",
        "body": "DEAL_TYPE_COMMISSION_MONTHLY",
        "code": [
            {
                "label": "DEAL_TYPE_COMMISSION_MONTHLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Комиссия, начисляемая в конце месяца",
            "en": "Monthly commission"
        }
    },
    "DEAL_TYPE_CORRECTION": {
        "group": 20,
        "label": "DEAL_TYPE_CORRECTION",
        "body": "DEAL_TYPE_CORRECTION",
        "code": [
            {
                "label": "DEAL_TYPE_CORRECTION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Корректирующая запись",
            "en": "Correction"
        }
    },
    "DEAL_TYPE_CREDIT": {
        "group": 20,
        "label": "DEAL_TYPE_CREDIT",
        "body": "DEAL_TYPE_CREDIT",
        "code": [
            {
                "label": "DEAL_TYPE_CREDIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Начисление кредита",
            "en": "Credit"
        }
    },
    "DEAL_TYPE_INTEREST": {
        "group": 20,
        "label": "DEAL_TYPE_INTEREST",
        "body": "DEAL_TYPE_INTEREST",
        "code": [
            {
                "label": "DEAL_TYPE_INTEREST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Начисления процентов на свободные средства",
            "en": "Interest rate"
        }
    },
    "DEAL_TYPE_SELL": {
        "group": 20,
        "label": "DEAL_TYPE_SELL",
        "body": "DEAL_TYPE_SELL",
        "code": [
            {
                "label": "DEAL_TYPE_SELL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Продажа",
            "en": "Sell"
        }
    },
    "DEAL_TYPE_SELL_CANCELED": {
        "group": 20,
        "label": "DEAL_TYPE_SELL_CANCELED",
        "body": "DEAL_TYPE_SELL_CANCELED",
        "code": [
            {
                "label": "DEAL_TYPE_SELL_CANCELED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отмененная сделка продажи. Возможная ситуация, когда ранее совершенная сделка на продажу отменяется. В таком случае тип ранее совершенной сделки (DEAL_TYPE_SELL) меняется на DEAL_TYPE_SELL_CANCELED, а ее прибыль/убыток обнуляется. Ранее полученная прибыль/убыток начисляется/списывается со счета отдельной балансовой операцией",
            "en": "Canceled sell deal. There can be a situation when a previously executed sell deal is canceled. In this case, the type of the previously executed deal (DEAL_TYPE_SELL) is changed to DEAL_TYPE_SELL_CANCELED, and its profit/loss is zeroized. Previously obtained profit/loss is charged/withdrawn using a separated balance operation"
        }
    },
    "DEAL_VOLUME": {
        "group": 20,
        "label": "DEAL_VOLUME",
        "body": "DEAL_VOLUME",
        "code": [
            {
                "label": "DEAL_VOLUME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объем сделки",
            "en": "Deal volume"
        }
    },
    "DRAW_ARROW": {
        "group": 20,
        "label": "DRAW_ARROW",
        "body": "DRAW_ARROW",
        "code": [
            {
                "label": "DRAW_ARROW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отрисовка стрелками",
            "en": "Drawing arrows"
        }
    },
    "DRAW_BARS": {
        "group": 20,
        "label": "DRAW_BARS",
        "body": "DRAW_BARS",
        "code": [
            {
                "label": "DRAW_BARS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение в виде баров",
            "en": "Display as a sequence of bars"
        }
    },
    "DRAW_CANDLES": {
        "group": 20,
        "label": "DRAW_CANDLES",
        "body": "DRAW_CANDLES",
        "code": [
            {
                "label": "DRAW_CANDLES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение в виде свечей",
            "en": "Display as a sequence of candlesticks"
        }
    },
    "DRAW_COLOR_ARROW": {
        "group": 20,
        "label": "DRAW_COLOR_ARROW",
        "body": "DRAW_COLOR_ARROW",
        "code": [
            {
                "label": "DRAW_COLOR_ARROW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отрисовка разноцветными стрелками",
            "en": "Drawing multicolored arrows"
        }
    },
    "DRAW_COLOR_BARS": {
        "group": 20,
        "label": "DRAW_COLOR_BARS",
        "body": "DRAW_COLOR_BARS",
        "code": [
            {
                "label": "DRAW_COLOR_BARS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разноцветные бары",
            "en": "Multicolored bars"
        }
    },
    "DRAW_COLOR_CANDLES": {
        "group": 20,
        "label": "DRAW_COLOR_CANDLES",
        "body": "DRAW_COLOR_CANDLES",
        "code": [
            {
                "label": "DRAW_COLOR_CANDLES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разноцветные свечи",
            "en": "Multicolored candlesticks"
        }
    },
    "DRAW_COLOR_HISTOGRAM": {
        "group": 20,
        "label": "DRAW_COLOR_HISTOGRAM",
        "body": "DRAW_COLOR_HISTOGRAM",
        "code": [
            {
                "label": "DRAW_COLOR_HISTOGRAM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разноцветная гистограмма от нулевой линии",
            "en": "Multicolored histogram from the zero line"
        }
    },
    "DRAW_COLOR_HISTOGRAM2": {
        "group": 20,
        "label": "DRAW_COLOR_HISTOGRAM2",
        "body": "DRAW_COLOR_HISTOGRAM2",
        "code": [
            {
                "label": "DRAW_COLOR_HISTOGRAM2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разноцветная гистограмма на двух индикаторных буферах",
            "en": "Multicolored histogram of the two indicator buffers"
        }
    },
    "DRAW_COLOR_LINE": {
        "group": 20,
        "label": "DRAW_COLOR_LINE",
        "body": "DRAW_COLOR_LINE",
        "code": [
            {
                "label": "DRAW_COLOR_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разноцветная линия",
            "en": "Multicolored line"
        }
    },
    "DRAW_COLOR_SECTION": {
        "group": 20,
        "label": "DRAW_COLOR_SECTION",
        "body": "DRAW_COLOR_SECTION",
        "code": [
            {
                "label": "DRAW_COLOR_SECTION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разноцветные отрезки",
            "en": "Multicolored section"
        }
    },
    "DRAW_COLOR_ZIGZAG": {
        "group": 20,
        "label": "DRAW_COLOR_ZIGZAG",
        "body": "DRAW_COLOR_ZIGZAG",
        "code": [
            {
                "label": "DRAW_COLOR_ZIGZAG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разноцветный ZigZag",
            "en": "Multicolored ZigZag"
        }
    },
    "DRAW_FILLING": {
        "group": 20,
        "label": "DRAW_FILLING",
        "body": "DRAW_FILLING",
        "code": [
            {
                "label": "DRAW_FILLING",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цветовая заливка между двумя уровнями",
            "en": "Color fill between the two levels"
        }
    },
    "DRAW_HISTOGRAM": {
        "group": 20,
        "label": "DRAW_HISTOGRAM",
        "body": "DRAW_HISTOGRAM",
        "code": [
            {
                "label": "DRAW_HISTOGRAM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Гистограмма от нулевой линии",
            "en": "Histogram from the zero line"
        }
    },
    "DRAW_HISTOGRAM2": {
        "group": 20,
        "label": "DRAW_HISTOGRAM2",
        "body": "DRAW_HISTOGRAM2",
        "code": [
            {
                "label": "DRAW_HISTOGRAM2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Гистограмма на двух индикаторных буферах",
            "en": "Histogram of the two indicator buffers"
        }
    },
    "DRAW_LINE": {
        "group": 20,
        "label": "DRAW_LINE",
        "body": "DRAW_LINE",
        "code": [
            {
                "label": "DRAW_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия",
            "en": "Line"
        }
    },
    "DRAW_NONE": {
        "group": 20,
        "label": "DRAW_NONE",
        "body": "DRAW_NONE",
        "code": [
            {
                "label": "DRAW_NONE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не отрисовывается",
            "en": "Not drawn"
        }
    },
    "DRAW_SECTION": {
        "group": 20,
        "label": "DRAW_SECTION",
        "body": "DRAW_SECTION",
        "code": [
            {
                "label": "DRAW_SECTION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отрезки",
            "en": "Section"
        }
    },
    "DRAW_ZIGZAG": {
        "group": 20,
        "label": "DRAW_ZIGZAG",
        "body": "DRAW_ZIGZAG",
        "code": [
            {
                "label": "DRAW_ZIGZAG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Стиль Zigzag допускает вертикальные отрезки на баре",
            "en": "Style Zigzag allows vertical section on the bar"
        }
    },
    "ELLIOTT_CYCLE": {
        "group": 20,
        "label": "ELLIOTT_CYCLE",
        "body": "ELLIOTT_CYCLE",
        "code": [
            {
                "label": "ELLIOTT_CYCLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цикл (Cycle)",
            "en": "Cycle"
        }
    },
    "ELLIOTT_GRAND_SUPERCYCLE": {
        "group": 20,
        "label": "ELLIOTT_GRAND_SUPERCYCLE",
        "body": "ELLIOTT_GRAND_SUPERCYCLE",
        "code": [
            {
                "label": "ELLIOTT_GRAND_SUPERCYCLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Главный Суперцикл (Grand Supercycle)",
            "en": "Grand Supercycle"
        }
    },
    "ELLIOTT_INTERMEDIATE": {
        "group": 20,
        "label": "ELLIOTT_INTERMEDIATE",
        "body": "ELLIOTT_INTERMEDIATE",
        "code": [
            {
                "label": "ELLIOTT_INTERMEDIATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Промежуточное звено (Intermediate)",
            "en": "Intermediate"
        }
    },
    "ELLIOTT_MINOR": {
        "group": 20,
        "label": "ELLIOTT_MINOR",
        "body": "ELLIOTT_MINOR",
        "code": [
            {
                "label": "ELLIOTT_MINOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Второстепенный цикл (Minor)",
            "en": "Minor"
        }
    },
    "ELLIOTT_MINUETTE": {
        "group": 20,
        "label": "ELLIOTT_MINUETTE",
        "body": "ELLIOTT_MINUETTE",
        "code": [
            {
                "label": "ELLIOTT_MINUETTE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Секунда (Minuette)",
            "en": "Minuette"
        }
    },
    "ELLIOTT_MINUTE": {
        "group": 20,
        "label": "ELLIOTT_MINUTE",
        "body": "ELLIOTT_MINUTE",
        "code": [
            {
                "label": "ELLIOTT_MINUTE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минута (Minute)",
            "en": "Minute"
        }
    },
    "ELLIOTT_PRIMARY": {
        "group": 20,
        "label": "ELLIOTT_PRIMARY",
        "body": "ELLIOTT_PRIMARY",
        "code": [
            {
                "label": "ELLIOTT_PRIMARY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Первичный цикл (Primary)",
            "en": "Primary"
        }
    },
    "ELLIOTT_SUBMINUETTE": {
        "group": 20,
        "label": "ELLIOTT_SUBMINUETTE",
        "body": "ELLIOTT_SUBMINUETTE",
        "code": [
            {
                "label": "ELLIOTT_SUBMINUETTE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Субсекунда (Subminuette)",
            "en": "Subminuette"
        }
    },
    "ELLIOTT_SUPERCYCLE": {
        "group": 20,
        "label": "ELLIOTT_SUPERCYCLE",
        "body": "ELLIOTT_SUPERCYCLE",
        "code": [
            {
                "label": "ELLIOTT_SUPERCYCLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Суперцикл (Supercycle)",
            "en": "Supercycle"
        }
    },
    "EMPTY_VALUE": {
        "group": 20,
        "label": "EMPTY_VALUE",
        "body": "EMPTY_VALUE",
        "code": [
            {
                "label": "EMPTY_VALUE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Пустое значение в индикаторном буфере",
            "en": "Empty value in an indicator buffer"
        }
    },
    "ERR_ACCOUNT_WRONG_PROPERTY": {
        "group": 20,
        "label": "ERR_ACCOUNT_WRONG_PROPERTY",
        "body": "ERR_ACCOUNT_WRONG_PROPERTY",
        "code": [
            {
                "label": "ERR_ACCOUNT_WRONG_PROPERTY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор свойства счета",
            "en": "Wrong account property ID"
        }
    },
    "ERR_ARRAY_BAD_SIZE": {
        "group": 20,
        "label": "ERR_ARRAY_BAD_SIZE",
        "body": "ERR_ARRAY_BAD_SIZE",
        "code": [
            {
                "label": "ERR_ARRAY_BAD_SIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Запрашиваемый размер массива превышает 2 гигабайта",
            "en": "Requested array size exceeds 2 GB"
        }
    },
    "ERR_ARRAY_RESIZE_ERROR": {
        "group": 20,
        "label": "ERR_ARRAY_RESIZE_ERROR",
        "body": "ERR_ARRAY_RESIZE_ERROR",
        "code": [
            {
                "label": "ERR_ARRAY_RESIZE_ERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Недостаточно памяти для перераспределения массива либо попытка изменения размера статического массива",
            "en": "Not enough memory for the relocation of an array, or an attempt to change the size of a static array"
        }
    },
    "ERR_BOOKS_CANNOT_ADD": {
        "group": 20,
        "label": "ERR_BOOKS_CANNOT_ADD",
        "body": "ERR_BOOKS_CANNOT_ADD",
        "code": [
            {
                "label": "ERR_BOOKS_CANNOT_ADD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Стакан цен не может быть добавлен",
            "en": "Depth Of Market can not be added"
        }
    },
    "ERR_BOOKS_CANNOT_DELETE": {
        "group": 20,
        "label": "ERR_BOOKS_CANNOT_DELETE",
        "body": "ERR_BOOKS_CANNOT_DELETE",
        "code": [
            {
                "label": "ERR_BOOKS_CANNOT_DELETE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Стакан цен не может быть удален",
            "en": "Depth Of Market can not be removed"
        }
    },
    "ERR_BOOKS_CANNOT_GET": {
        "group": 20,
        "label": "ERR_BOOKS_CANNOT_GET",
        "body": "ERR_BOOKS_CANNOT_GET",
        "code": [
            {
                "label": "ERR_BOOKS_CANNOT_GET",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Данные стакана цен не могут быть получены",
            "en": "The data from Depth Of Market can not be obtained"
        }
    },
    "ERR_BOOKS_CANNOT_SUBSCRIBE": {
        "group": 20,
        "label": "ERR_BOOKS_CANNOT_SUBSCRIBE",
        "body": "ERR_BOOKS_CANNOT_SUBSCRIBE",
        "code": [
            {
                "label": "ERR_BOOKS_CANNOT_SUBSCRIBE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при подписке на получение новых данных стакана цен",
            "en": "Error in subscribing to receive new data from Depth Of Market"
        }
    },
    "ERR_BUFFERS_NO_MEMORY": {
        "group": 20,
        "label": "ERR_BUFFERS_NO_MEMORY",
        "body": "ERR_BUFFERS_NO_MEMORY",
        "code": [
            {
                "label": "ERR_BUFFERS_NO_MEMORY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Недостаточно памяти для распределения индикаторных буферов",
            "en": "Not enough memory for the distribution of indicator buffers"
        }
    },
    "ERR_BUFFERS_WRONG_INDEX": {
        "group": 20,
        "label": "ERR_BUFFERS_WRONG_INDEX",
        "body": "ERR_BUFFERS_WRONG_INDEX",
        "code": [
            {
                "label": "ERR_BUFFERS_WRONG_INDEX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный индекс своего индикаторного буфера",
            "en": "Wrong indicator buffer index"
        }
    },
    "ERR_CANNOT_CLEAN_DIRECTORY": {
        "group": 20,
        "label": "ERR_CANNOT_CLEAN_DIRECTORY",
        "body": "ERR_CANNOT_CLEAN_DIRECTORY",
        "code": [
            {
                "label": "ERR_CANNOT_CLEAN_DIRECTORY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не удалось очистить директорию (возможно, один или несколько файлов заблокированы и операция удаления не удалась)",
            "en": "Failed to clear the directory (probably one or more files are blocked and removal operation failed)"
        }
    },
    "ERR_CANNOT_DELETE_DIRECTORY": {
        "group": 20,
        "label": "ERR_CANNOT_DELETE_DIRECTORY",
        "body": "ERR_CANNOT_DELETE_DIRECTORY",
        "code": [
            {
                "label": "ERR_CANNOT_DELETE_DIRECTORY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Директория не может быть удалена",
            "en": "The directory cannot be removed"
        }
    },
    "ERR_CANNOT_DELETE_FILE": {
        "group": 20,
        "label": "ERR_CANNOT_DELETE_FILE",
        "body": "ERR_CANNOT_DELETE_FILE",
        "code": [
            {
                "label": "ERR_CANNOT_DELETE_FILE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка удаления файла",
            "en": "File deleting error"
        }
    },
    "ERR_CANNOT_OPEN_FILE": {
        "group": 20,
        "label": "ERR_CANNOT_OPEN_FILE",
        "body": "ERR_CANNOT_OPEN_FILE",
        "code": [
            {
                "label": "ERR_CANNOT_OPEN_FILE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка открытия файла",
            "en": "File opening error"
        }
    },
    "ERR_CHAR_ARRAY_ONLY": {
        "group": 20,
        "label": "ERR_CHAR_ARRAY_ONLY",
        "body": "ERR_CHAR_ARRAY_ONLY",
        "code": [
            {
                "label": "ERR_CHAR_ARRAY_ONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Должен быть массив типа char",
            "en": "Must be an array of type char"
        }
    },
    "ERR_CHART_CANNOT_CHANGE": {
        "group": 20,
        "label": "ERR_CHART_CANNOT_CHANGE",
        "body": "ERR_CHART_CANNOT_CHANGE",
        "code": [
            {
                "label": "ERR_CHART_CANNOT_CHANGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при изменении для графика символа и периода",
            "en": "Failed to change chart symbol and period"
        }
    },
    "ERR_CHART_CANNOT_CREATE_TIMER": {
        "group": 20,
        "label": "ERR_CHART_CANNOT_CREATE_TIMER",
        "body": "ERR_CHART_CANNOT_CREATE_TIMER",
        "code": [
            {
                "label": "ERR_CHART_CANNOT_CREATE_TIMER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при создании таймера",
            "en": "Failed to create timer"
        }
    },
    "ERR_CHART_CANNOT_OPEN": {
        "group": 20,
        "label": "ERR_CHART_CANNOT_OPEN",
        "body": "ERR_CHART_CANNOT_OPEN",
        "code": [
            {
                "label": "ERR_CHART_CANNOT_OPEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка открытия графика",
            "en": "Chart opening error"
        }
    },
    "ERR_CHART_INDICATOR_CANNOT_ADD": {
        "group": 20,
        "label": "ERR_CHART_INDICATOR_CANNOT_ADD",
        "body": "ERR_CHART_INDICATOR_CANNOT_ADD",
        "code": [
            {
                "label": "ERR_CHART_INDICATOR_CANNOT_ADD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при добавлении индикатора на график",
            "en": "Error adding an indicator to chart"
        }
    },
    "ERR_CHART_INDICATOR_CANNOT_DEL": {
        "group": 20,
        "label": "ERR_CHART_INDICATOR_CANNOT_DEL",
        "body": "ERR_CHART_INDICATOR_CANNOT_DEL",
        "code": [
            {
                "label": "ERR_CHART_INDICATOR_CANNOT_DEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при удалении индикатора с графика",
            "en": "Error deleting an indicator from the chart"
        }
    },
    "ERR_CHART_INDICATOR_NOT_FOUND": {
        "group": 20,
        "label": "ERR_CHART_INDICATOR_NOT_FOUND",
        "body": "ERR_CHART_INDICATOR_NOT_FOUND",
        "code": [
            {
                "label": "ERR_CHART_INDICATOR_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Индикатор не найден на указанном графике",
            "en": "Indicator not found on the specified chart"
        }
    },
    "ERR_CHART_NAVIGATE_FAILED": {
        "group": 20,
        "label": "ERR_CHART_NAVIGATE_FAILED",
        "body": "ERR_CHART_NAVIGATE_FAILED",
        "code": [
            {
                "label": "ERR_CHART_NAVIGATE_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка навигации по графику",
            "en": "Error navigating through chart"
        }
    },
    "ERR_CHART_NO_EXPERT": {
        "group": 20,
        "label": "ERR_CHART_NO_EXPERT",
        "body": "ERR_CHART_NO_EXPERT",
        "code": [
            {
                "label": "ERR_CHART_NO_EXPERT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "У графика нет эксперта, который мог бы обработать событие",
            "en": "No Expert Advisor in the chart that could handle the event"
        }
    },
    "ERR_CHART_NO_REPLY": {
        "group": 20,
        "label": "ERR_CHART_NO_REPLY",
        "body": "ERR_CHART_NO_REPLY",
        "code": [
            {
                "label": "ERR_CHART_NO_REPLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "График не отвечает",
            "en": "Chart does not respond"
        }
    },
    "ERR_CHART_NOT_FOUND": {
        "group": 20,
        "label": "ERR_CHART_NOT_FOUND",
        "body": "ERR_CHART_NOT_FOUND",
        "code": [
            {
                "label": "ERR_CHART_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "График не найден",
            "en": "Chart not found"
        }
    },
    "ERR_CHART_SCREENSHOT_FAILED": {
        "group": 20,
        "label": "ERR_CHART_SCREENSHOT_FAILED",
        "body": "ERR_CHART_SCREENSHOT_FAILED",
        "code": [
            {
                "label": "ERR_CHART_SCREENSHOT_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при создании скриншота",
            "en": "Error creating screenshots"
        }
    },
    "ERR_CHART_TEMPLATE_FAILED": {
        "group": 20,
        "label": "ERR_CHART_TEMPLATE_FAILED",
        "body": "ERR_CHART_TEMPLATE_FAILED",
        "code": [
            {
                "label": "ERR_CHART_TEMPLATE_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при применении шаблона",
            "en": "Error applying template"
        }
    },
    "ERR_CHART_WINDOW_NOT_FOUND": {
        "group": 20,
        "label": "ERR_CHART_WINDOW_NOT_FOUND",
        "body": "ERR_CHART_WINDOW_NOT_FOUND",
        "code": [
            {
                "label": "ERR_CHART_WINDOW_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Подокно, содержащее указанный индикатор, не найдено",
            "en": "Subwindow containing the indicator was not found"
        }
    },
    "ERR_CHART_WRONG_ID": {
        "group": 20,
        "label": "ERR_CHART_WRONG_ID",
        "body": "ERR_CHART_WRONG_ID",
        "code": [
            {
                "label": "ERR_CHART_WRONG_ID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор графика",
            "en": "Wrong chart ID"
        }
    },
    "ERR_CHART_WRONG_PARAMETER": {
        "group": 20,
        "label": "ERR_CHART_WRONG_PARAMETER",
        "body": "ERR_CHART_WRONG_PARAMETER",
        "code": [
            {
                "label": "ERR_CHART_WRONG_PARAMETER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочное значение параметра для функции по работе с графиком",
            "en": "Error value of the parameter for the function of working with charts"
        }
    },
    "ERR_CHART_WRONG_PROPERTY": {
        "group": 20,
        "label": "ERR_CHART_WRONG_PROPERTY",
        "body": "ERR_CHART_WRONG_PROPERTY",
        "code": [
            {
                "label": "ERR_CHART_WRONG_PROPERTY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор свойства графика",
            "en": "Wrong chart property ID"
        }
    },
    "ERR_CUSTOM_WRONG_PROPERTY": {
        "group": 20,
        "label": "ERR_CUSTOM_WRONG_PROPERTY",
        "body": "ERR_CUSTOM_WRONG_PROPERTY",
        "code": [
            {
                "label": "ERR_CUSTOM_WRONG_PROPERTY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор свойства пользовательского индикатора",
            "en": "Wrong ID of the custom indicator property"
        }
    },
    "ERR_DIRECTORY_NOT_EXIST": {
        "group": 20,
        "label": "ERR_DIRECTORY_NOT_EXIST",
        "body": "ERR_DIRECTORY_NOT_EXIST",
        "code": [
            {
                "label": "ERR_DIRECTORY_NOT_EXIST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Директория не существует",
            "en": "Directory does not exist"
        }
    },
    "ERR_DOUBLE_ARRAY_ONLY": {
        "group": 20,
        "label": "ERR_DOUBLE_ARRAY_ONLY",
        "body": "ERR_DOUBLE_ARRAY_ONLY",
        "code": [
            {
                "label": "ERR_DOUBLE_ARRAY_ONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Должен быть массив типа double",
            "en": "Must be an array of type double"
        }
    },
    "ERR_FILE_BINSTRINGSIZE": {
        "group": 20,
        "label": "ERR_FILE_BINSTRINGSIZE",
        "body": "ERR_FILE_BINSTRINGSIZE",
        "code": [
            {
                "label": "ERR_FILE_BINSTRINGSIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Должен быть указан размер строки, так как файл открыт как бинарный",
            "en": "String size must be specified, because the file is opened as binary"
        }
    },
    "ERR_FILE_CACHEBUFFER_ERROR": {
        "group": 20,
        "label": "ERR_FILE_CACHEBUFFER_ERROR",
        "body": "ERR_FILE_CACHEBUFFER_ERROR",
        "code": [
            {
                "label": "ERR_FILE_CACHEBUFFER_ERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Недостаточно памяти для кеша чтения",
            "en": "Not enough memory for cache to read"
        }
    },
    "ERR_FILE_CANNOT_REWRITE": {
        "group": 20,
        "label": "ERR_FILE_CANNOT_REWRITE",
        "body": "ERR_FILE_CANNOT_REWRITE",
        "code": [
            {
                "label": "ERR_FILE_CANNOT_REWRITE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл не может быть переписан",
            "en": "File can not be rewritten"
        }
    },
    "ERR_FILE_IS_DIRECTORY": {
        "group": 20,
        "label": "ERR_FILE_IS_DIRECTORY",
        "body": "ERR_FILE_IS_DIRECTORY",
        "code": [
            {
                "label": "ERR_FILE_IS_DIRECTORY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Это не файл, а директория",
            "en": "This is not a file, this is a directory"
        }
    },
    "ERR_FILE_ISNOT_DIRECTORY": {
        "group": 20,
        "label": "ERR_FILE_ISNOT_DIRECTORY",
        "body": "ERR_FILE_ISNOT_DIRECTORY",
        "code": [
            {
                "label": "ERR_FILE_ISNOT_DIRECTORY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Это файл, а не директория",
            "en": "This is a file, not a directory"
        }
    },
    "ERR_FILE_NOT_EXIST": {
        "group": 20,
        "label": "ERR_FILE_NOT_EXIST",
        "body": "ERR_FILE_NOT_EXIST",
        "code": [
            {
                "label": "ERR_FILE_NOT_EXIST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл не существует",
            "en": "File does not exist"
        }
    },
    "ERR_FILE_NOTBIN": {
        "group": 20,
        "label": "ERR_FILE_NOTBIN",
        "body": "ERR_FILE_NOTBIN",
        "code": [
            {
                "label": "ERR_FILE_NOTBIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл должен быть открыт как бинарный",
            "en": "The file must be opened as a binary one"
        }
    },
    "ERR_FILE_NOTCSV": {
        "group": 20,
        "label": "ERR_FILE_NOTCSV",
        "body": "ERR_FILE_NOTCSV",
        "code": [
            {
                "label": "ERR_FILE_NOTCSV",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл должен быть открыт как CSV",
            "en": "The file must be opened as CSV"
        }
    },
    "ERR_FILE_NOTTOREAD": {
        "group": 20,
        "label": "ERR_FILE_NOTTOREAD",
        "body": "ERR_FILE_NOTTOREAD",
        "code": [
            {
                "label": "ERR_FILE_NOTTOREAD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл должен быть открыт для чтения",
            "en": "The file must be opened for reading"
        }
    },
    "ERR_FILE_NOTTOWRITE": {
        "group": 20,
        "label": "ERR_FILE_NOTTOWRITE",
        "body": "ERR_FILE_NOTTOWRITE",
        "code": [
            {
                "label": "ERR_FILE_NOTTOWRITE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл должен быть открыт для записи",
            "en": "The file must be opened for writing"
        }
    },
    "ERR_FILE_NOTTXT": {
        "group": 20,
        "label": "ERR_FILE_NOTTXT",
        "body": "ERR_FILE_NOTTXT",
        "code": [
            {
                "label": "ERR_FILE_NOTTXT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл должен быть открыт как текстовый",
            "en": "The file must be opened as a text"
        }
    },
    "ERR_FILE_NOTTXTORCSV": {
        "group": 20,
        "label": "ERR_FILE_NOTTXTORCSV",
        "body": "ERR_FILE_NOTTXTORCSV",
        "code": [
            {
                "label": "ERR_FILE_NOTTXTORCSV",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл должен быть открыт как текстовый или CSV",
            "en": "The file must be opened as a text or CSV"
        }
    },
    "ERR_FILE_READERROR": {
        "group": 20,
        "label": "ERR_FILE_READERROR",
        "body": "ERR_FILE_READERROR",
        "code": [
            {
                "label": "ERR_FILE_READERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка чтения файла",
            "en": "File reading error"
        }
    },
    "ERR_FILE_WRITEERROR": {
        "group": 20,
        "label": "ERR_FILE_WRITEERROR",
        "body": "ERR_FILE_WRITEERROR",
        "code": [
            {
                "label": "ERR_FILE_WRITEERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не удалось записать ресурс в файл",
            "en": "Failed to write a resource to a file"
        }
    },
    "ERR_FLOAT_ARRAY_ONLY": {
        "group": 20,
        "label": "ERR_FLOAT_ARRAY_ONLY",
        "body": "ERR_FLOAT_ARRAY_ONLY",
        "code": [
            {
                "label": "ERR_FLOAT_ARRAY_ONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Должен быть массив типа float",
            "en": "Must be an array of type float"
        }
    },
    "ERR_FTP_SEND_FAILED": {
        "group": 20,
        "label": "ERR_FTP_SEND_FAILED",
        "body": "ERR_FTP_SEND_FAILED",
        "code": [
            {
                "label": "ERR_FTP_SEND_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не удалось отправить файл по ftp",
            "en": "File sending via ftp failed"
        }
    },
    "ERR_FUNCTION_NOT_ALLOWED": {
        "group": 20,
        "label": "ERR_FUNCTION_NOT_ALLOWED",
        "body": "ERR_FUNCTION_NOT_ALLOWED",
        "code": [
            {
                "label": "ERR_FUNCTION_NOT_ALLOWED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Системная функция не разрешена для вызова",
            "en": "Function is not allowed for call"
        }
    },
    "ERR_GLOBALVARIABLE_EXISTS": {
        "group": 20,
        "label": "ERR_GLOBALVARIABLE_EXISTS",
        "body": "ERR_GLOBALVARIABLE_EXISTS",
        "code": [
            {
                "label": "ERR_GLOBALVARIABLE_EXISTS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Глобальная переменная клиентского терминала с таким именем уже существует",
            "en": "Global variable of the client terminal with the same name already exists"
        }
    },
    "ERR_GLOBALVARIABLE_NOT_FOUND": {
        "group": 20,
        "label": "ERR_GLOBALVARIABLE_NOT_FOUND",
        "body": "ERR_GLOBALVARIABLE_NOT_FOUND",
        "code": [
            {
                "label": "ERR_GLOBALVARIABLE_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Глобальная переменная клиентского терминала не найдена",
            "en": "Global variable of the client terminal is not found"
        }
    },
    "ERR_HISTORY_NOT_FOUND": {
        "group": 20,
        "label": "ERR_HISTORY_NOT_FOUND",
        "body": "ERR_HISTORY_NOT_FOUND",
        "code": [
            {
                "label": "ERR_HISTORY_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Запрашиваемая история не найдена",
            "en": "Requested history not found"
        }
    },
    "ERR_HISTORY_WRONG_PROPERTY": {
        "group": 20,
        "label": "ERR_HISTORY_WRONG_PROPERTY",
        "body": "ERR_HISTORY_WRONG_PROPERTY",
        "code": [
            {
                "label": "ERR_HISTORY_WRONG_PROPERTY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор свойства истории",
            "en": "Wrong ID of the history property"
        }
    },
    "ERR_INCOMPATIBLE_ARRAYS": {
        "group": 20,
        "label": "ERR_INCOMPATIBLE_ARRAYS",
        "body": "ERR_INCOMPATIBLE_ARRAYS",
        "code": [
            {
                "label": "ERR_INCOMPATIBLE_ARRAYS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Копирование несовместимых массивов. Строковый массив может быть скопирован только в строковый, а числовой массив – в числовой",
            "en": "Copying incompatible arrays. String array can be copied only to a string array, and a numeric array - in numeric array only"
        }
    },
    "ERR_INCOMPATIBLE_FILE": {
        "group": 20,
        "label": "ERR_INCOMPATIBLE_FILE",
        "body": "ERR_INCOMPATIBLE_FILE",
        "code": [
            {
                "label": "ERR_INCOMPATIBLE_FILE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Для строковых массивов должен быть текстовый файл, для остальных – бинарный",
            "en": "A text file must be for string arrays, for other arrays - binary"
        }
    },
    "ERR_INDICATOR_CANNOT_ADD": {
        "group": 20,
        "label": "ERR_INDICATOR_CANNOT_ADD",
        "body": "ERR_INDICATOR_CANNOT_ADD",
        "code": [
            {
                "label": "ERR_INDICATOR_CANNOT_ADD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при добавлении индикатора",
            "en": "Error applying an indicator to chart"
        }
    },
    "ERR_INDICATOR_CANNOT_APPLY": {
        "group": 20,
        "label": "ERR_INDICATOR_CANNOT_APPLY",
        "body": "ERR_INDICATOR_CANNOT_APPLY",
        "code": [
            {
                "label": "ERR_INDICATOR_CANNOT_APPLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Индикатор не может быть применен к другому индикатору",
            "en": "The indicator cannot be applied to another indicator"
        }
    },
    "ERR_INDICATOR_CANNOT_CREATE": {
        "group": 20,
        "label": "ERR_INDICATOR_CANNOT_CREATE",
        "body": "ERR_INDICATOR_CANNOT_CREATE",
        "code": [
            {
                "label": "ERR_INDICATOR_CANNOT_CREATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Индикатор не может быть создан",
            "en": "Indicator cannot be created"
        }
    },
    "ERR_INDICATOR_CUSTOM_NAME": {
        "group": 20,
        "label": "ERR_INDICATOR_CUSTOM_NAME",
        "body": "ERR_INDICATOR_CUSTOM_NAME",
        "code": [
            {
                "label": "ERR_INDICATOR_CUSTOM_NAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Первым параметром в массиве должно быть имя пользовательского индикатора",
            "en": "The first parameter in the array must be the name of the custom indicator"
        }
    },
    "ERR_INDICATOR_DATA_NOT_FOUND": {
        "group": 20,
        "label": "ERR_INDICATOR_DATA_NOT_FOUND",
        "body": "ERR_INDICATOR_DATA_NOT_FOUND",
        "code": [
            {
                "label": "ERR_INDICATOR_DATA_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Запрошенные данные не найдены",
            "en": "Requested data not found"
        }
    },
    "ERR_INDICATOR_NO_MEMORY": {
        "group": 20,
        "label": "ERR_INDICATOR_NO_MEMORY",
        "body": "ERR_INDICATOR_NO_MEMORY",
        "code": [
            {
                "label": "ERR_INDICATOR_NO_MEMORY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Недостаточно памяти для добавления индикатора",
            "en": "Not enough memory to add the indicator"
        }
    },
    "ERR_INDICATOR_PARAMETER_TYPE": {
        "group": 20,
        "label": "ERR_INDICATOR_PARAMETER_TYPE",
        "body": "ERR_INDICATOR_PARAMETER_TYPE",
        "code": [
            {
                "label": "ERR_INDICATOR_PARAMETER_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неправильный тип параметра в массиве при создании индикатора",
            "en": "Invalid parameter type in the array when creating an indicator"
        }
    },
    "ERR_INDICATOR_PARAMETERS_MISSING": {
        "group": 20,
        "label": "ERR_INDICATOR_PARAMETERS_MISSING",
        "body": "ERR_INDICATOR_PARAMETERS_MISSING",
        "code": [
            {
                "label": "ERR_INDICATOR_PARAMETERS_MISSING",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отсутствуют параметры при создании индикатора",
            "en": "No parameters when creating an indicator"
        }
    },
    "ERR_INDICATOR_UNKNOWN_SYMBOL": {
        "group": 20,
        "label": "ERR_INDICATOR_UNKNOWN_SYMBOL",
        "body": "ERR_INDICATOR_UNKNOWN_SYMBOL",
        "code": [
            {
                "label": "ERR_INDICATOR_UNKNOWN_SYMBOL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неизвестный символ",
            "en": "Unknown symbol"
        }
    },
    "ERR_INDICATOR_WRONG_HANDLE": {
        "group": 20,
        "label": "ERR_INDICATOR_WRONG_HANDLE",
        "body": "ERR_INDICATOR_WRONG_HANDLE",
        "code": [
            {
                "label": "ERR_INDICATOR_WRONG_HANDLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный хэндл индикатора",
            "en": "Wrong indicator handle"
        }
    },
    "ERR_INDICATOR_WRONG_INDEX": {
        "group": 20,
        "label": "ERR_INDICATOR_WRONG_INDEX",
        "body": "ERR_INDICATOR_WRONG_INDEX",
        "code": [
            {
                "label": "ERR_INDICATOR_WRONG_INDEX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный индекс запрашиваемого индикаторного буфера",
            "en": "Wrong index of the requested indicator buffer"
        }
    },
    "ERR_INDICATOR_WRONG_PARAMETERS": {
        "group": 20,
        "label": "ERR_INDICATOR_WRONG_PARAMETERS",
        "body": "ERR_INDICATOR_WRONG_PARAMETERS",
        "code": [
            {
                "label": "ERR_INDICATOR_WRONG_PARAMETERS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неправильное количество параметров при создании индикатора",
            "en": "Wrong number of parameters when creating an indicator"
        }
    },
    "ERR_INT_ARRAY_ONLY": {
        "group": 20,
        "label": "ERR_INT_ARRAY_ONLY",
        "body": "ERR_INT_ARRAY_ONLY",
        "code": [
            {
                "label": "ERR_INT_ARRAY_ONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Должен быть массив типа int",
            "en": "Must be an array of type int"
        }
    },
    "ERR_INTERNAL_ERROR": {
        "group": 20,
        "label": "ERR_INTERNAL_ERROR",
        "body": "ERR_INTERNAL_ERROR",
        "code": [
            {
                "label": "ERR_INTERNAL_ERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неожиданная внутренняя ошибка",
            "en": "Unexpected internal error"
        }
    },
    "ERR_INVALID_ARRAY": {
        "group": 20,
        "label": "ERR_INVALID_ARRAY",
        "body": "ERR_INVALID_ARRAY",
        "code": [
            {
                "label": "ERR_INVALID_ARRAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Массив неподходящего типа, неподходящего размера или испорченный объект динамического массива",
            "en": "Array of a wrong type, wrong size, or a damaged object of a dynamic array"
        }
    },
    "ERR_INVALID_DATETIME": {
        "group": 20,
        "label": "ERR_INVALID_DATETIME",
        "body": "ERR_INVALID_DATETIME",
        "code": [
            {
                "label": "ERR_INVALID_DATETIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неправильное значение даты и/или времени",
            "en": "Invalid date and/or time"
        }
    },
    "ERR_INVALID_FILEHANDLE": {
        "group": 20,
        "label": "ERR_INVALID_FILEHANDLE",
        "body": "ERR_INVALID_FILEHANDLE",
        "code": [
            {
                "label": "ERR_INVALID_FILEHANDLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл с таким хэндлом уже был закрыт, либо не открывался вообще",
            "en": "A file with this handle was closed, or was not opening at all"
        }
    },
    "ERR_INVALID_PARAMETER": {
        "group": 20,
        "label": "ERR_INVALID_PARAMETER",
        "body": "ERR_INVALID_PARAMETER",
        "code": [
            {
                "label": "ERR_INVALID_PARAMETER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный параметр при вызове системной функции",
            "en": "Wrong parameter when calling the system function"
        }
    },
    "ERR_INVALID_POINTER": {
        "group": 20,
        "label": "ERR_INVALID_POINTER",
        "body": "ERR_INVALID_POINTER",
        "code": [
            {
                "label": "ERR_INVALID_POINTER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный указатель",
            "en": "Wrong pointer"
        }
    },
    "ERR_INVALID_POINTER_TYPE": {
        "group": 20,
        "label": "ERR_INVALID_POINTER_TYPE",
        "body": "ERR_INVALID_POINTER_TYPE",
        "code": [
            {
                "label": "ERR_INVALID_POINTER_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный тип указателя",
            "en": "Wrong type of pointer"
        }
    },
    "ERR_LONG_ARRAY_ONLY": {
        "group": 20,
        "label": "ERR_LONG_ARRAY_ONLY",
        "body": "ERR_LONG_ARRAY_ONLY",
        "code": [
            {
                "label": "ERR_LONG_ARRAY_ONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Должен быть массив типа long",
            "en": "Must be an array of type long"
        }
    },
    "ERR_MAIL_SEND_FAILED": {
        "group": 20,
        "label": "ERR_MAIL_SEND_FAILED",
        "body": "ERR_MAIL_SEND_FAILED",
        "code": [
            {
                "label": "ERR_MAIL_SEND_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не удалось отправить письмо",
            "en": "Email sending failed"
        }
    },
    "ERR_MARKET_LASTTIME_UNKNOWN": {
        "group": 20,
        "label": "ERR_MARKET_LASTTIME_UNKNOWN",
        "body": "ERR_MARKET_LASTTIME_UNKNOWN",
        "code": [
            {
                "label": "ERR_MARKET_LASTTIME_UNKNOWN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время последнего тика неизвестно (тиков не было)",
            "en": "Time of the last tick is not known (no ticks)"
        }
    },
    "ERR_MARKET_NOT_SELECTED": {
        "group": 20,
        "label": "ERR_MARKET_NOT_SELECTED",
        "body": "ERR_MARKET_NOT_SELECTED",
        "code": [
            {
                "label": "ERR_MARKET_NOT_SELECTED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Символ не выбран в MarketWatch",
            "en": "Symbol is not selected in MarketWatch"
        }
    },
    "ERR_MARKET_SELECT_ERROR": {
        "group": 20,
        "label": "ERR_MARKET_SELECT_ERROR",
        "body": "ERR_MARKET_SELECT_ERROR",
        "code": [
            {
                "label": "ERR_MARKET_SELECT_ERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка добавления или удаления символа в MarketWatch",
            "en": "Error adding or deleting a symbol in MarketWatch"
        }
    },
    "ERR_MARKET_UNKNOWN_SYMBOL": {
        "group": 20,
        "label": "ERR_MARKET_UNKNOWN_SYMBOL",
        "body": "ERR_MARKET_UNKNOWN_SYMBOL",
        "code": [
            {
                "label": "ERR_MARKET_UNKNOWN_SYMBOL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неизвестный символ",
            "en": "Unknown symbol"
        }
    },
    "ERR_MARKET_WRONG_PROPERTY": {
        "group": 20,
        "label": "ERR_MARKET_WRONG_PROPERTY",
        "body": "ERR_MARKET_WRONG_PROPERTY",
        "code": [
            {
                "label": "ERR_MARKET_WRONG_PROPERTY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор свойства символа",
            "en": "Wrong identifier of a symbol property"
        }
    },
    "ERR_MQL5_WRONG_PROPERTY": {
        "group": 20,
        "label": "ERR_MQL5_WRONG_PROPERTY",
        "body": "ERR_MQL5_WRONG_PROPERTY",
        "code": [
            {
                "label": "ERR_MQL5_WRONG_PROPERTY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор свойства программы",
            "en": "Wrong identifier of the program property"
        }
    },
    "ERR_NO_STRING_DATE": {
        "group": 20,
        "label": "ERR_NO_STRING_DATE",
        "body": "ERR_NO_STRING_DATE",
        "code": [
            {
                "label": "ERR_NO_STRING_DATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "В строке нет даты",
            "en": "No date in the string"
        }
    },
    "ERR_NOT_ENOUGH_MEMORY": {
        "group": 20,
        "label": "ERR_NOT_ENOUGH_MEMORY",
        "body": "ERR_NOT_ENOUGH_MEMORY",
        "code": [
            {
                "label": "ERR_NOT_ENOUGH_MEMORY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Недостаточно памяти для выполнения системной функции",
            "en": "Not enough memory to perform the system function"
        }
    },
    "ERR_NOTIFICATION_SEND_FAILED": {
        "group": 20,
        "label": "ERR_NOTIFICATION_SEND_FAILED",
        "body": "ERR_NOTIFICATION_SEND_FAILED",
        "code": [
            {
                "label": "ERR_NOTIFICATION_SEND_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не удалось отправить уведомление",
            "en": "Failed to send a notification"
        }
    },
    "ERR_NOTIFICATION_TOO_FREQUENT": {
        "group": 20,
        "label": "ERR_NOTIFICATION_TOO_FREQUENT",
        "body": "ERR_NOTIFICATION_TOO_FREQUENT",
        "code": [
            {
                "label": "ERR_NOTIFICATION_TOO_FREQUENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Слишком частая отправка уведомлений",
            "en": "Too frequent sending of notifications"
        }
    },
    "ERR_NOTIFICATION_WRONG_PARAMETER": {
        "group": 20,
        "label": "ERR_NOTIFICATION_WRONG_PARAMETER",
        "body": "ERR_NOTIFICATION_WRONG_PARAMETER",
        "code": [
            {
                "label": "ERR_NOTIFICATION_WRONG_PARAMETER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неверный параметр для отправки уведомления – в функцию SendNotification()  передали пустую строку или NULL",
            "en": "Invalid parameter for sending a notification – an empty string or NULL has been passed to the SendNotification() function"
        }
    },
    "ERR_NOTIFICATION_WRONG_SETTINGS": {
        "group": 20,
        "label": "ERR_NOTIFICATION_WRONG_SETTINGS",
        "body": "ERR_NOTIFICATION_WRONG_SETTINGS",
        "code": [
            {
                "label": "ERR_NOTIFICATION_WRONG_SETTINGS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неверные настройки уведомлений в терминале (не указан ID или не выставлено разрешение)",
            "en": "Wrong settings of notifications in the terminal (ID is not specified or permission is not set)"
        }
    },
    "ERR_NOTINITIALIZED_STRING": {
        "group": 20,
        "label": "ERR_NOTINITIALIZED_STRING",
        "body": "ERR_NOTINITIALIZED_STRING",
        "code": [
            {
                "label": "ERR_NOTINITIALIZED_STRING",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неинициализированная строка",
            "en": "Not initialized string"
        }
    },
    "ERR_NUMBER_ARRAYS_ONLY": {
        "group": 20,
        "label": "ERR_NUMBER_ARRAYS_ONLY",
        "body": "ERR_NUMBER_ARRAYS_ONLY",
        "code": [
            {
                "label": "ERR_NUMBER_ARRAYS_ONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Должен быть числовой массив",
            "en": "Must be a numeric array"
        }
    },
    "ERR_OBJECT_ERROR": {
        "group": 20,
        "label": "ERR_OBJECT_ERROR",
        "body": "ERR_OBJECT_ERROR",
        "code": [
            {
                "label": "ERR_OBJECT_ERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при работе с графическим объектом",
            "en": "Error working with a graphical object"
        }
    },
    "ERR_OBJECT_GETDATE_FAILED": {
        "group": 20,
        "label": "ERR_OBJECT_GETDATE_FAILED",
        "body": "ERR_OBJECT_GETDATE_FAILED",
        "code": [
            {
                "label": "ERR_OBJECT_GETDATE_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Невозможно получить дату, соответствующую значению",
            "en": "Unable to get date corresponding to the value"
        }
    },
    "ERR_OBJECT_GETVALUE_FAILED": {
        "group": 20,
        "label": "ERR_OBJECT_GETVALUE_FAILED",
        "body": "ERR_OBJECT_GETVALUE_FAILED",
        "code": [
            {
                "label": "ERR_OBJECT_GETVALUE_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Невозможно получить значение, соответствующее дате",
            "en": "Unable to get value corresponding to the date"
        }
    },
    "ERR_OBJECT_NOT_FOUND": {
        "group": 20,
        "label": "ERR_OBJECT_NOT_FOUND",
        "body": "ERR_OBJECT_NOT_FOUND",
        "code": [
            {
                "label": "ERR_OBJECT_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Графический объект не найден",
            "en": "Graphical object was not found"
        }
    },
    "ERR_OBJECT_WRONG_PROPERTY": {
        "group": 20,
        "label": "ERR_OBJECT_WRONG_PROPERTY",
        "body": "ERR_OBJECT_WRONG_PROPERTY",
        "code": [
            {
                "label": "ERR_OBJECT_WRONG_PROPERTY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор свойства графического объекта",
            "en": "Wrong ID of a graphical object property"
        }
    },
    "ERR_ONEDIM_ARRAYS_ONLY": {
        "group": 20,
        "label": "ERR_ONEDIM_ARRAYS_ONLY",
        "body": "ERR_ONEDIM_ARRAYS_ONLY",
        "code": [
            {
                "label": "ERR_ONEDIM_ARRAYS_ONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Должен быть одномерный массив",
            "en": "Must be a one-dimensional array"
        }
    },
    "ERR_OPENCL_BUFFER_CREATE": {
        "group": 20,
        "label": "ERR_OPENCL_BUFFER_CREATE",
        "body": "ERR_OPENCL_BUFFER_CREATE",
        "code": [
            {
                "label": "ERR_OPENCL_BUFFER_CREATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка создания буфера OpenCL",
            "en": "Failed to create an OpenCL buffer"
        }
    },
    "ERR_OPENCL_CONTEXT_CREATE": {
        "group": 20,
        "label": "ERR_OPENCL_CONTEXT_CREATE",
        "body": "ERR_OPENCL_CONTEXT_CREATE",
        "code": [
            {
                "label": "ERR_OPENCL_CONTEXT_CREATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при создании контекста OpenCL",
            "en": "Error creating the OpenCL context"
        }
    },
    "ERR_OPENCL_EXECUTE": {
        "group": 20,
        "label": "ERR_OPENCL_EXECUTE",
        "body": "ERR_OPENCL_EXECUTE",
        "code": [
            {
                "label": "ERR_OPENCL_EXECUTE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка выполнения программы OpenCL",
            "en": "OpenCL program runtime error"
        }
    },
    "ERR_OPENCL_INTERNAL": {
        "group": 20,
        "label": "ERR_OPENCL_INTERNAL",
        "body": "ERR_OPENCL_INTERNAL",
        "code": [
            {
                "label": "ERR_OPENCL_INTERNAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Внутренняя ошибка при выполнении OpenCL",
            "en": "Internal error occurred when running OpenCL"
        }
    },
    "ERR_OPENCL_INVALID_HANDLE": {
        "group": 20,
        "label": "ERR_OPENCL_INVALID_HANDLE",
        "body": "ERR_OPENCL_INVALID_HANDLE",
        "code": [
            {
                "label": "ERR_OPENCL_INVALID_HANDLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неправильный хэндл OpenCL",
            "en": "Invalid OpenCL handle"
        }
    },
    "ERR_OPENCL_KERNEL_CREATE": {
        "group": 20,
        "label": "ERR_OPENCL_KERNEL_CREATE",
        "body": "ERR_OPENCL_KERNEL_CREATE",
        "code": [
            {
                "label": "ERR_OPENCL_KERNEL_CREATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка создания кернел - точки входа OpenCL",
            "en": "Error creating an OpenCL kernel"
        }
    },
    "ERR_OPENCL_NOT_SUPPORTED": {
        "group": 20,
        "label": "ERR_OPENCL_NOT_SUPPORTED",
        "body": "ERR_OPENCL_NOT_SUPPORTED",
        "code": [
            {
                "label": "ERR_OPENCL_NOT_SUPPORTED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Функции OpenCL на данном компьютере не поддерживаются",
            "en": "OpenCL functions are not supported on this computer"
        }
    },
    "ERR_OPENCL_PROGRAM_CREATE": {
        "group": 20,
        "label": "ERR_OPENCL_PROGRAM_CREATE",
        "body": "ERR_OPENCL_PROGRAM_CREATE",
        "code": [
            {
                "label": "ERR_OPENCL_PROGRAM_CREATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при компиляции программы OpenCL",
            "en": "Error occurred when compiling an OpenCL program"
        }
    },
    "ERR_OPENCL_QUEUE_CREATE": {
        "group": 20,
        "label": "ERR_OPENCL_QUEUE_CREATE",
        "body": "ERR_OPENCL_QUEUE_CREATE",
        "code": [
            {
                "label": "ERR_OPENCL_QUEUE_CREATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка создания очереди выполнения в OpenCL",
            "en": "Failed to create a run queue in OpenCL"
        }
    },
    "ERR_OPENCL_SET_KERNEL_PARAMETER": {
        "group": 20,
        "label": "ERR_OPENCL_SET_KERNEL_PARAMETER",
        "body": "ERR_OPENCL_SET_KERNEL_PARAMETER",
        "code": [
            {
                "label": "ERR_OPENCL_SET_KERNEL_PARAMETER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка при установке параметров для кернел OpenCL (точки входа в программу OpenCL)",
            "en": "Error occurred when setting parameters for the OpenCL kernel"
        }
    },
    "ERR_OPENCL_TOO_LONG_KERNEL_NAME": {
        "group": 20,
        "label": "ERR_OPENCL_TOO_LONG_KERNEL_NAME",
        "body": "ERR_OPENCL_TOO_LONG_KERNEL_NAME",
        "code": [
            {
                "label": "ERR_OPENCL_TOO_LONG_KERNEL_NAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Слишком длинное имя точки входа (кернел OpenCL)",
            "en": "Too long kernel name (OpenCL kernel)"
        }
    },
    "ERR_OPENCL_WRONG_BUFFER_OFFSET": {
        "group": 20,
        "label": "ERR_OPENCL_WRONG_BUFFER_OFFSET",
        "body": "ERR_OPENCL_WRONG_BUFFER_OFFSET",
        "code": [
            {
                "label": "ERR_OPENCL_WRONG_BUFFER_OFFSET",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неверное смещение в буфере OpenCL",
            "en": "Invalid offset in the OpenCL buffer"
        }
    },
    "ERR_OPENCL_WRONG_BUFFER_SIZE": {
        "group": 20,
        "label": "ERR_OPENCL_WRONG_BUFFER_SIZE",
        "body": "ERR_OPENCL_WRONG_BUFFER_SIZE",
        "code": [
            {
                "label": "ERR_OPENCL_WRONG_BUFFER_SIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неверный размер буфера OpenCL",
            "en": "Invalid size of the OpenCL buffer"
        }
    },
    "ERR_PLAY_SOUND_FAILED": {
        "group": 20,
        "label": "ERR_PLAY_SOUND_FAILED",
        "body": "ERR_PLAY_SOUND_FAILED",
        "code": [
            {
                "label": "ERR_PLAY_SOUND_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не удалось воспроизвести звук",
            "en": "Sound playing failed"
        }
    },
    "ERR_RESOURCE_NAME_DUPLICATED": {
        "group": 20,
        "label": "ERR_RESOURCE_NAME_DUPLICATED",
        "body": "ERR_RESOURCE_NAME_DUPLICATED",
        "code": [
            {
                "label": "ERR_RESOURCE_NAME_DUPLICATED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Совпадении имени динамического и статического ресурсов",
            "en": "The names of the dynamic and the static resource match"
        }
    },
    "ERR_RESOURCE_NAME_IS_TOO_LONG": {
        "group": 20,
        "label": "ERR_RESOURCE_NAME_IS_TOO_LONG",
        "body": "ERR_RESOURCE_NAME_IS_TOO_LONG",
        "code": [
            {
                "label": "ERR_RESOURCE_NAME_IS_TOO_LONG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя ресурса превышает 63 символа",
            "en": "The resource name exceeds 63 characters"
        }
    },
    "ERR_RESOURCE_NOT_FOUND": {
        "group": 20,
        "label": "ERR_RESOURCE_NOT_FOUND",
        "body": "ERR_RESOURCE_NOT_FOUND",
        "code": [
            {
                "label": "ERR_RESOURCE_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ресурс с таким именем в EX5 не найден",
            "en": "Resource with this name has not been found in EX5"
        }
    },
    "ERR_RESOURCE_UNSUPPOTED_TYPE": {
        "group": 20,
        "label": "ERR_RESOURCE_UNSUPPOTED_TYPE",
        "body": "ERR_RESOURCE_UNSUPPOTED_TYPE",
        "code": [
            {
                "label": "ERR_RESOURCE_UNSUPPOTED_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неподдерживаемый тип ресурса или размер более 16 MB",
            "en": "Unsupported resource type or its size exceeds 16 Mb"
        }
    },
    "ERR_SERIES_ARRAY": {
        "group": 20,
        "label": "ERR_SERIES_ARRAY",
        "body": "ERR_SERIES_ARRAY",
        "code": [
            {
                "label": "ERR_SERIES_ARRAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Таймсерия не может быть использована",
            "en": "Timeseries cannot be used"
        }
    },
    "ERR_SHORT_ARRAY_ONLY": {
        "group": 20,
        "label": "ERR_SHORT_ARRAY_ONLY",
        "body": "ERR_SHORT_ARRAY_ONLY",
        "code": [
            {
                "label": "ERR_SHORT_ARRAY_ONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Должен быть массив типа short",
            "en": "Must be an array of type short"
        }
    },
    "ERR_SMALL_ARRAY": {
        "group": 20,
        "label": "ERR_SMALL_ARRAY",
        "body": "ERR_SMALL_ARRAY",
        "code": [
            {
                "label": "ERR_SMALL_ARRAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Слишком маленький массив, стартовая позиция за пределами массива",
            "en": "Too small array, the starting position is outside the array"
        }
    },
    "ERR_SMALL_ASSERIES_ARRAY": {
        "group": 20,
        "label": "ERR_SMALL_ASSERIES_ARRAY",
        "body": "ERR_SMALL_ASSERIES_ARRAY",
        "code": [
            {
                "label": "ERR_SMALL_ASSERIES_ARRAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Приемный массив объявлен как AS_SERIES, и он недостаточного размера",
            "en": "The receiving array is declared as AS_SERIES, and it is of insufficient size"
        }
    },
    "ERR_STRING_OUT_OF_MEMORY": {
        "group": 20,
        "label": "ERR_STRING_OUT_OF_MEMORY",
        "body": "ERR_STRING_OUT_OF_MEMORY",
        "code": [
            {
                "label": "ERR_STRING_OUT_OF_MEMORY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Недостаточно памяти для строки",
            "en": "Not enough memory for the string"
        }
    },
    "ERR_STRING_RESIZE_ERROR": {
        "group": 20,
        "label": "ERR_STRING_RESIZE_ERROR",
        "body": "ERR_STRING_RESIZE_ERROR",
        "code": [
            {
                "label": "ERR_STRING_RESIZE_ERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Недостаточно памяти для перераспределения строки",
            "en": "Not enough memory for the relocation of string"
        }
    },
    "ERR_STRING_SMALL_LEN": {
        "group": 20,
        "label": "ERR_STRING_SMALL_LEN",
        "body": "ERR_STRING_SMALL_LEN",
        "code": [
            {
                "label": "ERR_STRING_SMALL_LEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Длина строки меньше, чем ожидалось",
            "en": "The string length is less than expected"
        }
    },
    "ERR_STRING_TIME_ERROR": {
        "group": 20,
        "label": "ERR_STRING_TIME_ERROR",
        "body": "ERR_STRING_TIME_ERROR",
        "code": [
            {
                "label": "ERR_STRING_TIME_ERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка преобразования строки в дату",
            "en": "Error converting string to date"
        }
    },
    "ERR_STRING_TOO_BIGNUMBER": {
        "group": 20,
        "label": "ERR_STRING_TOO_BIGNUMBER",
        "body": "ERR_STRING_TOO_BIGNUMBER",
        "code": [
            {
                "label": "ERR_STRING_TOO_BIGNUMBER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Слишком большое число, больше, чем ULONG_MAX",
            "en": "Too large number, more than ULONG_MAX"
        }
    },
    "ERR_STRING_UNKNOWNTYPE": {
        "group": 20,
        "label": "ERR_STRING_UNKNOWNTYPE",
        "body": "ERR_STRING_UNKNOWNTYPE",
        "code": [
            {
                "label": "ERR_STRING_UNKNOWNTYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неизвестный тип данных при конвертации в строку",
            "en": "Unknown data type when converting to a string"
        }
    },
    "ERR_STRING_ZEROADDED": {
        "group": 20,
        "label": "ERR_STRING_ZEROADDED",
        "body": "ERR_STRING_ZEROADDED",
        "code": [
            {
                "label": "ERR_STRING_ZEROADDED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "К концу строки добавлен 0, бесполезная операция",
            "en": "0 added to the string end, a useless operation"
        }
    },
    "ERR_STRINGPOS_OUTOFRANGE": {
        "group": 20,
        "label": "ERR_STRINGPOS_OUTOFRANGE",
        "body": "ERR_STRINGPOS_OUTOFRANGE",
        "code": [
            {
                "label": "ERR_STRINGPOS_OUTOFRANGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Позиция за пределами строки",
            "en": "Position outside the string"
        }
    },
    "ERR_STRUCT_WITHOBJECTS_ORCLASS": {
        "group": 20,
        "label": "ERR_STRUCT_WITHOBJECTS_ORCLASS",
        "body": "ERR_STRUCT_WITHOBJECTS_ORCLASS",
        "code": [
            {
                "label": "ERR_STRUCT_WITHOBJECTS_ORCLASS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Структура содержит объекты строк и/или динамических массивов и/или структуры с такими объектами и/или классы",
            "en": "The structure contains objects of strings and/or dynamic arrays and/or structure of such objects and/or classes"
        }
    },
    "ERR_SUCCESS": {
        "group": 20,
        "label": "ERR_SUCCESS",
        "body": "ERR_SUCCESS",
        "code": [
            {
                "label": "ERR_SUCCESS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Операция выполнена успешно",
            "en": "The operation completed successfully"
        }
    },
    "ERR_TERMINAL_WRONG_PROPERTY": {
        "group": 20,
        "label": "ERR_TERMINAL_WRONG_PROPERTY",
        "body": "ERR_TERMINAL_WRONG_PROPERTY",
        "code": [
            {
                "label": "ERR_TERMINAL_WRONG_PROPERTY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор свойства терминала",
            "en": "Wrong identifier of the terminal property"
        }
    },
    "ERR_TOO_LONG_FILENAME": {
        "group": 20,
        "label": "ERR_TOO_LONG_FILENAME",
        "body": "ERR_TOO_LONG_FILENAME",
        "code": [
            {
                "label": "ERR_TOO_LONG_FILENAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Слишком длинное имя файла",
            "en": "Too long file name"
        }
    },
    "ERR_TOO_MANY_FILES": {
        "group": 20,
        "label": "ERR_TOO_MANY_FILES",
        "body": "ERR_TOO_MANY_FILES",
        "code": [
            {
                "label": "ERR_TOO_MANY_FILES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не может быть открыто одновременно более 64 файлов",
            "en": "More than 64 files cannot be opened at the same time"
        }
    },
    "ERR_TOO_MANY_FORMATTERS": {
        "group": 20,
        "label": "ERR_TOO_MANY_FORMATTERS",
        "body": "ERR_TOO_MANY_FORMATTERS",
        "code": [
            {
                "label": "ERR_TOO_MANY_FORMATTERS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Форматных спецификаторов больше, чем параметров",
            "en": "Amount of format specifiers more than the parameters"
        }
    },
    "ERR_TOO_MANY_PARAMETERS": {
        "group": 20,
        "label": "ERR_TOO_MANY_PARAMETERS",
        "body": "ERR_TOO_MANY_PARAMETERS",
        "code": [
            {
                "label": "ERR_TOO_MANY_PARAMETERS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Параметров больше, чем форматных спецификаторов",
            "en": "Amount of parameters more than the format specifiers"
        }
    },
    "ERR_TRADE_DEAL_NOT_FOUND": {
        "group": 20,
        "label": "ERR_TRADE_DEAL_NOT_FOUND",
        "body": "ERR_TRADE_DEAL_NOT_FOUND",
        "code": [
            {
                "label": "ERR_TRADE_DEAL_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Сделка не найдена",
            "en": "Deal not found"
        }
    },
    "ERR_TRADE_DISABLED": {
        "group": 20,
        "label": "ERR_TRADE_DISABLED",
        "body": "ERR_TRADE_DISABLED",
        "code": [
            {
                "label": "ERR_TRADE_DISABLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Торговля для эксперта запрещена",
            "en": "Trading by Expert Advisors prohibited"
        }
    },
    "ERR_TRADE_ORDER_NOT_FOUND": {
        "group": 20,
        "label": "ERR_TRADE_ORDER_NOT_FOUND",
        "body": "ERR_TRADE_ORDER_NOT_FOUND",
        "code": [
            {
                "label": "ERR_TRADE_ORDER_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер не найден",
            "en": "Order not found"
        }
    },
    "ERR_TRADE_POSITION_NOT_FOUND": {
        "group": 20,
        "label": "ERR_TRADE_POSITION_NOT_FOUND",
        "body": "ERR_TRADE_POSITION_NOT_FOUND",
        "code": [
            {
                "label": "ERR_TRADE_POSITION_NOT_FOUND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Позиция не найдена",
            "en": "Position not found"
        }
    },
    "ERR_TRADE_SEND_FAILED": {
        "group": 20,
        "label": "ERR_TRADE_SEND_FAILED",
        "body": "ERR_TRADE_SEND_FAILED",
        "code": [
            {
                "label": "ERR_TRADE_SEND_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не удалось отправить торговый запрос",
            "en": "Trade request sending failed"
        }
    },
    "ERR_TRADE_WRONG_PROPERTY": {
        "group": 20,
        "label": "ERR_TRADE_WRONG_PROPERTY",
        "body": "ERR_TRADE_WRONG_PROPERTY",
        "code": [
            {
                "label": "ERR_TRADE_WRONG_PROPERTY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный идентификатор свойства торговли",
            "en": "Wrong trade property ID"
        }
    },
    "ERR_USER_ERROR_FIRST": {
        "group": 20,
        "label": "ERR_USER_ERROR_FIRST",
        "body": "ERR_USER_ERROR_FIRST",
        "code": [
            {
                "label": "ERR_USER_ERROR_FIRST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "С этого кода начинаются ошибки, задаваемые пользователем",
            "en": "User defined errors start with this code"
        }
    },
    "ERR_WEBREQUEST_CONNECT_FAILED": {
        "group": 20,
        "label": "ERR_WEBREQUEST_CONNECT_FAILED",
        "body": "ERR_WEBREQUEST_CONNECT_FAILED",
        "code": [
            {
                "label": "ERR_WEBREQUEST_CONNECT_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Не удалось подключиться к указанному URL",
            "en": "Failed to connect to specified URL"
        }
    },
    "ERR_WEBREQUEST_INVALID_ADDRESS": {
        "group": 20,
        "label": "ERR_WEBREQUEST_INVALID_ADDRESS",
        "body": "ERR_WEBREQUEST_INVALID_ADDRESS",
        "code": [
            {
                "label": "ERR_WEBREQUEST_INVALID_ADDRESS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "URL не прошел проверку",
            "en": "Invalid URL"
        }
    },
    "ERR_WEBREQUEST_REQUEST_FAILED": {
        "group": 20,
        "label": "ERR_WEBREQUEST_REQUEST_FAILED",
        "body": "ERR_WEBREQUEST_REQUEST_FAILED",
        "code": [
            {
                "label": "ERR_WEBREQUEST_REQUEST_FAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка в результате выполнения HTTP запроса",
            "en": "HTTP request failed"
        }
    },
    "ERR_WEBREQUEST_TIMEOUT": {
        "group": 20,
        "label": "ERR_WEBREQUEST_TIMEOUT",
        "body": "ERR_WEBREQUEST_TIMEOUT",
        "code": [
            {
                "label": "ERR_WEBREQUEST_TIMEOUT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Превышен таймаут получения данных",
            "en": "Timeout exceeded"
        }
    },
    "ERR_WRONG_DIRECTORYNAME": {
        "group": 20,
        "label": "ERR_WRONG_DIRECTORYNAME",
        "body": "ERR_WRONG_DIRECTORYNAME",
        "code": [
            {
                "label": "ERR_WRONG_DIRECTORYNAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочное имя директории",
            "en": "Wrong directory name"
        }
    },
    "ERR_WRONG_FILEHANDLE": {
        "group": 20,
        "label": "ERR_WRONG_FILEHANDLE",
        "body": "ERR_WRONG_FILEHANDLE",
        "code": [
            {
                "label": "ERR_WRONG_FILEHANDLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный хэндл файла",
            "en": "Wrong file handle"
        }
    },
    "ERR_WRONG_FILENAME": {
        "group": 20,
        "label": "ERR_WRONG_FILENAME",
        "body": "ERR_WRONG_FILENAME",
        "code": [
            {
                "label": "ERR_WRONG_FILENAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Недопустимое имя файла",
            "en": "Invalid file name"
        }
    },
    "ERR_WRONG_FORMATSTRING": {
        "group": 20,
        "label": "ERR_WRONG_FORMATSTRING",
        "body": "ERR_WRONG_FORMATSTRING",
        "code": [
            {
                "label": "ERR_WRONG_FORMATSTRING",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочная форматная строка",
            "en": "Invalid format string"
        }
    },
    "ERR_WRONG_INTERNAL_PARAMETER": {
        "group": 20,
        "label": "ERR_WRONG_INTERNAL_PARAMETER",
        "body": "ERR_WRONG_INTERNAL_PARAMETER",
        "code": [
            {
                "label": "ERR_WRONG_INTERNAL_PARAMETER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибочный параметр при внутреннем вызове функции клиентского терминала",
            "en": "Wrong parameter in the inner call of the client terminal function"
        }
    },
    "ERR_WRONG_STRING_DATE": {
        "group": 20,
        "label": "ERR_WRONG_STRING_DATE",
        "body": "ERR_WRONG_STRING_DATE",
        "code": [
            {
                "label": "ERR_WRONG_STRING_DATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "В строке ошибочная дата",
            "en": "Wrong date in the string"
        }
    },
    "ERR_WRONG_STRING_OBJECT": {
        "group": 20,
        "label": "ERR_WRONG_STRING_OBJECT",
        "body": "ERR_WRONG_STRING_OBJECT",
        "code": [
            {
                "label": "ERR_WRONG_STRING_OBJECT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Испорченный объект строки",
            "en": "Damaged string object"
        }
    },
    "ERR_WRONG_STRING_PARAMETER": {
        "group": 20,
        "label": "ERR_WRONG_STRING_PARAMETER",
        "body": "ERR_WRONG_STRING_PARAMETER",
        "code": [
            {
                "label": "ERR_WRONG_STRING_PARAMETER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Испорченный параметр типа string",
            "en": "Damaged parameter of string type"
        }
    },
    "ERR_WRONG_STRING_TIME": {
        "group": 20,
        "label": "ERR_WRONG_STRING_TIME",
        "body": "ERR_WRONG_STRING_TIME",
        "code": [
            {
                "label": "ERR_WRONG_STRING_TIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "В строке ошибочное время",
            "en": "Wrong time in the string"
        }
    },
    "ERR_ZEROSIZE_ARRAY": {
        "group": 20,
        "label": "ERR_ZEROSIZE_ARRAY",
        "body": "ERR_ZEROSIZE_ARRAY",
        "code": [
            {
                "label": "ERR_ZEROSIZE_ARRAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Массив нулевой длины",
            "en": "An array of zero length"
        }
    },
    "FILE_ACCESS_DATE": {
        "group": 20,
        "label": "FILE_ACCESS_DATE",
        "body": "FILE_ACCESS_DATE",
        "code": [
            {
                "label": "FILE_ACCESS_DATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дата последнего доступа к файлу",
            "en": "Date of the last access to the file"
        }
    },
    "FILE_ANSI": {
        "group": 20,
        "label": "FILE_ANSI",
        "body": "FILE_ANSI",
        "code": [
            {
                "label": "FILE_ANSI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Строки типа ANSI (однобайтовые символы). Флаг используется при открытии файлов (FileOpen())",
            "en": "Strings of ANSI type (one byte symbols). Flag is used in FileOpen()."
        }
    },
    "FILE_BIN": {
        "group": 20,
        "label": "FILE_BIN",
        "body": "FILE_BIN",
        "code": [
            {
                "label": "FILE_BIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Двоичный режим чтения-записи (без преобразования из строки и в строку). Флаг используется при открытии файлов (FileOpen())",
            "en": "Binary read/write mode (without string to string conversion). Flag is used in FileOpen()."
        }
    },
    "FILE_COMMON": {
        "group": 20,
        "label": "FILE_COMMON",
        "body": "FILE_COMMON",
        "code": [
            {
                "label": "FILE_COMMON",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Расположение файла в общей папке всех клиентских терминалов \\Terminal\\Common\\Files. Флаг используется при открытии файлов (FileOpen()), копировании файлов (FileCopy(), FileMove()) и проверке существования файлов (FileIsExist())",
            "en": "The file path in the common folder of all client terminals \\Terminal\\Common\\Files. Flag is used in FileOpen(), FileCopy(), FileMove() and in FileIsExist() functions."
        }
    },
    "FILE_CREATE_DATE": {
        "group": 20,
        "label": "FILE_CREATE_DATE",
        "body": "FILE_CREATE_DATE",
        "code": [
            {
                "label": "FILE_CREATE_DATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дата создания",
            "en": "Date of creation"
        }
    },
    "FILE_CSV": {
        "group": 20,
        "label": "FILE_CSV",
        "body": "FILE_CSV",
        "code": [
            {
                "label": "FILE_CSV",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл типа csv (все записанные элементы преобразуются к строкам соответствующего типа, unicode или ansi, и разделяются разделителем). Флаг используется при открытии файлов (FileOpen())",
            "en": "CSV file (all its elements are converted to strings of the appropriate type, Unicode or ANSI, and separated by separator). Flag is used in FileOpen()."
        }
    },
    "FILE_END": {
        "group": 20,
        "label": "FILE_END",
        "body": "FILE_END",
        "code": [
            {
                "label": "FILE_END",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Получение признака конца файла",
            "en": "Get the end of file sign"
        }
    },
    "FILE_EXISTS": {
        "group": 20,
        "label": "FILE_EXISTS",
        "body": "FILE_EXISTS",
        "code": [
            {
                "label": "FILE_EXISTS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Проверка на существование",
            "en": "Check the existence"
        }
    },
    "FILE_IS_ANSI": {
        "group": 20,
        "label": "FILE_IS_ANSI",
        "body": "FILE_IS_ANSI",
        "code": [
            {
                "label": "FILE_IS_ANSI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл открыт как ANSI (смотри FILE_ANSI)",
            "en": "The file is opened as ANSI (see FILE_ANSI)"
        }
    },
    "FILE_IS_BINARY": {
        "group": 20,
        "label": "FILE_IS_BINARY",
        "body": "FILE_IS_BINARY",
        "code": [
            {
                "label": "FILE_IS_BINARY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл открыт как бинарный (смотри FILE_BIN)",
            "en": "The file is opened as a binary file (see FILE_BIN)"
        }
    },
    "FILE_IS_COMMON": {
        "group": 20,
        "label": "FILE_IS_COMMON",
        "body": "FILE_IS_COMMON",
        "code": [
            {
                "label": "FILE_IS_COMMON",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл открыт в общей папке всех клиентских терминалов (смотри FILE_COMMON)",
            "en": "The file is opened in a shared folder of all terminals (see FILE_COMMON)"
        }
    },
    "FILE_IS_CSV": {
        "group": 20,
        "label": "FILE_IS_CSV",
        "body": "FILE_IS_CSV",
        "code": [
            {
                "label": "FILE_IS_CSV",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл открыт как CSV (смотри FILE_CSV)",
            "en": "The file is opened as CSV (see FILE_CSV)"
        }
    },
    "FILE_IS_READABLE": {
        "group": 20,
        "label": "FILE_IS_READABLE",
        "body": "FILE_IS_READABLE",
        "code": [
            {
                "label": "FILE_IS_READABLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл открыт с возможностью чтения (смотри FILE_READ)",
            "en": "The opened file is readable (see FILE_READ)"
        }
    },
    "FILE_IS_TEXT": {
        "group": 20,
        "label": "FILE_IS_TEXT",
        "body": "FILE_IS_TEXT",
        "code": [
            {
                "label": "FILE_IS_TEXT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл открыт как текстовый (смотри FILE_TXT)",
            "en": "The file is opened as a text file (see FILE_TXT)"
        }
    },
    "FILE_IS_WRITABLE": {
        "group": 20,
        "label": "FILE_IS_WRITABLE",
        "body": "FILE_IS_WRITABLE",
        "code": [
            {
                "label": "FILE_IS_WRITABLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл открыт с возможностью записи (смотри FILE_WRITE)",
            "en": "The opened file is writable (see FILE_WRITE)"
        }
    },
    "FILE_LINE_END": {
        "group": 20,
        "label": "FILE_LINE_END",
        "body": "FILE_LINE_END",
        "code": [
            {
                "label": "FILE_LINE_END",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Получение признака конца строки",
            "en": "Get the end of line sign"
        }
    },
    "FILE_MODIFY_DATE": {
        "group": 20,
        "label": "FILE_MODIFY_DATE",
        "body": "FILE_MODIFY_DATE",
        "code": [
            {
                "label": "FILE_MODIFY_DATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дата последнего изменения",
            "en": "Date of the last modification"
        }
    },
    "FILE_POSITION": {
        "group": 20,
        "label": "FILE_POSITION",
        "body": "FILE_POSITION",
        "code": [
            {
                "label": "FILE_POSITION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Позиция указателя в файле",
            "en": "Position of a pointer in the file"
        }
    },
    "FILE_READ": {
        "group": 20,
        "label": "FILE_READ",
        "body": "FILE_READ",
        "code": [
            {
                "label": "FILE_READ",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл открывается для чтения. Флаг используется при открытии файлов (FileOpen()). При открытии файла обязательно должен быть указан флаг FILE_WRITE и/или флаг FILE_READ",
            "en": "File is opened for reading. Flag is used in FileOpen(). When opening a file specification of FILE_WRITE and/or FILE_READ is required."
        }
    },
    "FILE_REWRITE": {
        "group": 20,
        "label": "FILE_REWRITE",
        "body": "FILE_REWRITE",
        "code": [
            {
                "label": "FILE_REWRITE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Возможность перезаписывания файла функциями FileCopy() и FileMove(). Файл должен существовать или открываться для записи. В противном случае файл открыт не будет",
            "en": "Possibility for the file rewrite using functions FileCopy() and FileMove(). The file should exist or should be opened for writing, otherwise the file will not be opened."
        }
    },
    "FILE_SHARE_READ": {
        "group": 20,
        "label": "FILE_SHARE_READ",
        "body": "FILE_SHARE_READ",
        "code": [
            {
                "label": "FILE_SHARE_READ",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Совместный доступ по чтению со стороны нескольких программ. Флаг используется при открытии файлов (FileOpen()), но не заменяет при открытии файла необходимости указать FILE_WRITE и/или флаг FILE_READ",
            "en": "Shared access for reading from several programs. Flag is used in FileOpen(), but it does not replace the necessity to indicate FILE_WRITE and/or the FILE_READ flag when opening a file."
        }
    },
    "FILE_SHARE_WRITE": {
        "group": 20,
        "label": "FILE_SHARE_WRITE",
        "body": "FILE_SHARE_WRITE",
        "code": [
            {
                "label": "FILE_SHARE_WRITE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Совместный доступ по записи со стороны нескольких программ. Флаг используется при открытии файлов (FileOpen()), но не заменяет при открытии файла необходимости указать FILE_WRITE и/или флаг FILE_READ",
            "en": "Shared access for writing from several programs. Flag is used in FileOpen(), but it does not replace the necessity to indicate FILE_WRITE and/or the FILE_READ flag when opening a file."
        }
    },
    "FILE_SIZE": {
        "group": 20,
        "label": "FILE_SIZE",
        "body": "FILE_SIZE",
        "code": [
            {
                "label": "FILE_SIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер файла в байтах",
            "en": "File size in bytes"
        }
    },
    "FILE_TXT": {
        "group": 20,
        "label": "FILE_TXT",
        "body": "FILE_TXT",
        "code": [
            {
                "label": "FILE_TXT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Простой текстовый файл (тот же csv, однако разделитель не принимается во внимание). Флаг используется при открытии файлов (FileOpen())",
            "en": "Simple text file (the same as csv file, but without taking into account the separators). Flag is used in FileOpen()."
        }
    },
    "FILE_UNICODE": {
        "group": 20,
        "label": "FILE_UNICODE",
        "body": "FILE_UNICODE",
        "code": [
            {
                "label": "FILE_UNICODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Строки типа UNICODE (двухбайтовые символы). Флаг используется при открытии файлов (FileOpen())",
            "en": "Strings of UNICODE type (two byte symbols). Flag is used in FileOpen()."
        }
    },
    "FILE_WRITE": {
        "group": 20,
        "label": "FILE_WRITE",
        "body": "FILE_WRITE",
        "code": [
            {
                "label": "FILE_WRITE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Файл открывается для записи. Флаг используется при открытии файлов (FileOpen()). При открытии файла обязательно должен быть указан флаг FILE_WRITE и/или флаг FILE_READ",
            "en": "File is opened for writing. Flag is used in FileOpen(). When opening a file specification of FILE_WRITE and/or FILE_READ is required."
        }
    },
    "FLT_DIG": {
        "group": 20,
        "label": "FLT_DIG",
        "body": "FLT_DIG",
        "code": [
            {
                "label": "FLT_DIG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество значимых десятичных знаков",
            "en": "Number of significant decimal digits for float type"
        }
    },
    "FLT_EPSILON": {
        "group": 20,
        "label": "FLT_EPSILON",
        "body": "FLT_EPSILON",
        "code": [
            {
                "label": "FLT_EPSILON",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Наименьшее число для которого выполняется условие 1.0+FLT_EPSILON != 1.0",
            "en": "Minimal value, which satisfies the condition:\n1.0+DBL_EPSILON != 1.0 (for float type)"
        }
    },
    "FLT_MANT_DIG": {
        "group": 20,
        "label": "FLT_MANT_DIG",
        "body": "FLT_MANT_DIG",
        "code": [
            {
                "label": "FLT_MANT_DIG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество битов в мантиссе",
            "en": "Bits count in a mantissa for float type"
        }
    },
    "FLT_MAX": {
        "group": 20,
        "label": "FLT_MAX",
        "body": "FLT_MAX",
        "code": [
            {
                "label": "FLT_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом float",
            "en": "Maximal value, which can be represented by float type"
        }
    },
    "FLT_MAX_10_EXP": {
        "group": 20,
        "label": "FLT_MAX_10_EXP",
        "body": "FLT_MAX_10_EXP",
        "code": [
            {
                "label": "FLT_MAX_10_EXP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное десятичное значение степени экспоненты",
            "en": "Maximal decimal value of exponent degree for float type"
        }
    },
    "FLT_MAX_EXP": {
        "group": 20,
        "label": "FLT_MAX_EXP",
        "body": "FLT_MAX_EXP",
        "code": [
            {
                "label": "FLT_MAX_EXP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное двоичное значение степени экспоненты",
            "en": "Maximal binary value of exponent degree for float type"
        }
    },
    "FLT_MIN": {
        "group": 20,
        "label": "FLT_MIN",
        "body": "FLT_MIN",
        "code": [
            {
                "label": "FLT_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное положительное значение, которое может быть  представлено типом float",
            "en": "Minimal positive value, which can be represented by float type"
        }
    },
    "FLT_MIN_10_EXP": {
        "group": 20,
        "label": "FLT_MIN_10_EXP",
        "body": "FLT_MIN_10_EXP",
        "code": [
            {
                "label": "FLT_MIN_10_EXP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное десятичное значение степени экспоненты",
            "en": "Minimal decimal value of exponent degree for float type"
        }
    },
    "FLT_MIN_EXP": {
        "group": 20,
        "label": "FLT_MIN_EXP",
        "body": "FLT_MIN_EXP",
        "code": [
            {
                "label": "FLT_MIN_EXP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное двоичное значение степени экспоненты",
            "en": "Minimal binary value of exponent degree for float type"
        }
    },
    "FRIDAY": {
        "group": 20,
        "label": "FRIDAY",
        "body": "FRIDAY",
        "code": [
            {
                "label": "FRIDAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Пятница",
            "en": "Friday"
        }
    },
    "GANN_DOWN_TREND": {
        "group": 20,
        "label": "GANN_DOWN_TREND",
        "body": "GANN_DOWN_TREND",
        "code": [
            {
                "label": "GANN_DOWN_TREND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия соответствует нисходящему тренду",
            "en": "Line corresponding to the downward trend"
        }
    },
    "GANN_UP_TREND": {
        "group": 20,
        "label": "GANN_UP_TREND",
        "body": "GANN_UP_TREND",
        "code": [
            {
                "label": "GANN_UP_TREND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия соответствует восходящему тренду",
            "en": "Line corresponding to the uptrend line"
        }
    },
    "GATORJAW_LINE": {
        "group": 20,
        "label": "GATORJAW_LINE",
        "body": "GATORJAW_LINE",
        "code": [
            {
                "label": "GATORJAW_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия челюстей",
            "en": "Jaw line"
        }
    },
    "GATORLIPS_LINE": {
        "group": 20,
        "label": "GATORLIPS_LINE",
        "body": "GATORLIPS_LINE",
        "code": [
            {
                "label": "GATORLIPS_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия губ",
            "en": "Lips line"
        }
    },
    "GATORTEETH_LINE": {
        "group": 20,
        "label": "GATORTEETH_LINE",
        "body": "GATORTEETH_LINE",
        "code": [
            {
                "label": "GATORTEETH_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия зубов",
            "en": "Teeth line"
        }
    },
    "IDABORT": {
        "group": 20,
        "label": "IDABORT",
        "body": "IDABORT",
        "code": [
            {
                "label": "IDABORT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выбрана кнопка Прервать (Abort)",
            "en": "\"Abort\" button has been pressed"
        }
    },
    "IDCANCEL": {
        "group": 20,
        "label": "IDCANCEL",
        "body": "IDCANCEL",
        "code": [
            {
                "label": "IDCANCEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выбрана кнопка Отмена (Cancel)",
            "en": "\"Cancel\" button has been pressed"
        }
    },
    "IDCONTINUE": {
        "group": 20,
        "label": "IDCONTINUE",
        "body": "IDCONTINUE",
        "code": [
            {
                "label": "IDCONTINUE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выбрана кнопка Продолжить (Continue)",
            "en": "\"Continue\" button has been pressed"
        }
    },
    "IDIGNORE": {
        "group": 20,
        "label": "IDIGNORE",
        "body": "IDIGNORE",
        "code": [
            {
                "label": "IDIGNORE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выбрана кнопка Пропустить (Ignore)",
            "en": "\"Ignore\" button has been pressed"
        }
    },
    "IDNO": {
        "group": 20,
        "label": "IDNO",
        "body": "IDNO",
        "code": [
            {
                "label": "IDNO",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выбрана кнопка Нет (No)",
            "en": "\"No\" button has been pressed"
        }
    },
    "IDOK": {
        "group": 20,
        "label": "IDOK",
        "body": "IDOK",
        "code": [
            {
                "label": "IDOK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выбрана кнопка OK",
            "en": "\"OK\" button has been pressed"
        }
    },
    "IDRETRY": {
        "group": 20,
        "label": "IDRETRY",
        "body": "IDRETRY",
        "code": [
            {
                "label": "IDRETRY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выбрана кнопка Повтор (Retry)",
            "en": "\"Retry\" button has been pressed"
        }
    },
    "IDTRYAGAIN": {
        "group": 20,
        "label": "IDTRYAGAIN",
        "body": "IDTRYAGAIN",
        "code": [
            {
                "label": "IDTRYAGAIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выбрана кнопка Повторить (Try Again)",
            "en": "\"Try Again\" button has been pressed"
        }
    },
    "IDYES": {
        "group": 20,
        "label": "IDYES",
        "body": "IDYES",
        "code": [
            {
                "label": "IDYES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выбрана кнопка Да (Yes)",
            "en": "\"Yes\" button has been pressed"
        }
    },
    "IND_AC": {
        "group": 20,
        "label": "IND_AC",
        "body": "IND_AC",
        "code": [
            {
                "label": "IND_AC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Accelerator Oscillator",
            "en": "Accelerator Oscillator"
        }
    },
    "IND_AD": {
        "group": 20,
        "label": "IND_AD",
        "body": "IND_AD",
        "code": [
            {
                "label": "IND_AD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Accumulation/Distribution",
            "en": "Accumulation/Distribution"
        }
    },
    "IND_ADX": {
        "group": 20,
        "label": "IND_ADX",
        "body": "IND_ADX",
        "code": [
            {
                "label": "IND_ADX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Average Directional Index",
            "en": "Average Directional Index"
        }
    },
    "IND_ADXW": {
        "group": 20,
        "label": "IND_ADXW",
        "body": "IND_ADXW",
        "code": [
            {
                "label": "IND_ADXW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "ADX by Welles Wilder",
            "en": "ADX by Welles Wilder"
        }
    },
    "IND_ALLIGATOR": {
        "group": 20,
        "label": "IND_ALLIGATOR",
        "body": "IND_ALLIGATOR",
        "code": [
            {
                "label": "IND_ALLIGATOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Alligator",
            "en": "Alligator"
        }
    },
    "IND_AMA": {
        "group": 20,
        "label": "IND_AMA",
        "body": "IND_AMA",
        "code": [
            {
                "label": "IND_AMA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Adaptive Moving Average",
            "en": "Adaptive Moving Average"
        }
    },
    "IND_AO": {
        "group": 20,
        "label": "IND_AO",
        "body": "IND_AO",
        "code": [
            {
                "label": "IND_AO",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Awesome Oscillator",
            "en": "Awesome Oscillator"
        }
    },
    "IND_ATR": {
        "group": 20,
        "label": "IND_ATR",
        "body": "IND_ATR",
        "code": [
            {
                "label": "IND_ATR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Average True Range",
            "en": "Average True Range"
        }
    },
    "IND_BANDS": {
        "group": 20,
        "label": "IND_BANDS",
        "body": "IND_BANDS",
        "code": [
            {
                "label": "IND_BANDS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Bollinger Bands®",
            "en": "Bollinger Bands®"
        }
    },
    "IND_BEARS": {
        "group": 20,
        "label": "IND_BEARS",
        "body": "IND_BEARS",
        "code": [
            {
                "label": "IND_BEARS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Bears Power",
            "en": "Bears Power"
        }
    },
    "IND_BULLS": {
        "group": 20,
        "label": "IND_BULLS",
        "body": "IND_BULLS",
        "code": [
            {
                "label": "IND_BULLS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Bulls Power",
            "en": "Bulls Power"
        }
    },
    "IND_BWMFI": {
        "group": 20,
        "label": "IND_BWMFI",
        "body": "IND_BWMFI",
        "code": [
            {
                "label": "IND_BWMFI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Market Facilitation Index",
            "en": "Market Facilitation Index"
        }
    },
    "IND_CCI": {
        "group": 20,
        "label": "IND_CCI",
        "body": "IND_CCI",
        "code": [
            {
                "label": "IND_CCI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Commodity Channel Index",
            "en": "Commodity Channel Index"
        }
    },
    "IND_CHAIKIN": {
        "group": 20,
        "label": "IND_CHAIKIN",
        "body": "IND_CHAIKIN",
        "code": [
            {
                "label": "IND_CHAIKIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Chaikin Oscillator",
            "en": "Chaikin Oscillator"
        }
    },
    "IND_CUSTOM": {
        "group": 20,
        "label": "IND_CUSTOM",
        "body": "IND_CUSTOM",
        "code": [
            {
                "label": "IND_CUSTOM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Custom indicator",
            "en": "Custom indicator"
        }
    },
    "IND_DEMA": {
        "group": 20,
        "label": "IND_DEMA",
        "body": "IND_DEMA",
        "code": [
            {
                "label": "IND_DEMA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Double Exponential Moving Average",
            "en": "Double Exponential Moving Average"
        }
    },
    "IND_DEMARKER": {
        "group": 20,
        "label": "IND_DEMARKER",
        "body": "IND_DEMARKER",
        "code": [
            {
                "label": "IND_DEMARKER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "DeMarker",
            "en": "DeMarker"
        }
    },
    "IND_ENVELOPES": {
        "group": 20,
        "label": "IND_ENVELOPES",
        "body": "IND_ENVELOPES",
        "code": [
            {
                "label": "IND_ENVELOPES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Envelopes",
            "en": "Envelopes"
        }
    },
    "IND_FORCE": {
        "group": 20,
        "label": "IND_FORCE",
        "body": "IND_FORCE",
        "code": [
            {
                "label": "IND_FORCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Force Index",
            "en": "Force Index"
        }
    },
    "IND_FRACTALS": {
        "group": 20,
        "label": "IND_FRACTALS",
        "body": "IND_FRACTALS",
        "code": [
            {
                "label": "IND_FRACTALS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Fractals",
            "en": "Fractals"
        }
    },
    "IND_FRAMA": {
        "group": 20,
        "label": "IND_FRAMA",
        "body": "IND_FRAMA",
        "code": [
            {
                "label": "IND_FRAMA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Fractal Adaptive Moving Average",
            "en": "Fractal Adaptive Moving Average"
        }
    },
    "IND_GATOR": {
        "group": 20,
        "label": "IND_GATOR",
        "body": "IND_GATOR",
        "code": [
            {
                "label": "IND_GATOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Gator Oscillator",
            "en": "Gator Oscillator"
        }
    },
    "IND_ICHIMOKU": {
        "group": 20,
        "label": "IND_ICHIMOKU",
        "body": "IND_ICHIMOKU",
        "code": [
            {
                "label": "IND_ICHIMOKU",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ichimoku Kinko Hyo",
            "en": "Ichimoku Kinko Hyo"
        }
    },
    "IND_MA": {
        "group": 20,
        "label": "IND_MA",
        "body": "IND_MA",
        "code": [
            {
                "label": "IND_MA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Moving Average",
            "en": "Moving Average"
        }
    },
    "IND_MACD": {
        "group": 20,
        "label": "IND_MACD",
        "body": "IND_MACD",
        "code": [
            {
                "label": "IND_MACD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "MACD",
            "en": "MACD"
        }
    },
    "IND_MFI": {
        "group": 20,
        "label": "IND_MFI",
        "body": "IND_MFI",
        "code": [
            {
                "label": "IND_MFI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Money Flow Index",
            "en": "Money Flow Index"
        }
    },
    "IND_MOMENTUM": {
        "group": 20,
        "label": "IND_MOMENTUM",
        "body": "IND_MOMENTUM",
        "code": [
            {
                "label": "IND_MOMENTUM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Momentum",
            "en": "Momentum"
        }
    },
    "IND_OBV": {
        "group": 20,
        "label": "IND_OBV",
        "body": "IND_OBV",
        "code": [
            {
                "label": "IND_OBV",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "On Balance Volume",
            "en": "On Balance Volume"
        }
    },
    "IND_OSMA": {
        "group": 20,
        "label": "IND_OSMA",
        "body": "IND_OSMA",
        "code": [
            {
                "label": "IND_OSMA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "OsMA",
            "en": "OsMA"
        }
    },
    "IND_RSI": {
        "group": 20,
        "label": "IND_RSI",
        "body": "IND_RSI",
        "code": [
            {
                "label": "IND_RSI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Relative Strength Index",
            "en": "Relative Strength Index"
        }
    },
    "IND_RVI": {
        "group": 20,
        "label": "IND_RVI",
        "body": "IND_RVI",
        "code": [
            {
                "label": "IND_RVI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Relative Vigor Index",
            "en": "Relative Vigor Index"
        }
    },
    "IND_SAR": {
        "group": 20,
        "label": "IND_SAR",
        "body": "IND_SAR",
        "code": [
            {
                "label": "IND_SAR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Parabolic SAR",
            "en": "Parabolic SAR"
        }
    },
    "IND_STDDEV": {
        "group": 20,
        "label": "IND_STDDEV",
        "body": "IND_STDDEV",
        "code": [
            {
                "label": "IND_STDDEV",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Standard Deviation",
            "en": "Standard Deviation"
        }
    },
    "IND_STOCHASTIC": {
        "group": 20,
        "label": "IND_STOCHASTIC",
        "body": "IND_STOCHASTIC",
        "code": [
            {
                "label": "IND_STOCHASTIC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Stochastic Oscillator",
            "en": "Stochastic Oscillator"
        }
    },
    "IND_TEMA": {
        "group": 20,
        "label": "IND_TEMA",
        "body": "IND_TEMA",
        "code": [
            {
                "label": "IND_TEMA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Triple Exponential Moving Average",
            "en": "Triple Exponential Moving Average"
        }
    },
    "IND_TRIX": {
        "group": 20,
        "label": "IND_TRIX",
        "body": "IND_TRIX",
        "code": [
            {
                "label": "IND_TRIX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Triple Exponential Moving Averages Oscillator",
            "en": "Triple Exponential Moving Averages Oscillator"
        }
    },
    "IND_VIDYA": {
        "group": 20,
        "label": "IND_VIDYA",
        "body": "IND_VIDYA",
        "code": [
            {
                "label": "IND_VIDYA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Variable Index Dynamic Average",
            "en": "Variable Index Dynamic Average"
        }
    },
    "IND_VOLUMES": {
        "group": 20,
        "label": "IND_VOLUMES",
        "body": "IND_VOLUMES",
        "code": [
            {
                "label": "IND_VOLUMES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Volumes",
            "en": "Volumes"
        }
    },
    "IND_WPR": {
        "group": 20,
        "label": "IND_WPR",
        "body": "IND_WPR",
        "code": [
            {
                "label": "IND_WPR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Williams' Percent Range",
            "en": "Williams' Percent Range"
        }
    },
    "INDICATOR_CALCULATIONS": {
        "group": 20,
        "label": "INDICATOR_CALCULATIONS",
        "body": "INDICATOR_CALCULATIONS",
        "code": [
            {
                "label": "INDICATOR_CALCULATIONS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Вспомогательные буферы для промежуточных вычислений",
            "en": "Auxiliary buffers for intermediate calculations"
        }
    },
    "INDICATOR_COLOR_INDEX": {
        "group": 20,
        "label": "INDICATOR_COLOR_INDEX",
        "body": "INDICATOR_COLOR_INDEX",
        "code": [
            {
                "label": "INDICATOR_COLOR_INDEX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвета отрисовки",
            "en": "Color"
        }
    },
    "INDICATOR_DATA": {
        "group": 20,
        "label": "INDICATOR_DATA",
        "body": "INDICATOR_DATA",
        "code": [
            {
                "label": "INDICATOR_DATA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Данные для отрисовки",
            "en": "Data to draw"
        }
    },
    "INDICATOR_DIGITS": {
        "group": 20,
        "label": "INDICATOR_DIGITS",
        "body": "INDICATOR_DIGITS",
        "code": [
            {
                "label": "INDICATOR_DIGITS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Точность отображения значений индикатора",
            "en": "Accuracy of drawing of indicator values"
        }
    },
    "INDICATOR_HEIGHT": {
        "group": 20,
        "label": "INDICATOR_HEIGHT",
        "body": "INDICATOR_HEIGHT",
        "code": [
            {
                "label": "INDICATOR_HEIGHT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Фиксированная высота собственного окна индикатора (команда препроцессора #property indicator_height)",
            "en": "Fixed height of the indicator's window (the preprocessor command #property indicator_height)"
        }
    },
    "INDICATOR_LEVELCOLOR": {
        "group": 20,
        "label": "INDICATOR_LEVELCOLOR",
        "body": "INDICATOR_LEVELCOLOR",
        "code": [
            {
                "label": "INDICATOR_LEVELCOLOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет линии уровня",
            "en": "Color of the level line"
        }
    },
    "INDICATOR_LEVELS": {
        "group": 20,
        "label": "INDICATOR_LEVELS",
        "body": "INDICATOR_LEVELS",
        "code": [
            {
                "label": "INDICATOR_LEVELS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество уровней на окне индикатора",
            "en": "Number of levels in the indicator window"
        }
    },
    "INDICATOR_LEVELSTYLE": {
        "group": 20,
        "label": "INDICATOR_LEVELSTYLE",
        "body": "INDICATOR_LEVELSTYLE",
        "code": [
            {
                "label": "INDICATOR_LEVELSTYLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Стиль линии уровня",
            "en": "Style of the level line"
        }
    },
    "INDICATOR_LEVELTEXT": {
        "group": 20,
        "label": "INDICATOR_LEVELTEXT",
        "body": "INDICATOR_LEVELTEXT",
        "code": [
            {
                "label": "INDICATOR_LEVELTEXT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Описание уровня",
            "en": "Level description"
        }
    },
    "INDICATOR_LEVELVALUE": {
        "group": 20,
        "label": "INDICATOR_LEVELVALUE",
        "body": "INDICATOR_LEVELVALUE",
        "code": [
            {
                "label": "INDICATOR_LEVELVALUE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение уровня",
            "en": "Level value"
        }
    },
    "INDICATOR_LEVELWIDTH": {
        "group": 20,
        "label": "INDICATOR_LEVELWIDTH",
        "body": "INDICATOR_LEVELWIDTH",
        "code": [
            {
                "label": "INDICATOR_LEVELWIDTH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Толщина линии уровня",
            "en": "Thickness of the level line"
        }
    },
    "INDICATOR_MAXIMUM": {
        "group": 20,
        "label": "INDICATOR_MAXIMUM",
        "body": "INDICATOR_MAXIMUM",
        "code": [
            {
                "label": "INDICATOR_MAXIMUM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимум окна индикатора",
            "en": "Maximum of the indicator window"
        }
    },
    "INDICATOR_MINIMUM": {
        "group": 20,
        "label": "INDICATOR_MINIMUM",
        "body": "INDICATOR_MINIMUM",
        "code": [
            {
                "label": "INDICATOR_MINIMUM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимум окна индикатора",
            "en": "Minimum of the indicator window"
        }
    },
    "INDICATOR_SHORTNAME": {
        "group": 20,
        "label": "INDICATOR_SHORTNAME",
        "body": "INDICATOR_SHORTNAME",
        "code": [
            {
                "label": "INDICATOR_SHORTNAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Короткое наименование индикатора",
            "en": "Short indicator name"
        }
    },
    "INT_MAX": {
        "group": 20,
        "label": "INT_MAX",
        "body": "INT_MAX",
        "code": [
            {
                "label": "INT_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом int",
            "en": "Maximal value, which can be represented by int type"
        }
    },
    "INT_MIN": {
        "group": 20,
        "label": "INT_MIN",
        "body": "INT_MIN",
        "code": [
            {
                "label": "INT_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное значение, которое может быть представлено типом int",
            "en": "Minimal value, which can be represented by int type"
        }
    },
    "INVALID_HANDLE": {
        "group": 20,
        "label": "INVALID_HANDLE",
        "body": "INVALID_HANDLE",
        "code": [
            {
                "label": "INVALID_HANDLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Некорректный хэндл",
            "en": "Incorrect handle"
        }
    },
    "IS_DEBUG_MODE": {
        "group": 20,
        "label": "IS_DEBUG_MODE",
        "body": "IS_DEBUG_MODE",
        "code": [
            {
                "label": "IS_DEBUG_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак работы mq5-программы в режиме отладки",
            "en": "Flag that a mq5-program operates in debug mode"
        }
    },
    "IS_PROFILE_MODE": {
        "group": 20,
        "label": "IS_PROFILE_MODE",
        "body": "IS_PROFILE_MODE",
        "code": [
            {
                "label": "IS_PROFILE_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак работы mq5-программы в режиме профилирования",
            "en": "Flag that a mq5-program operates in profiling mode"
        }
    },
    "KIJUNSEN_LINE": {
        "group": 20,
        "label": "KIJUNSEN_LINE",
        "body": "KIJUNSEN_LINE",
        "code": [
            {
                "label": "KIJUNSEN_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия Kijun-sen",
            "en": "Kijun-sen line"
        }
    },
    "LICENSE_DEMO": {
        "group": 20,
        "label": "LICENSE_DEMO",
        "body": "LICENSE_DEMO",
        "code": [
            {
                "label": "LICENSE_DEMO",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Демо-версия платного продукта из Маркета. Работает только в тестере стратегий",
            "en": "A trial version of a paid product from the Market. It works only in the strategy tester"
        }
    },
    "LICENSE_FREE": {
        "group": 20,
        "label": "LICENSE_FREE",
        "body": "LICENSE_FREE",
        "code": [
            {
                "label": "LICENSE_FREE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Бесплатная неограниченная версия",
            "en": "A free unlimited version"
        }
    },
    "LICENSE_FULL": {
        "group": 20,
        "label": "LICENSE_FULL",
        "body": "LICENSE_FULL",
        "code": [
            {
                "label": "LICENSE_FULL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Купленная лицензионная версия допускает не менее 5 активаций. Продавец может увеличить разрешенное число активаций",
            "en": "A purchased licensed version allows at least 5 activations. The number of activations is specified by seller. Seller may increase the allowed number of activations"
        }
    },
    "LICENSE_TIME": {
        "group": 20,
        "label": "LICENSE_TIME",
        "body": "LICENSE_TIME",
        "code": [
            {
                "label": "LICENSE_TIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Версия с ограниченной по времени лицензией",
            "en": "A version with a limited term license"
        }
    },
    "LONG_MAX": {
        "group": 20,
        "label": "LONG_MAX",
        "body": "LONG_MAX",
        "code": [
            {
                "label": "LONG_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом long",
            "en": "Maximal value, which can be represented by long type"
        }
    },
    "LONG_MIN": {
        "group": 20,
        "label": "LONG_MIN",
        "body": "LONG_MIN",
        "code": [
            {
                "label": "LONG_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное значение, которое может быть представлено типом long",
            "en": "Minimal value, which can be represented by long type"
        }
    },
    "LOWER_BAND": {
        "group": 20,
        "label": "LOWER_BAND",
        "body": "LOWER_BAND",
        "code": [
            {
                "label": "LOWER_BAND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нижняя граница",
            "en": "Lower limit"
        }
    },
    "LOWER_HISTOGRAM": {
        "group": 20,
        "label": "LOWER_HISTOGRAM",
        "body": "LOWER_HISTOGRAM",
        "code": [
            {
                "label": "LOWER_HISTOGRAM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нижняя гистограмма",
            "en": "Bottom histogram"
        }
    },
    "LOWER_LINE": {
        "group": 20,
        "label": "LOWER_LINE",
        "body": "LOWER_LINE",
        "code": [
            {
                "label": "LOWER_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нижняя линия",
            "en": "Bottom line"
        }
    },
    "M_1_PI": {
        "group": 20,
        "label": "M_1_PI",
        "body": "M_1_PI",
        "code": [
            {
                "label": "M_1_PI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "1/pi",
            "en": "1/pi"
        }
    },
    "M_2_PI": {
        "group": 20,
        "label": "M_2_PI",
        "body": "M_2_PI",
        "code": [
            {
                "label": "M_2_PI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "2/pi",
            "en": "2/pi"
        }
    },
    "M_2_SQRTPI": {
        "group": 20,
        "label": "M_2_SQRTPI",
        "body": "M_2_SQRTPI",
        "code": [
            {
                "label": "M_2_SQRTPI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "2/sqrt(pi)",
            "en": "2/sqrt(pi)"
        }
    },
    "M_E": {
        "group": 20,
        "label": "M_E",
        "body": "M_E",
        "code": [
            {
                "label": "M_E",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "e",
            "en": "e"
        }
    },
    "M_LN10": {
        "group": 20,
        "label": "M_LN10",
        "body": "M_LN10",
        "code": [
            {
                "label": "M_LN10",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "ln(10)",
            "en": "ln(10)"
        }
    },
    "M_LN2": {
        "group": 20,
        "label": "M_LN2",
        "body": "M_LN2",
        "code": [
            {
                "label": "M_LN2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "ln(2)",
            "en": "ln(2)"
        }
    },
    "M_LOG10E": {
        "group": 20,
        "label": "M_LOG10E",
        "body": "M_LOG10E",
        "code": [
            {
                "label": "M_LOG10E",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "log10(e)",
            "en": "log10(e)"
        }
    },
    "M_LOG2E": {
        "group": 20,
        "label": "M_LOG2E",
        "body": "M_LOG2E",
        "code": [
            {
                "label": "M_LOG2E",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "log2(e)",
            "en": "log2(e)"
        }
    },
    "M_PI": {
        "group": 20,
        "label": "M_PI",
        "body": "M_PI",
        "code": [
            {
                "label": "M_PI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "pi",
            "en": "pi"
        }
    },
    "M_PI_2": {
        "group": 20,
        "label": "M_PI_2",
        "body": "M_PI_2",
        "code": [
            {
                "label": "M_PI_2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "pi/2",
            "en": "pi/2"
        }
    },
    "M_PI_4": {
        "group": 20,
        "label": "M_PI_4",
        "body": "M_PI_4",
        "code": [
            {
                "label": "M_PI_4",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "pi/4",
            "en": "pi/4"
        }
    },
    "M_SQRT1_2": {
        "group": 20,
        "label": "M_SQRT1_2",
        "body": "M_SQRT1_2",
        "code": [
            {
                "label": "M_SQRT1_2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "1/sqrt(2)",
            "en": "1/sqrt(2)"
        }
    },
    "M_SQRT2": {
        "group": 20,
        "label": "M_SQRT2",
        "body": "M_SQRT2",
        "code": [
            {
                "label": "M_SQRT2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "sqrt(2)",
            "en": "sqrt(2)"
        }
    },
    "MAIN_LINE": {
        "group": 20,
        "label": "MAIN_LINE",
        "body": "MAIN_LINE",
        "code": [
            {
                "label": "MAIN_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Основная линия",
            "en": "Main line"
        }
    },
    "MB_ABORTRETRYIGNORE": {
        "group": 20,
        "label": "MB_ABORTRETRYIGNORE",
        "body": "MB_ABORTRETRYIGNORE",
        "code": [
            {
                "label": "MB_ABORTRETRYIGNORE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Окно сообщения содержит три кнопки: Abort, Retry и Ignore",
            "en": "Message window contains three buttons: Abort, Retry and Ignore"
        }
    },
    "MB_CANCELTRYCONTINUE": {
        "group": 20,
        "label": "MB_CANCELTRYCONTINUE",
        "body": "MB_CANCELTRYCONTINUE",
        "code": [
            {
                "label": "MB_CANCELTRYCONTINUE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Окно сообщения содержит три кнопки: Cancel, Try Again, Continue",
            "en": "Message window contains three buttons: Cancel, Try Again, Continue"
        }
    },
    "MB_DEFBUTTON1": {
        "group": 20,
        "label": "MB_DEFBUTTON1",
        "body": "MB_DEFBUTTON1",
        "code": [
            {
                "label": "MB_DEFBUTTON1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Первая кнопка MB_DEFBUTTON1 - кнопка выбрана по умолчанию, если MB_DEFBUTTON2, MB_DEFBUTTON3, или MB_DEFBUTTON4 не определены",
            "en": "The first button MB_DEFBUTTON1 - is default, if the other buttons MB_DEFBUTTON2, MB_DEFBUTTON3, or MB_DEFBUTTON4 are not specified"
        }
    },
    "MB_DEFBUTTON2": {
        "group": 20,
        "label": "MB_DEFBUTTON2",
        "body": "MB_DEFBUTTON2",
        "code": [
            {
                "label": "MB_DEFBUTTON2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Вторая кнопка - кнопка по умолчанию",
            "en": "The second button is default"
        }
    },
    "MB_DEFBUTTON3": {
        "group": 20,
        "label": "MB_DEFBUTTON3",
        "body": "MB_DEFBUTTON3",
        "code": [
            {
                "label": "MB_DEFBUTTON3",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Третья кнопка - кнопка по умолчанию",
            "en": "The third button is default"
        }
    },
    "MB_DEFBUTTON4": {
        "group": 20,
        "label": "MB_DEFBUTTON4",
        "body": "MB_DEFBUTTON4",
        "code": [
            {
                "label": "MB_DEFBUTTON4",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Четвертая кнопка - кнопка по умолчанию",
            "en": "The fourth button is default"
        }
    },
    "MB_ICONEXCLAMATION, \nMB_ICONWARNING": {
        "group": 20,
        "label": "MB_ICONEXCLAMATION, \nMB_ICONWARNING",
        "body": "MB_ICONEXCLAMATION, \nMB_ICONWARNING",
        "code": [
            {
                "label": "MB_ICONEXCLAMATION, \nMB_ICONWARNING",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изображение восклицательного знака",
            "en": "The exclamation/warning sign icon"
        }
    },
    "MB_ICONINFORMATION, \nMB_ICONASTERISK": {
        "group": 20,
        "label": "MB_ICONINFORMATION, \nMB_ICONASTERISK",
        "body": "MB_ICONINFORMATION, \nMB_ICONASTERISK",
        "code": [
            {
                "label": "MB_ICONINFORMATION, \nMB_ICONASTERISK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изображение, состоящее из строчного знака i в круге",
            "en": "The encircled i sign"
        }
    },
    "MB_ICONQUESTION": {
        "group": 20,
        "label": "MB_ICONQUESTION",
        "body": "MB_ICONQUESTION",
        "code": [
            {
                "label": "MB_ICONQUESTION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изображение вопросительного знака",
            "en": "The question sign icon"
        }
    },
    "MB_ICONSTOP, \nMB_ICONERROR, \nMB_ICONHAND": {
        "group": 20,
        "label": "MB_ICONSTOP, \nMB_ICONERROR, \nMB_ICONHAND",
        "body": "MB_ICONSTOP, \nMB_ICONERROR, \nMB_ICONHAND",
        "code": [
            {
                "label": "MB_ICONSTOP, \nMB_ICONERROR, \nMB_ICONHAND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изображение знака STOP",
            "en": "The STOP sign icon"
        }
    },
    "MB_OK": {
        "group": 20,
        "label": "MB_OK",
        "body": "MB_OK",
        "code": [
            {
                "label": "MB_OK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Окно сообщения содержит одну кнопку: OK. По умолчанию",
            "en": "Message window contains only one button: OK. Default"
        }
    },
    "MB_OKCANCEL": {
        "group": 20,
        "label": "MB_OKCANCEL",
        "body": "MB_OKCANCEL",
        "code": [
            {
                "label": "MB_OKCANCEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Окно сообщения содержит две кнопки: OK и Cancel",
            "en": "Message window contains two buttons: OK and Cancel"
        }
    },
    "MB_RETRYCANCEL": {
        "group": 20,
        "label": "MB_RETRYCANCEL",
        "body": "MB_RETRYCANCEL",
        "code": [
            {
                "label": "MB_RETRYCANCEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Окно сообщения содержит две кнопки: Retry и Cancel",
            "en": "Message window contains two buttons: Retry and Cancel"
        }
    },
    "MB_YESNO": {
        "group": 20,
        "label": "MB_YESNO",
        "body": "MB_YESNO",
        "code": [
            {
                "label": "MB_YESNO",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Окно сообщения содержит две кнопки: Yes и No",
            "en": "Message window contains two buttons: Yes and No"
        }
    },
    "MB_YESNOCANCEL": {
        "group": 20,
        "label": "MB_YESNOCANCEL",
        "body": "MB_YESNOCANCEL",
        "code": [
            {
                "label": "MB_YESNOCANCEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Окно сообщения содержит три кнопки: Yes, No и Cancel",
            "en": "Message window contains three buttons: Yes, No and Cancel"
        }
    },
    "MINUSDI_LINE": {
        "group": 20,
        "label": "MINUSDI_LINE",
        "body": "MINUSDI_LINE",
        "code": [
            {
                "label": "MINUSDI_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия –DI",
            "en": "Line –DI"
        }
    },
    "MODE_EMA": {
        "group": 20,
        "label": "MODE_EMA",
        "body": "MODE_EMA",
        "code": [
            {
                "label": "MODE_EMA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Экспоненциальное усреднение",
            "en": "Exponential averaging"
        }
    },
    "MODE_LWMA": {
        "group": 20,
        "label": "MODE_LWMA",
        "body": "MODE_LWMA",
        "code": [
            {
                "label": "MODE_LWMA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линейно-взвешенное усреднение",
            "en": "Linear-weighted averaging"
        }
    },
    "MODE_SMA": {
        "group": 20,
        "label": "MODE_SMA",
        "body": "MODE_SMA",
        "code": [
            {
                "label": "MODE_SMA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Простое усреднение",
            "en": "Simple averaging"
        }
    },
    "MODE_SMMA": {
        "group": 20,
        "label": "MODE_SMMA",
        "body": "MODE_SMMA",
        "code": [
            {
                "label": "MODE_SMMA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Сглаженное усреднение",
            "en": "Smoothed averaging"
        }
    },
    "MONDAY": {
        "group": 20,
        "label": "MONDAY",
        "body": "MONDAY",
        "code": [
            {
                "label": "MONDAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Понедельник",
            "en": "Monday"
        }
    },
    "MQL_DEBUG": {
        "group": 20,
        "label": "MQL_DEBUG",
        "body": "MQL_DEBUG",
        "code": [
            {
                "label": "MQL_DEBUG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак работы запущенной программы в режиме отладки",
            "en": "The flag, that indicates the debug mode"
        }
    },
    "MQL_DLLS_ALLOWED": {
        "group": 20,
        "label": "MQL_DLLS_ALLOWED",
        "body": "MQL_DLLS_ALLOWED",
        "code": [
            {
                "label": "MQL_DLLS_ALLOWED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешение на использование DLL для данной запущенной программы",
            "en": "The permission to use DLL for the given executed program"
        }
    },
    "MQL_FRAME_MODE": {
        "group": 20,
        "label": "MQL_FRAME_MODE",
        "body": "MQL_FRAME_MODE",
        "code": [
            {
                "label": "MQL_FRAME_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак работы запущенного эксперта на графике в режиме сбора фреймов результатов оптимизации",
            "en": "The flag, that indicates the Expert Advisor operating in gathering optimization result frames mode"
        }
    },
    "MQL_LICENSE_TYPE": {
        "group": 20,
        "label": "MQL_LICENSE_TYPE",
        "body": "MQL_LICENSE_TYPE",
        "code": [
            {
                "label": "MQL_LICENSE_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип лицензии модуля EX5. Лицензия относится именно к тому модулю EX5, из которого делается запрос с помощью MQLInfoInteger(MQL_LICENSE_TYPE).",
            "en": "Type of license of the EX5 module. The license refers to the EX5 module, from which a request is made using MQLInfoInteger(MQL_LICENSE_TYPE)."
        }
    },
    "MQL_MEMORY_LIMIT": {
        "group": 20,
        "label": "MQL_MEMORY_LIMIT",
        "body": "MQL_MEMORY_LIMIT",
        "code": [
            {
                "label": "MQL_MEMORY_LIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимально возможный объём динамической памяти для MQL5-программы в MB",
            "en": "Maximum possible amount of dynamic memory for MQL5 program in MB"
        }
    },
    "MQL_MEMORY_USED": {
        "group": 20,
        "label": "MQL_MEMORY_USED",
        "body": "MQL_MEMORY_USED",
        "code": [
            {
                "label": "MQL_MEMORY_USED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер использованной памяти MQL5-программой в MB",
            "en": "The memory size used by MQL5 program in MB"
        }
    },
    "MQL_OPTIMIZATION": {
        "group": 20,
        "label": "MQL_OPTIMIZATION",
        "body": "MQL_OPTIMIZATION",
        "code": [
            {
                "label": "MQL_OPTIMIZATION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак работы запущенной программы в процессе оптимизации",
            "en": "The flag, that indicates the optimization process"
        }
    },
    "MQL_PROFILER": {
        "group": 20,
        "label": "MQL_PROFILER",
        "body": "MQL_PROFILER",
        "code": [
            {
                "label": "MQL_PROFILER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак работы запущенной программы в режиме профилирования кода",
            "en": "The flag, that indicates the program operating in the code profiling mode"
        }
    },
    "MQL_PROGRAM_NAME": {
        "group": 20,
        "label": "MQL_PROGRAM_NAME",
        "body": "MQL_PROGRAM_NAME",
        "code": [
            {
                "label": "MQL_PROGRAM_NAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя запущенной MQL5-программы",
            "en": "Name of the mql5-program executed"
        }
    },
    "MQL_PROGRAM_PATH": {
        "group": 20,
        "label": "MQL_PROGRAM_PATH",
        "body": "MQL_PROGRAM_PATH",
        "code": [
            {
                "label": "MQL_PROGRAM_PATH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Путь для данной запущенной программы",
            "en": "Path for the given executed program"
        }
    },
    "MQL_PROGRAM_TYPE": {
        "group": 20,
        "label": "MQL_PROGRAM_TYPE",
        "body": "MQL_PROGRAM_TYPE",
        "code": [
            {
                "label": "MQL_PROGRAM_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип mql5-программы",
            "en": "Type of the mql5 program"
        }
    },
    "MQL_SIGNALS_ALLOWED": {
        "group": 20,
        "label": "MQL_SIGNALS_ALLOWED",
        "body": "MQL_SIGNALS_ALLOWED",
        "code": [
            {
                "label": "MQL_SIGNALS_ALLOWED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешение на работу с сигналами данной запущенной программы",
            "en": "The permission to modify the Signals for the given executed program"
        }
    },
    "MQL_TESTER": {
        "group": 20,
        "label": "MQL_TESTER",
        "body": "MQL_TESTER",
        "code": [
            {
                "label": "MQL_TESTER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак работы запущенной программы в тестере",
            "en": "The flag, that indicates the tester process"
        }
    },
    "MQL_TRADE_ALLOWED": {
        "group": 20,
        "label": "MQL_TRADE_ALLOWED",
        "body": "MQL_TRADE_ALLOWED",
        "code": [
            {
                "label": "MQL_TRADE_ALLOWED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешение на торговлю для данной запущенной программы",
            "en": "The permission to trade for the given executed program"
        }
    },
    "MQL_VISUAL_MODE": {
        "group": 20,
        "label": "MQL_VISUAL_MODE",
        "body": "MQL_VISUAL_MODE",
        "code": [
            {
                "label": "MQL_VISUAL_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак работы запущенной программы в визуальном режиме тестирования",
            "en": "The flag, that indicates the visual tester process"
        }
    },
    "NULL": {
        "group": 20,
        "label": "NULL",
        "body": "NULL",
        "code": [
            {
                "label": "NULL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ноль любого типа",
            "en": "Zero for any types"
        }
    },
    "OBJ_ALL_PERIODS": {
        "group": 20,
        "label": "OBJ_ALL_PERIODS",
        "body": "OBJ_ALL_PERIODS",
        "code": [
            {
                "label": "OBJ_ALL_PERIODS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на всех таймфреймах",
            "en": "The object is drawn in all timeframes"
        }
    },
    "OBJ_ARROW": {
        "group": 20,
        "label": "OBJ_ARROW",
        "body": "OBJ_ARROW",
        "code": [
            {
                "label": "OBJ_ARROW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Стрелка\"",
            "en": "Arrow"
        }
    },
    "OBJ_ARROW_BUY": {
        "group": 20,
        "label": "OBJ_ARROW_BUY",
        "body": "OBJ_ARROW_BUY",
        "code": [
            {
                "label": "OBJ_ARROW_BUY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Знак \"Buy\"",
            "en": "Buy Sign"
        }
    },
    "OBJ_ARROW_CHECK": {
        "group": 20,
        "label": "OBJ_ARROW_CHECK",
        "body": "OBJ_ARROW_CHECK",
        "code": [
            {
                "label": "OBJ_ARROW_CHECK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Знак \"Птичка\" (галка)",
            "en": "Check Sign"
        }
    },
    "OBJ_ARROW_DOWN": {
        "group": 20,
        "label": "OBJ_ARROW_DOWN",
        "body": "OBJ_ARROW_DOWN",
        "code": [
            {
                "label": "OBJ_ARROW_DOWN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Знак \"Стрелка вниз\"",
            "en": "Arrow Down"
        }
    },
    "OBJ_ARROW_LEFT_PRICE": {
        "group": 20,
        "label": "OBJ_ARROW_LEFT_PRICE",
        "body": "OBJ_ARROW_LEFT_PRICE",
        "code": [
            {
                "label": "OBJ_ARROW_LEFT_PRICE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Левая ценовая метка",
            "en": "Left Price Label"
        }
    },
    "OBJ_ARROW_RIGHT_PRICE": {
        "group": 20,
        "label": "OBJ_ARROW_RIGHT_PRICE",
        "body": "OBJ_ARROW_RIGHT_PRICE",
        "code": [
            {
                "label": "OBJ_ARROW_RIGHT_PRICE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Правая ценовая метка",
            "en": "Right Price Label"
        }
    },
    "OBJ_ARROW_SELL": {
        "group": 20,
        "label": "OBJ_ARROW_SELL",
        "body": "OBJ_ARROW_SELL",
        "code": [
            {
                "label": "OBJ_ARROW_SELL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Знак \"Sell\"",
            "en": "Sell Sign"
        }
    },
    "OBJ_ARROW_STOP": {
        "group": 20,
        "label": "OBJ_ARROW_STOP",
        "body": "OBJ_ARROW_STOP",
        "code": [
            {
                "label": "OBJ_ARROW_STOP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Знак \"Стоп\"",
            "en": "Stop Sign"
        }
    },
    "OBJ_ARROW_THUMB_DOWN": {
        "group": 20,
        "label": "OBJ_ARROW_THUMB_DOWN",
        "body": "OBJ_ARROW_THUMB_DOWN",
        "code": [
            {
                "label": "OBJ_ARROW_THUMB_DOWN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Знак \"Плохо\" (большой палец вниз)",
            "en": "Thumbs Down"
        }
    },
    "OBJ_ARROW_THUMB_UP": {
        "group": 20,
        "label": "OBJ_ARROW_THUMB_UP",
        "body": "OBJ_ARROW_THUMB_UP",
        "code": [
            {
                "label": "OBJ_ARROW_THUMB_UP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Знак \"Хорошо\" (большой палец вверх)",
            "en": "Thumbs Up"
        }
    },
    "OBJ_ARROW_UP": {
        "group": 20,
        "label": "OBJ_ARROW_UP",
        "body": "OBJ_ARROW_UP",
        "code": [
            {
                "label": "OBJ_ARROW_UP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Знак \"Стрелка вверх\"",
            "en": "Arrow Up"
        }
    },
    "OBJ_ARROWED_LINE": {
        "group": 20,
        "label": "OBJ_ARROWED_LINE",
        "body": "OBJ_ARROWED_LINE",
        "code": [
            {
                "label": "OBJ_ARROWED_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Линия со стрелкой\"",
            "en": "Arrowed Line"
        }
    },
    "OBJ_BITMAP": {
        "group": 20,
        "label": "OBJ_BITMAP",
        "body": "OBJ_BITMAP",
        "code": [
            {
                "label": "OBJ_BITMAP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Рисунок\"",
            "en": "Bitmap"
        }
    },
    "OBJ_BITMAP_LABEL": {
        "group": 20,
        "label": "OBJ_BITMAP_LABEL",
        "body": "OBJ_BITMAP_LABEL",
        "code": [
            {
                "label": "OBJ_BITMAP_LABEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Графическая метка\"",
            "en": "Bitmap Label"
        }
    },
    "OBJ_BUTTON": {
        "group": 20,
        "label": "OBJ_BUTTON",
        "body": "OBJ_BUTTON",
        "code": [
            {
                "label": "OBJ_BUTTON",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Кнопка\"",
            "en": "Button"
        }
    },
    "OBJ_CHANNEL": {
        "group": 20,
        "label": "OBJ_CHANNEL",
        "body": "OBJ_CHANNEL",
        "code": [
            {
                "label": "OBJ_CHANNEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Равноудаленный канал",
            "en": "Equidistant Channel"
        }
    },
    "OBJ_CHART": {
        "group": 20,
        "label": "OBJ_CHART",
        "body": "OBJ_CHART",
        "code": [
            {
                "label": "OBJ_CHART",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"График\"",
            "en": "Chart"
        }
    },
    "OBJ_CYCLES": {
        "group": 20,
        "label": "OBJ_CYCLES",
        "body": "OBJ_CYCLES",
        "code": [
            {
                "label": "OBJ_CYCLES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Циклические линии",
            "en": "Cycle Lines"
        }
    },
    "OBJ_EDIT": {
        "group": 20,
        "label": "OBJ_EDIT",
        "body": "OBJ_EDIT",
        "code": [
            {
                "label": "OBJ_EDIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Поле ввода\"",
            "en": "Edit"
        }
    },
    "OBJ_ELLIOTWAVE3": {
        "group": 20,
        "label": "OBJ_ELLIOTWAVE3",
        "body": "OBJ_ELLIOTWAVE3",
        "code": [
            {
                "label": "OBJ_ELLIOTWAVE3",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "3-волновка Эллиота",
            "en": "Elliott Correction Wave"
        }
    },
    "OBJ_ELLIOTWAVE5": {
        "group": 20,
        "label": "OBJ_ELLIOTWAVE5",
        "body": "OBJ_ELLIOTWAVE5",
        "code": [
            {
                "label": "OBJ_ELLIOTWAVE5",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "5-волновка Эллиота",
            "en": "Elliott Motive Wave"
        }
    },
    "OBJ_ELLIPSE": {
        "group": 20,
        "label": "OBJ_ELLIPSE",
        "body": "OBJ_ELLIPSE",
        "code": [
            {
                "label": "OBJ_ELLIPSE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Эллипс",
            "en": "Ellipse"
        }
    },
    "OBJ_EVENT": {
        "group": 20,
        "label": "OBJ_EVENT",
        "body": "OBJ_EVENT",
        "code": [
            {
                "label": "OBJ_EVENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Событие\", соответствующий событию в экономическом календаре",
            "en": "The \"Event\" object corresponding to an event in the economic calendar"
        }
    },
    "OBJ_EXPANSION": {
        "group": 20,
        "label": "OBJ_EXPANSION",
        "body": "OBJ_EXPANSION",
        "code": [
            {
                "label": "OBJ_EXPANSION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Расширение Фибоначчи",
            "en": "Fibonacci Expansion"
        }
    },
    "OBJ_FIBO": {
        "group": 20,
        "label": "OBJ_FIBO",
        "body": "OBJ_FIBO",
        "code": [
            {
                "label": "OBJ_FIBO",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровни Фибоначчи",
            "en": "Fibonacci Retracement"
        }
    },
    "OBJ_FIBOARC": {
        "group": 20,
        "label": "OBJ_FIBOARC",
        "body": "OBJ_FIBOARC",
        "code": [
            {
                "label": "OBJ_FIBOARC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дуги Фибоначчи",
            "en": "Fibonacci Arcs"
        }
    },
    "OBJ_FIBOCHANNEL": {
        "group": 20,
        "label": "OBJ_FIBOCHANNEL",
        "body": "OBJ_FIBOCHANNEL",
        "code": [
            {
                "label": "OBJ_FIBOCHANNEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Канал Фибоначчи",
            "en": "Fibonacci Channel"
        }
    },
    "OBJ_FIBOFAN": {
        "group": 20,
        "label": "OBJ_FIBOFAN",
        "body": "OBJ_FIBOFAN",
        "code": [
            {
                "label": "OBJ_FIBOFAN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Веер Фибоначчи",
            "en": "Fibonacci Fan"
        }
    },
    "OBJ_FIBOTIMES": {
        "group": 20,
        "label": "OBJ_FIBOTIMES",
        "body": "OBJ_FIBOTIMES",
        "code": [
            {
                "label": "OBJ_FIBOTIMES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Временные зоны Фибоначчи",
            "en": "Fibonacci Time Zones"
        }
    },
    "OBJ_GANNFAN": {
        "group": 20,
        "label": "OBJ_GANNFAN",
        "body": "OBJ_GANNFAN",
        "code": [
            {
                "label": "OBJ_GANNFAN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Веер Ганна",
            "en": "Gann Fan"
        }
    },
    "OBJ_GANNGRID": {
        "group": 20,
        "label": "OBJ_GANNGRID",
        "body": "OBJ_GANNGRID",
        "code": [
            {
                "label": "OBJ_GANNGRID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Сетка Ганна",
            "en": "Gann Grid"
        }
    },
    "OBJ_GANNLINE": {
        "group": 20,
        "label": "OBJ_GANNLINE",
        "body": "OBJ_GANNLINE",
        "code": [
            {
                "label": "OBJ_GANNLINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия Ганна",
            "en": "Gann Line"
        }
    },
    "OBJ_HLINE": {
        "group": 20,
        "label": "OBJ_HLINE",
        "body": "OBJ_HLINE",
        "code": [
            {
                "label": "OBJ_HLINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Горизонтальная линия",
            "en": "Horizontal Line"
        }
    },
    "OBJ_LABEL": {
        "group": 20,
        "label": "OBJ_LABEL",
        "body": "OBJ_LABEL",
        "code": [
            {
                "label": "OBJ_LABEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Текстовая метка\"",
            "en": "Label"
        }
    },
    "OBJ_NO_PERIODS": {
        "group": 20,
        "label": "OBJ_NO_PERIODS",
        "body": "OBJ_NO_PERIODS",
        "code": [
            {
                "label": "OBJ_NO_PERIODS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект не показывается ни на одном таймфрейме",
            "en": "The object is not drawn in all timeframes"
        }
    },
    "OBJ_PERIOD_D1": {
        "group": 20,
        "label": "OBJ_PERIOD_D1",
        "body": "OBJ_PERIOD_D1",
        "code": [
            {
                "label": "OBJ_PERIOD_D1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на дневных графиках",
            "en": "The object is drawn in day charts"
        }
    },
    "OBJ_PERIOD_H1": {
        "group": 20,
        "label": "OBJ_PERIOD_H1",
        "body": "OBJ_PERIOD_H1",
        "code": [
            {
                "label": "OBJ_PERIOD_H1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 1-часовых графиках",
            "en": "The object is drawn in 1-hour chart"
        }
    },
    "OBJ_PERIOD_H12": {
        "group": 20,
        "label": "OBJ_PERIOD_H12",
        "body": "OBJ_PERIOD_H12",
        "code": [
            {
                "label": "OBJ_PERIOD_H12",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 12-часовых графиках",
            "en": "The object is drawn in 12-hour chart"
        }
    },
    "OBJ_PERIOD_H2": {
        "group": 20,
        "label": "OBJ_PERIOD_H2",
        "body": "OBJ_PERIOD_H2",
        "code": [
            {
                "label": "OBJ_PERIOD_H2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 2-часовых графиках",
            "en": "The object is drawn in 2-hour chart"
        }
    },
    "OBJ_PERIOD_H3": {
        "group": 20,
        "label": "OBJ_PERIOD_H3",
        "body": "OBJ_PERIOD_H3",
        "code": [
            {
                "label": "OBJ_PERIOD_H3",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 3-часовых графиках",
            "en": "The object is drawn in 3-hour chart"
        }
    },
    "OBJ_PERIOD_H4": {
        "group": 20,
        "label": "OBJ_PERIOD_H4",
        "body": "OBJ_PERIOD_H4",
        "code": [
            {
                "label": "OBJ_PERIOD_H4",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 4-часовых графиках",
            "en": "The object is drawn in 4-hour chart"
        }
    },
    "OBJ_PERIOD_H6": {
        "group": 20,
        "label": "OBJ_PERIOD_H6",
        "body": "OBJ_PERIOD_H6",
        "code": [
            {
                "label": "OBJ_PERIOD_H6",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 6-часовых графиках",
            "en": "The object is drawn in 6-hour chart"
        }
    },
    "OBJ_PERIOD_H8": {
        "group": 20,
        "label": "OBJ_PERIOD_H8",
        "body": "OBJ_PERIOD_H8",
        "code": [
            {
                "label": "OBJ_PERIOD_H8",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 8-часовых графиках",
            "en": "The object is drawn in 8-hour chart"
        }
    },
    "OBJ_PERIOD_M1": {
        "group": 20,
        "label": "OBJ_PERIOD_M1",
        "body": "OBJ_PERIOD_M1",
        "code": [
            {
                "label": "OBJ_PERIOD_M1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 1-минутных графиках",
            "en": "The object is drawn in 1-minute chart"
        }
    },
    "OBJ_PERIOD_M10": {
        "group": 20,
        "label": "OBJ_PERIOD_M10",
        "body": "OBJ_PERIOD_M10",
        "code": [
            {
                "label": "OBJ_PERIOD_M10",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 10-минутных графиках",
            "en": "The object is drawn in 10-minute chart"
        }
    },
    "OBJ_PERIOD_M12": {
        "group": 20,
        "label": "OBJ_PERIOD_M12",
        "body": "OBJ_PERIOD_M12",
        "code": [
            {
                "label": "OBJ_PERIOD_M12",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 12-минутных графиках",
            "en": "The object is drawn in 12-minute chart"
        }
    },
    "OBJ_PERIOD_M15": {
        "group": 20,
        "label": "OBJ_PERIOD_M15",
        "body": "OBJ_PERIOD_M15",
        "code": [
            {
                "label": "OBJ_PERIOD_M15",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 15-минутных графиках",
            "en": "The object is drawn in 15-minute chart"
        }
    },
    "OBJ_PERIOD_M2": {
        "group": 20,
        "label": "OBJ_PERIOD_M2",
        "body": "OBJ_PERIOD_M2",
        "code": [
            {
                "label": "OBJ_PERIOD_M2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 2-минутных графиках",
            "en": "The object is drawn in 2-minute chart"
        }
    },
    "OBJ_PERIOD_M20": {
        "group": 20,
        "label": "OBJ_PERIOD_M20",
        "body": "OBJ_PERIOD_M20",
        "code": [
            {
                "label": "OBJ_PERIOD_M20",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 20-минутных графиках",
            "en": "The object is drawn in 20-minute chart"
        }
    },
    "OBJ_PERIOD_M3": {
        "group": 20,
        "label": "OBJ_PERIOD_M3",
        "body": "OBJ_PERIOD_M3",
        "code": [
            {
                "label": "OBJ_PERIOD_M3",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 3-минутных графиках",
            "en": "The object is drawn in 3-minute chart"
        }
    },
    "OBJ_PERIOD_M30": {
        "group": 20,
        "label": "OBJ_PERIOD_M30",
        "body": "OBJ_PERIOD_M30",
        "code": [
            {
                "label": "OBJ_PERIOD_M30",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 30-минутных графиках",
            "en": "The object is drawn in 30-minute chart"
        }
    },
    "OBJ_PERIOD_M4": {
        "group": 20,
        "label": "OBJ_PERIOD_M4",
        "body": "OBJ_PERIOD_M4",
        "code": [
            {
                "label": "OBJ_PERIOD_M4",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 4-минутных графиках",
            "en": "The object is drawn in 4-minute chart"
        }
    },
    "OBJ_PERIOD_M5": {
        "group": 20,
        "label": "OBJ_PERIOD_M5",
        "body": "OBJ_PERIOD_M5",
        "code": [
            {
                "label": "OBJ_PERIOD_M5",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 5-минутных графиках",
            "en": "The object is drawn in 5-minute chart"
        }
    },
    "OBJ_PERIOD_M6": {
        "group": 20,
        "label": "OBJ_PERIOD_M6",
        "body": "OBJ_PERIOD_M6",
        "code": [
            {
                "label": "OBJ_PERIOD_M6",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на 6-минутных графиках",
            "en": "The object is drawn in 6-minute chart"
        }
    },
    "OBJ_PERIOD_MN1": {
        "group": 20,
        "label": "OBJ_PERIOD_MN1",
        "body": "OBJ_PERIOD_MN1",
        "code": [
            {
                "label": "OBJ_PERIOD_MN1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на месячных графиках",
            "en": "The object is drawn in month charts"
        }
    },
    "OBJ_PERIOD_W1": {
        "group": 20,
        "label": "OBJ_PERIOD_W1",
        "body": "OBJ_PERIOD_W1",
        "code": [
            {
                "label": "OBJ_PERIOD_W1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект рисуется на недельных графиках",
            "en": "The object is drawn in week charts"
        }
    },
    "OBJ_PITCHFORK": {
        "group": 20,
        "label": "OBJ_PITCHFORK",
        "body": "OBJ_PITCHFORK",
        "code": [
            {
                "label": "OBJ_PITCHFORK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Вилы Эндрюса",
            "en": "Andrews’ Pitchfork"
        }
    },
    "OBJ_RECTANGLE": {
        "group": 20,
        "label": "OBJ_RECTANGLE",
        "body": "OBJ_RECTANGLE",
        "code": [
            {
                "label": "OBJ_RECTANGLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Прямоугольник",
            "en": "Rectangle"
        }
    },
    "OBJ_RECTANGLE_LABEL": {
        "group": 20,
        "label": "OBJ_RECTANGLE_LABEL",
        "body": "OBJ_RECTANGLE_LABEL",
        "code": [
            {
                "label": "OBJ_RECTANGLE_LABEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Прямоугольная метка\"для создания и оформления пользовательского графического интерфейса.",
            "en": "The \"Rectangle label\" object for creating and designing the custom graphical interface."
        }
    },
    "OBJ_REGRESSION": {
        "group": 20,
        "label": "OBJ_REGRESSION",
        "body": "OBJ_REGRESSION",
        "code": [
            {
                "label": "OBJ_REGRESSION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Канал на линейной регрессии",
            "en": "Linear Regression Channel"
        }
    },
    "OBJ_STDDEVCHANNEL": {
        "group": 20,
        "label": "OBJ_STDDEVCHANNEL",
        "body": "OBJ_STDDEVCHANNEL",
        "code": [
            {
                "label": "OBJ_STDDEVCHANNEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Канал стандартного отклонения",
            "en": "Standard Deviation Channel"
        }
    },
    "OBJ_TEXT": {
        "group": 20,
        "label": "OBJ_TEXT",
        "body": "OBJ_TEXT",
        "code": [
            {
                "label": "OBJ_TEXT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект \"Текст\"",
            "en": "Text"
        }
    },
    "OBJ_TREND": {
        "group": 20,
        "label": "OBJ_TREND",
        "body": "OBJ_TREND",
        "code": [
            {
                "label": "OBJ_TREND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Трендовая линия",
            "en": "Trend Line"
        }
    },
    "OBJ_TRENDBYANGLE": {
        "group": 20,
        "label": "OBJ_TRENDBYANGLE",
        "body": "OBJ_TRENDBYANGLE",
        "code": [
            {
                "label": "OBJ_TRENDBYANGLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Трендовая линия по углу",
            "en": "Trend Line By Angle"
        }
    },
    "OBJ_TRIANGLE": {
        "group": 20,
        "label": "OBJ_TRIANGLE",
        "body": "OBJ_TRIANGLE",
        "code": [
            {
                "label": "OBJ_TRIANGLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Треугольник",
            "en": "Triangle"
        }
    },
    "OBJ_VLINE": {
        "group": 20,
        "label": "OBJ_VLINE",
        "body": "OBJ_VLINE",
        "code": [
            {
                "label": "OBJ_VLINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Вертикальная линия",
            "en": "Vertical Line"
        }
    },
    "OBJPROP_ALIGN": {
        "group": 20,
        "label": "OBJPROP_ALIGN",
        "body": "OBJPROP_ALIGN",
        "code": [
            {
                "label": "OBJPROP_ALIGN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Горизонтальное выравнивание текста в объекте \"Поле ввода\" (OBJ_EDIT)",
            "en": "Horizontal text alignment in the \"Edit\" object (OBJ_EDIT)"
        }
    },
    "OBJPROP_ANCHOR": {
        "group": 20,
        "label": "OBJPROP_ANCHOR",
        "body": "OBJPROP_ANCHOR",
        "code": [
            {
                "label": "OBJPROP_ANCHOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Положение точки привязки графического объекта",
            "en": "Location of the anchor point of a graphical object"
        }
    },
    "OBJPROP_ANGLE": {
        "group": 20,
        "label": "OBJPROP_ANGLE",
        "body": "OBJPROP_ANGLE",
        "code": [
            {
                "label": "OBJPROP_ANGLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Угол. Для объектов с еще не заданным углом, созданных из программы, значение равно EMPTY_VALUE",
            "en": "Angle. For the objects with no angle specified, created from a program, the value is equal to EMPTY_VALUE"
        }
    },
    "OBJPROP_ARROWCODE": {
        "group": 20,
        "label": "OBJPROP_ARROWCODE",
        "body": "OBJPROP_ARROWCODE",
        "code": [
            {
                "label": "OBJPROP_ARROWCODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Код стрелки для объекта \"Стрелка\"",
            "en": "Arrow code for the Arrow object"
        }
    },
    "OBJPROP_BACK": {
        "group": 20,
        "label": "OBJPROP_BACK",
        "body": "OBJPROP_BACK",
        "code": [
            {
                "label": "OBJPROP_BACK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объект на заднем плане",
            "en": "Object in the background"
        }
    },
    "OBJPROP_BGCOLOR": {
        "group": 20,
        "label": "OBJPROP_BGCOLOR",
        "body": "OBJPROP_BGCOLOR",
        "code": [
            {
                "label": "OBJPROP_BGCOLOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет фона для OBJ_EDIT, OBJ_BUTTON, OBJ_RECTANGLE_LABEL",
            "en": "The background color for  OBJ_EDIT, OBJ_BUTTON, OBJ_RECTANGLE_LABEL"
        }
    },
    "OBJPROP_BMPFILE": {
        "group": 20,
        "label": "OBJPROP_BMPFILE",
        "body": "OBJPROP_BMPFILE",
        "code": [
            {
                "label": "OBJPROP_BMPFILE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя BMP-файла для объекта \"Графическая метка\". Смотри также Ресурсы",
            "en": "The name of BMP-file for Bitmap Label. See also Resources"
        }
    },
    "OBJPROP_BORDER_COLOR": {
        "group": 20,
        "label": "OBJPROP_BORDER_COLOR",
        "body": "OBJPROP_BORDER_COLOR",
        "code": [
            {
                "label": "OBJPROP_BORDER_COLOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет рамки для объекта OBJ_EDIT и OBJ_BUTTON",
            "en": "Border color for the OBJ_EDIT and OBJ_BUTTON objects"
        }
    },
    "OBJPROP_BORDER_TYPE": {
        "group": 20,
        "label": "OBJPROP_BORDER_TYPE",
        "body": "OBJPROP_BORDER_TYPE",
        "code": [
            {
                "label": "OBJPROP_BORDER_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип рамки для объекта \"Прямоугольная рамка\"",
            "en": "Border type for the \"Rectangle label\" object"
        }
    },
    "OBJPROP_CHART_ID": {
        "group": 20,
        "label": "OBJPROP_CHART_ID",
        "body": "OBJPROP_CHART_ID",
        "code": [
            {
                "label": "OBJPROP_CHART_ID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Идентификатор объекта \"График\" (OBJ_CHART). Позволяет работать со свойствами этого объекта как с обычным графиком с помощью функций из раздела Операции с графиками, но есть некоторые исключения.",
            "en": "ID of the \"Chart\" object (OBJ_CHART). It allows working with the properties of this object like with a normal chart using the functions described in Chart Operations, but there some exceptions."
        }
    },
    "OBJPROP_CHART_SCALE": {
        "group": 20,
        "label": "OBJPROP_CHART_SCALE",
        "body": "OBJPROP_CHART_SCALE",
        "code": [
            {
                "label": "OBJPROP_CHART_SCALE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Масштаб для объекта \"График\"",
            "en": "The scale for the Chart object"
        }
    },
    "OBJPROP_COLOR": {
        "group": 20,
        "label": "OBJPROP_COLOR",
        "body": "OBJPROP_COLOR",
        "code": [
            {
                "label": "OBJPROP_COLOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет",
            "en": "Color"
        }
    },
    "OBJPROP_CORNER": {
        "group": 20,
        "label": "OBJPROP_CORNER",
        "body": "OBJPROP_CORNER",
        "code": [
            {
                "label": "OBJPROP_CORNER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Угол графика для привязки графического объекта",
            "en": "The corner of the chart to link a graphical object"
        }
    },
    "OBJPROP_CREATETIME": {
        "group": 20,
        "label": "OBJPROP_CREATETIME",
        "body": "OBJPROP_CREATETIME",
        "code": [
            {
                "label": "OBJPROP_CREATETIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время создания объекта",
            "en": "Time of object creation"
        }
    },
    "OBJPROP_DATE_SCALE": {
        "group": 20,
        "label": "OBJPROP_DATE_SCALE",
        "body": "OBJPROP_DATE_SCALE",
        "code": [
            {
                "label": "OBJPROP_DATE_SCALE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак отображения шкалы времени для объекта \"График\"",
            "en": "Displaying the time scale for the Chart object"
        }
    },
    "OBJPROP_DEGREE": {
        "group": 20,
        "label": "OBJPROP_DEGREE",
        "body": "OBJPROP_DEGREE",
        "code": [
            {
                "label": "OBJPROP_DEGREE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень волновой разметки Эллиота",
            "en": "Level of the Elliott Wave Marking"
        }
    },
    "OBJPROP_DEVIATION": {
        "group": 20,
        "label": "OBJPROP_DEVIATION",
        "body": "OBJPROP_DEVIATION",
        "code": [
            {
                "label": "OBJPROP_DEVIATION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отклонение для канала стандартного отклонения",
            "en": "Deviation for the Standard Deviation Channel"
        }
    },
    "OBJPROP_DIRECTION": {
        "group": 20,
        "label": "OBJPROP_DIRECTION",
        "body": "OBJPROP_DIRECTION",
        "code": [
            {
                "label": "OBJPROP_DIRECTION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тренд объекта Ганна",
            "en": "Trend of the Gann object"
        }
    },
    "OBJPROP_DRAWLINES": {
        "group": 20,
        "label": "OBJPROP_DRAWLINES",
        "body": "OBJPROP_DRAWLINES",
        "code": [
            {
                "label": "OBJPROP_DRAWLINES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение линий для волновой разметки Эллиота",
            "en": "Displaying lines for marking the Elliott Wave"
        }
    },
    "OBJPROP_ELLIPSE": {
        "group": 20,
        "label": "OBJPROP_ELLIPSE",
        "body": "OBJPROP_ELLIPSE",
        "code": [
            {
                "label": "OBJPROP_ELLIPSE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отображение полного эллипса для объекта \"Дуги Фибоначчи\" (OBJ_FIBOARC)",
            "en": "Showing the full ellipse of the Fibonacci Arc object (OBJ_FIBOARC)"
        }
    },
    "OBJPROP_FILL": {
        "group": 20,
        "label": "OBJPROP_FILL",
        "body": "OBJPROP_FILL",
        "code": [
            {
                "label": "OBJPROP_FILL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Заливка объекта цветом (для OBJ_RECTANGLE, OBJ_TRIANGLE, OBJ_ELLIPSE, OBJ_CHANNEL, OBJ_STDDEVCHANNEL, OBJ_REGRESSION)",
            "en": "Fill an object with color (for OBJ_RECTANGLE, OBJ_TRIANGLE, OBJ_ELLIPSE, OBJ_CHANNEL, OBJ_STDDEVCHANNEL, OBJ_REGRESSION)"
        }
    },
    "OBJPROP_FONT": {
        "group": 20,
        "label": "OBJPROP_FONT",
        "body": "OBJPROP_FONT",
        "code": [
            {
                "label": "OBJPROP_FONT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Шрифт",
            "en": "Font"
        }
    },
    "OBJPROP_FONTSIZE": {
        "group": 20,
        "label": "OBJPROP_FONTSIZE",
        "body": "OBJPROP_FONTSIZE",
        "code": [
            {
                "label": "OBJPROP_FONTSIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер шрифта",
            "en": "Font size"
        }
    },
    "OBJPROP_HIDDEN": {
        "group": 20,
        "label": "OBJPROP_HIDDEN",
        "body": "OBJPROP_HIDDEN",
        "code": [
            {
                "label": "OBJPROP_HIDDEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Запрет на показ имени графического объекта в списке объектов из меню терминала \"Графики\" - \"Объекты\" - \"Список объектов\". Значение true позволяет скрыть ненужный для пользователя объект из списка. По умолчанию true устанавливается для объектов, которые отображают события календаря, историю торговли, а также для созданных из MQL5-программы. Для того чтобы увидеть такие графические объекты и получить доступ к их свойствам, нужно нажать кнопку \"Все\" в окне \"Список объектов\".",
            "en": "Prohibit showing of the name of a graphical object in the list of objects from the terminal menu \"Charts\" - \"Objects\" - \"List of objects\". The true value allows to hide an object from the list. By default, true is set to the objects that display calendar events, trading history and to the objects created from MQL5 programs. To see such graphical objects and access their properties, click on the \"All\" button in the \"List of objects\" window."
        }
    },
    "OBJPROP_LEVELCOLOR": {
        "group": 20,
        "label": "OBJPROP_LEVELCOLOR",
        "body": "OBJPROP_LEVELCOLOR",
        "code": [
            {
                "label": "OBJPROP_LEVELCOLOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет линии-уровня",
            "en": "Color of the line-level"
        }
    },
    "OBJPROP_LEVELS": {
        "group": 20,
        "label": "OBJPROP_LEVELS",
        "body": "OBJPROP_LEVELS",
        "code": [
            {
                "label": "OBJPROP_LEVELS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество уровней",
            "en": "Number of levels"
        }
    },
    "OBJPROP_LEVELSTYLE": {
        "group": 20,
        "label": "OBJPROP_LEVELSTYLE",
        "body": "OBJPROP_LEVELSTYLE",
        "code": [
            {
                "label": "OBJPROP_LEVELSTYLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Стиль линии-уровня",
            "en": "Style of the line-level"
        }
    },
    "OBJPROP_LEVELTEXT": {
        "group": 20,
        "label": "OBJPROP_LEVELTEXT",
        "body": "OBJPROP_LEVELTEXT",
        "code": [
            {
                "label": "OBJPROP_LEVELTEXT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Описание уровня",
            "en": "Level description"
        }
    },
    "OBJPROP_LEVELVALUE": {
        "group": 20,
        "label": "OBJPROP_LEVELVALUE",
        "body": "OBJPROP_LEVELVALUE",
        "code": [
            {
                "label": "OBJPROP_LEVELVALUE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение уровня",
            "en": "Level value"
        }
    },
    "OBJPROP_LEVELWIDTH": {
        "group": 20,
        "label": "OBJPROP_LEVELWIDTH",
        "body": "OBJPROP_LEVELWIDTH",
        "code": [
            {
                "label": "OBJPROP_LEVELWIDTH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Толщина линии-уровня",
            "en": "Thickness of the line-level"
        }
    },
    "OBJPROP_NAME": {
        "group": 20,
        "label": "OBJPROP_NAME",
        "body": "OBJPROP_NAME",
        "code": [
            {
                "label": "OBJPROP_NAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя объекта",
            "en": "Object name"
        }
    },
    "OBJPROP_PERIOD": {
        "group": 20,
        "label": "OBJPROP_PERIOD",
        "body": "OBJPROP_PERIOD",
        "code": [
            {
                "label": "OBJPROP_PERIOD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Период для объекта \"График\"",
            "en": "Timeframe for the Chart object"
        }
    },
    "OBJPROP_PRICE": {
        "group": 20,
        "label": "OBJPROP_PRICE",
        "body": "OBJPROP_PRICE",
        "code": [
            {
                "label": "OBJPROP_PRICE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Координата цены",
            "en": "Price coordinate"
        }
    },
    "OBJPROP_PRICE_SCALE": {
        "group": 20,
        "label": "OBJPROP_PRICE_SCALE",
        "body": "OBJPROP_PRICE_SCALE",
        "code": [
            {
                "label": "OBJPROP_PRICE_SCALE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак отображения ценовой шкалы для объекта \"График\"",
            "en": "Displaying the price scale for the Chart object"
        }
    },
    "OBJPROP_RAY": {
        "group": 20,
        "label": "OBJPROP_RAY",
        "body": "OBJPROP_RAY",
        "code": [
            {
                "label": "OBJPROP_RAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Вертикальная линия продолжается на все окна графика",
            "en": "A vertical line goes through all the windows of a chart"
        }
    },
    "OBJPROP_RAY_LEFT": {
        "group": 20,
        "label": "OBJPROP_RAY_LEFT",
        "body": "OBJPROP_RAY_LEFT",
        "code": [
            {
                "label": "OBJPROP_RAY_LEFT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Луч продолжается влево",
            "en": "Ray goes to the left"
        }
    },
    "OBJPROP_RAY_RIGHT": {
        "group": 20,
        "label": "OBJPROP_RAY_RIGHT",
        "body": "OBJPROP_RAY_RIGHT",
        "code": [
            {
                "label": "OBJPROP_RAY_RIGHT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Луч продолжается вправо",
            "en": "Ray goes to the right"
        }
    },
    "OBJPROP_READONLY": {
        "group": 20,
        "label": "OBJPROP_READONLY",
        "body": "OBJPROP_READONLY",
        "code": [
            {
                "label": "OBJPROP_READONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Возможность редактирования текста в объекте Edit",
            "en": "Ability to edit text in the Edit object"
        }
    },
    "OBJPROP_SCALE": {
        "group": 20,
        "label": "OBJPROP_SCALE",
        "body": "OBJPROP_SCALE",
        "code": [
            {
                "label": "OBJPROP_SCALE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Масштаб (свойство объектов Ганна и объекта \"Дуги Фибоначчи\")",
            "en": "Scale (properties of Gann objects and Fibonacci Arcs)"
        }
    },
    "OBJPROP_SELECTABLE": {
        "group": 20,
        "label": "OBJPROP_SELECTABLE",
        "body": "OBJPROP_SELECTABLE",
        "code": [
            {
                "label": "OBJPROP_SELECTABLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Доступность объекта",
            "en": "Object availability"
        }
    },
    "OBJPROP_SELECTED": {
        "group": 20,
        "label": "OBJPROP_SELECTED",
        "body": "OBJPROP_SELECTED",
        "code": [
            {
                "label": "OBJPROP_SELECTED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выделенность объекта",
            "en": "Object is selected"
        }
    },
    "OBJPROP_STATE": {
        "group": 20,
        "label": "OBJPROP_STATE",
        "body": "OBJPROP_STATE",
        "code": [
            {
                "label": "OBJPROP_STATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Состояние кнопки (Нажата/Отжата)",
            "en": "Button state (pressed / depressed)"
        }
    },
    "OBJPROP_STYLE": {
        "group": 20,
        "label": "OBJPROP_STYLE",
        "body": "OBJPROP_STYLE",
        "code": [
            {
                "label": "OBJPROP_STYLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Стиль",
            "en": "Style"
        }
    },
    "OBJPROP_SYMBOL": {
        "group": 20,
        "label": "OBJPROP_SYMBOL",
        "body": "OBJPROP_SYMBOL",
        "code": [
            {
                "label": "OBJPROP_SYMBOL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Символ для объекта \"График\"",
            "en": "Symbol for the Chart object"
        }
    },
    "OBJPROP_TEXT": {
        "group": 20,
        "label": "OBJPROP_TEXT",
        "body": "OBJPROP_TEXT",
        "code": [
            {
                "label": "OBJPROP_TEXT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Описание объекта (текст, содержащийся в объекте)",
            "en": "Description of the object (the text contained in the object)"
        }
    },
    "OBJPROP_TIME": {
        "group": 20,
        "label": "OBJPROP_TIME",
        "body": "OBJPROP_TIME",
        "code": [
            {
                "label": "OBJPROP_TIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Координата времени",
            "en": "Time coordinate"
        }
    },
    "OBJPROP_TIMEFRAMES": {
        "group": 20,
        "label": "OBJPROP_TIMEFRAMES",
        "body": "OBJPROP_TIMEFRAMES",
        "code": [
            {
                "label": "OBJPROP_TIMEFRAMES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Видимость объекта на таймфреймах",
            "en": "Visibility of an object at timeframes"
        }
    },
    "OBJPROP_TOOLTIP": {
        "group": 20,
        "label": "OBJPROP_TOOLTIP",
        "body": "OBJPROP_TOOLTIP",
        "code": [
            {
                "label": "OBJPROP_TOOLTIP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текст всплывающей подсказки. Если свойство не задано, то показывается подсказка, автоматически сформированная терминалом. Можно  отключить показ подсказки, установив для нее значение \"\\n\" (перевод строки)",
            "en": "The text of a tooltip. If the property is not set, then the tooltip generated automatically by the terminal is shown. A tooltip can be disabled by setting the \"\\n\" (line feed) value to it"
        }
    },
    "OBJPROP_TYPE": {
        "group": 20,
        "label": "OBJPROP_TYPE",
        "body": "OBJPROP_TYPE",
        "code": [
            {
                "label": "OBJPROP_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип объекта",
            "en": "Object type"
        }
    },
    "OBJPROP_WIDTH": {
        "group": 20,
        "label": "OBJPROP_WIDTH",
        "body": "OBJPROP_WIDTH",
        "code": [
            {
                "label": "OBJPROP_WIDTH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Толщина линии",
            "en": "Line thickness"
        }
    },
    "OBJPROP_XDISTANCE": {
        "group": 20,
        "label": "OBJPROP_XDISTANCE",
        "body": "OBJPROP_XDISTANCE",
        "code": [
            {
                "label": "OBJPROP_XDISTANCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дистанция в пикселях по оси X от угла привязки (см. примечание)",
            "en": "The distance in pixels along the X axis from the binding corner (see note)"
        }
    },
    "OBJPROP_XOFFSET": {
        "group": 20,
        "label": "OBJPROP_XOFFSET",
        "body": "OBJPROP_XOFFSET",
        "code": [
            {
                "label": "OBJPROP_XOFFSET",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "X-координата левого верхнего угла прямоугольной области видимости  в графических объектах \"Графическая метка\" и \"Рисунок\" (OBJ_BITMAP_LABEL и OBJ_BITMAP). Значение задается в пикселях относительного верхнего левого угла исходного изображения.",
            "en": "The X coordinate of the upper left corner of the rectangular visible area in the graphical objects \"Bitmap Label\" and \"Bitmap\" (OBJ_BITMAP_LABEL and OBJ_BITMAP). The value is set in pixels relative to the upper left corner of the original image."
        }
    },
    "OBJPROP_XSIZE": {
        "group": 20,
        "label": "OBJPROP_XSIZE",
        "body": "OBJPROP_XSIZE",
        "code": [
            {
                "label": "OBJPROP_XSIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ширина объекта по оси X в пикселях. Задается для объектов OBJ_LABEL (read only), OBJ_BUTTON, OBJ_CHART, OBJ_BITMAP, OBJ_BITMAP_LABEL, OBJ_EDIT, OBJ_RECTANGLE_LABEL.",
            "en": "The object's width along the X axis in pixels. Specified for  OBJ_LABEL (read only), OBJ_BUTTON, OBJ_CHART, OBJ_BITMAP, OBJ_BITMAP_LABEL, OBJ_EDIT, OBJ_RECTANGLE_LABEL objects."
        }
    },
    "OBJPROP_YDISTANCE": {
        "group": 20,
        "label": "OBJPROP_YDISTANCE",
        "body": "OBJPROP_YDISTANCE",
        "code": [
            {
                "label": "OBJPROP_YDISTANCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дистанция в пикселях по оси Y от угла привязки (см. примечание)",
            "en": "The distance in pixels along the Y axis from the binding corner (see note)"
        }
    },
    "OBJPROP_YOFFSET": {
        "group": 20,
        "label": "OBJPROP_YOFFSET",
        "body": "OBJPROP_YOFFSET",
        "code": [
            {
                "label": "OBJPROP_YOFFSET",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Y-координата левого верхнего угла прямоугольной области видимости  в графических объектах \"Графическая метка\" и \"Рисунок\" (OBJ_BITMAP_LABEL и OBJ_BITMAP). Значение задается в пикселях относительного верхнего левого угла исходного изображения.",
            "en": "The Y coordinate of the upper left corner of the rectangular visible area in the graphical objects \"Bitmap Label\" and \"Bitmap\" (OBJ_BITMAP_LABEL and OBJ_BITMAP). The value is set in pixels relative to the upper left corner of the original image."
        }
    },
    "OBJPROP_YSIZE": {
        "group": 20,
        "label": "OBJPROP_YSIZE",
        "body": "OBJPROP_YSIZE",
        "code": [
            {
                "label": "OBJPROP_YSIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Высота объекта по оси Y в пикселях. Задается для объектов OBJ_LABEL (read only), OBJ_BUTTON, OBJ_CHART, OBJ_BITMAP, OBJ_BITMAP_LABEL, OBJ_EDIT, OBJ_RECTANGLE_LABEL.",
            "en": "The object's height along the Y axis in pixels. Specified for  OBJ_LABEL (read only), OBJ_BUTTON, OBJ_CHART, OBJ_BITMAP, OBJ_BITMAP_LABEL, OBJ_EDIT, OBJ_RECTANGLE_LABEL objects."
        }
    },
    "OBJPROP_ZORDER": {
        "group": 20,
        "label": "OBJPROP_ZORDER",
        "body": "OBJPROP_ZORDER",
        "code": [
            {
                "label": "OBJPROP_ZORDER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Приоритет графического объекта на получение события нажатия мышки на графике (CHARTEVENT_CLICK). По умолчанию при создании значение выставляется равным нулю, но при необходимости можно повысить приоритет. При наложении объектов друг на друга событие CHARTEVENT_CLICK получит только один объект, чей приоритет выше остальных.",
            "en": "Priority of a graphical object for receiving events of clicking on a chart (CHARTEVENT_CLICK). The default zero value is set when creating an object; the priority can be increased if necessary. When applying objects one over another, only one of them with the highest priority will receive the CHARTEVENT_CLICK event."
        }
    },
    "ORDER_COMMENT": {
        "group": 20,
        "label": "ORDER_COMMENT",
        "body": "ORDER_COMMENT",
        "code": [
            {
                "label": "ORDER_COMMENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Комментарий",
            "en": "Order comment"
        }
    },
    "ORDER_FILLING_FOK": {
        "group": 20,
        "label": "ORDER_FILLING_FOK",
        "body": "ORDER_FILLING_FOK",
        "code": [
            {
                "label": "ORDER_FILLING_FOK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Данная политика исполнения означает, что ордер может быть исполнен исключительно в указанном объеме. Если на рынке в данный момент не присутствует достаточного объема финансового инструмента, то ордер не будет исполнен. Необходимый объем может быть составлен из нескольких предложений, доступных в данный момент на рынке.",
            "en": "This filling policy means that an order can be filled only in the specified amount. If the necessary amount of a financial instrument is currently unavailable in the market, the order will not be executed. The required volume can be filled using several offers available on the market at the moment."
        }
    },
    "ORDER_FILLING_IOC": {
        "group": 20,
        "label": "ORDER_FILLING_IOC",
        "body": "ORDER_FILLING_IOC",
        "code": [
            {
                "label": "ORDER_FILLING_IOC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Означает согласие совершить сделку по максимально доступному на рынке объему в пределах указанного в ордере. В случае невозможности полного исполнения ордер будет исполнен на доступный объем, а неисполненный объем ордера будет отменен.",
            "en": "This mode means that a trader agrees to execute a deal with the volume maximally available in the market within that indicated in the order. In case the the entire volume of an order cannot be filled, the available volume of it will be filled, and the remaining volume will be canceled."
        }
    },
    "ORDER_FILLING_RETURN": {
        "group": 20,
        "label": "ORDER_FILLING_RETURN",
        "body": "ORDER_FILLING_RETURN",
        "code": [
            {
                "label": "ORDER_FILLING_RETURN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Данный режим используется для рыночных (ORDER_TYPE_BUY и ORDER_TYPE_SELL), лимитных и стоп-лимитных ордеров (ORDER_TYPE_BUY_LIMIT, ORDER_TYPE_SELL_LIMIT, ORDER_TYPE_BUY_STOP_LIMIT и ORDER_TYPE_SELL_STOP_LIMIT) и только в режимах \"Исполнение по рынку\" и \"Биржевое исполнение\". В случае частичного исполнения рыночный или лимитный ордер с остаточным объемом не снимается, а продолжает действовать.\nДля ордеров ORDER_TYPE_BUY_STOP_LIMIT и ORDER_TYPE_SELL_STOP_LIMIT при активации будет создан соответствующий лимитный ордер ORDER_TYPE_BUY_LIMIT/ORDER_TYPE_SELL_LIMIT с типом исполнения ORDER_FILLING_RETURN.",
            "en": "This policy is used only for market orders (ORDER_TYPE_BUY and ORDER_TYPE_SELL), limit and stop limit orders (ORDER_TYPE_BUY_LIMIT, ORDER_TYPE_SELL_LIMIT, ORDER_TYPE_BUY_STOP_LIMIT and ORDER_TYPE_SELL_STOP_LIMIT ) and only for the symbols with Market or Exchange execution. In case of partial filling a market or limit order with remaining volume is not canceled but processed further.\nFor the activation of the ORDER_TYPE_BUY_STOP_LIMIT and ORDER_TYPE_SELL_STOP_LIMIT orders, a corresponding limit order ORDER_TYPE_BUY_LIMIT/ORDER_TYPE_SELL_LIMIT with the ORDER_FILLING_RETURN execution type is created."
        }
    },
    "ORDER_MAGIC": {
        "group": 20,
        "label": "ORDER_MAGIC",
        "body": "ORDER_MAGIC",
        "code": [
            {
                "label": "ORDER_MAGIC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Идентификатор эксперта выставившего ордер (предназначен для того, чтобы каждый эксперт выставлял свой собственный уникальный номер)",
            "en": "ID of an Expert Advisor that has placed the order (designed to ensure that each Expert Advisor places its own unique number)"
        }
    },
    "ORDER_POSITION_ID": {
        "group": 20,
        "label": "ORDER_POSITION_ID",
        "body": "ORDER_POSITION_ID",
        "code": [
            {
                "label": "ORDER_POSITION_ID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Идентификатор позиции, который ставится на ордере при его исполнении. Каждый исполненный ордер порождает сделку, которая открывает новую или изменяет уже существующую позицию. Идентификатор этой позиции и устанавливается исполненному ордеру в этот момент.",
            "en": "Position identifier that is set to an order as soon as it is executed. Each executed order results in a deal that opens or modifies an already existing position. The identifier of exactly this position is set to the executed order at this moment."
        }
    },
    "ORDER_PRICE_CURRENT": {
        "group": 20,
        "label": "ORDER_PRICE_CURRENT",
        "body": "ORDER_PRICE_CURRENT",
        "code": [
            {
                "label": "ORDER_PRICE_CURRENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущая цена по символу ордера",
            "en": "The current price of the order symbol"
        }
    },
    "ORDER_PRICE_OPEN": {
        "group": 20,
        "label": "ORDER_PRICE_OPEN",
        "body": "ORDER_PRICE_OPEN",
        "code": [
            {
                "label": "ORDER_PRICE_OPEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена, указанная в ордере",
            "en": "Price specified in the order"
        }
    },
    "ORDER_PRICE_STOPLIMIT": {
        "group": 20,
        "label": "ORDER_PRICE_STOPLIMIT",
        "body": "ORDER_PRICE_STOPLIMIT",
        "code": [
            {
                "label": "ORDER_PRICE_STOPLIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена постановки Limit ордера при срабатывании StopLimit ордера",
            "en": "The Limit order price for the StopLimit order"
        }
    },
    "ORDER_SL": {
        "group": 20,
        "label": "ORDER_SL",
        "body": "ORDER_SL",
        "code": [
            {
                "label": "ORDER_SL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень Stop Loss",
            "en": "Stop Loss value"
        }
    },
    "ORDER_STATE": {
        "group": 20,
        "label": "ORDER_STATE",
        "body": "ORDER_STATE",
        "code": [
            {
                "label": "ORDER_STATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Статус ордера",
            "en": "Order state"
        }
    },
    "ORDER_STATE_CANCELED": {
        "group": 20,
        "label": "ORDER_STATE_CANCELED",
        "body": "ORDER_STATE_CANCELED",
        "code": [
            {
                "label": "ORDER_STATE_CANCELED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер снят клиентом",
            "en": "Order canceled by client"
        }
    },
    "ORDER_STATE_EXPIRED": {
        "group": 20,
        "label": "ORDER_STATE_EXPIRED",
        "body": "ORDER_STATE_EXPIRED",
        "code": [
            {
                "label": "ORDER_STATE_EXPIRED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер снят по истечении срока его действия",
            "en": "Order expired"
        }
    },
    "ORDER_STATE_FILLED": {
        "group": 20,
        "label": "ORDER_STATE_FILLED",
        "body": "ORDER_STATE_FILLED",
        "code": [
            {
                "label": "ORDER_STATE_FILLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер выполнен полностью",
            "en": "Order fully executed"
        }
    },
    "ORDER_STATE_PARTIAL": {
        "group": 20,
        "label": "ORDER_STATE_PARTIAL",
        "body": "ORDER_STATE_PARTIAL",
        "code": [
            {
                "label": "ORDER_STATE_PARTIAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер выполнен частично",
            "en": "Order partially executed"
        }
    },
    "ORDER_STATE_PLACED": {
        "group": 20,
        "label": "ORDER_STATE_PLACED",
        "body": "ORDER_STATE_PLACED",
        "code": [
            {
                "label": "ORDER_STATE_PLACED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер принят",
            "en": "Order accepted"
        }
    },
    "ORDER_STATE_REJECTED": {
        "group": 20,
        "label": "ORDER_STATE_REJECTED",
        "body": "ORDER_STATE_REJECTED",
        "code": [
            {
                "label": "ORDER_STATE_REJECTED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер отклонен",
            "en": "Order rejected"
        }
    },
    "ORDER_STATE_REQUEST_ADD": {
        "group": 20,
        "label": "ORDER_STATE_REQUEST_ADD",
        "body": "ORDER_STATE_REQUEST_ADD",
        "code": [
            {
                "label": "ORDER_STATE_REQUEST_ADD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер в состоянии регистрации (выставление в торговую систему)",
            "en": "Order is being registered (placing to the trading system)"
        }
    },
    "ORDER_STATE_REQUEST_CANCEL": {
        "group": 20,
        "label": "ORDER_STATE_REQUEST_CANCEL",
        "body": "ORDER_STATE_REQUEST_CANCEL",
        "code": [
            {
                "label": "ORDER_STATE_REQUEST_CANCEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер в состоянии удаления (удаление из торговой системы)",
            "en": "Order is being deleted (deleting from the trading system)"
        }
    },
    "ORDER_STATE_REQUEST_MODIFY": {
        "group": 20,
        "label": "ORDER_STATE_REQUEST_MODIFY",
        "body": "ORDER_STATE_REQUEST_MODIFY",
        "code": [
            {
                "label": "ORDER_STATE_REQUEST_MODIFY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер в состоянии модификации (изменение его параметров)",
            "en": "Order is being modified (changing its parameters)"
        }
    },
    "ORDER_STATE_STARTED": {
        "group": 20,
        "label": "ORDER_STATE_STARTED",
        "body": "ORDER_STATE_STARTED",
        "code": [
            {
                "label": "ORDER_STATE_STARTED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер проверен на корректность, но еще не принят брокером",
            "en": "Order checked, but not yet accepted by broker"
        }
    },
    "ORDER_SYMBOL": {
        "group": 20,
        "label": "ORDER_SYMBOL",
        "body": "ORDER_SYMBOL",
        "code": [
            {
                "label": "ORDER_SYMBOL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Символ, по которому выставлен ордер",
            "en": "Symbol of the order"
        }
    },
    "ORDER_TIME_DAY": {
        "group": 20,
        "label": "ORDER_TIME_DAY",
        "body": "ORDER_TIME_DAY",
        "code": [
            {
                "label": "ORDER_TIME_DAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер будет действовать только в течение текущего торгового дня",
            "en": "Good till current trade day order"
        }
    },
    "ORDER_TIME_DONE": {
        "group": 20,
        "label": "ORDER_TIME_DONE",
        "body": "ORDER_TIME_DONE",
        "code": [
            {
                "label": "ORDER_TIME_DONE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время исполнения или снятия ордера",
            "en": "Order execution or cancellation time"
        }
    },
    "ORDER_TIME_DONE_MSC": {
        "group": 20,
        "label": "ORDER_TIME_DONE_MSC",
        "body": "ORDER_TIME_DONE_MSC",
        "code": [
            {
                "label": "ORDER_TIME_DONE_MSC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время исполнения/снятия ордера в миллисекундах с 01.01.1970",
            "en": "Order execution/cancellation time in milliseconds since 01.01.1970"
        }
    },
    "ORDER_TIME_EXPIRATION": {
        "group": 20,
        "label": "ORDER_TIME_EXPIRATION",
        "body": "ORDER_TIME_EXPIRATION",
        "code": [
            {
                "label": "ORDER_TIME_EXPIRATION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время истечения ордера",
            "en": "Order expiration time"
        }
    },
    "ORDER_TIME_GTC": {
        "group": 20,
        "label": "ORDER_TIME_GTC",
        "body": "ORDER_TIME_GTC",
        "code": [
            {
                "label": "ORDER_TIME_GTC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер будет находится в очереди до тех пор, пока не будет снят",
            "en": "Good till cancel order"
        }
    },
    "ORDER_TIME_SETUP": {
        "group": 20,
        "label": "ORDER_TIME_SETUP",
        "body": "ORDER_TIME_SETUP",
        "code": [
            {
                "label": "ORDER_TIME_SETUP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время постановки ордера",
            "en": "Order setup time"
        }
    },
    "ORDER_TIME_SETUP_MSC": {
        "group": 20,
        "label": "ORDER_TIME_SETUP_MSC",
        "body": "ORDER_TIME_SETUP_MSC",
        "code": [
            {
                "label": "ORDER_TIME_SETUP_MSC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время установки ордера на исполнение в миллисекундах с 01.01.1970",
            "en": "The time of placing an order for execution in milliseconds since 01.01.1970"
        }
    },
    "ORDER_TIME_SPECIFIED": {
        "group": 20,
        "label": "ORDER_TIME_SPECIFIED",
        "body": "ORDER_TIME_SPECIFIED",
        "code": [
            {
                "label": "ORDER_TIME_SPECIFIED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер будет действовать до даты истечения",
            "en": "Good till expired order"
        }
    },
    "ORDER_TIME_SPECIFIED_DAY": {
        "group": 20,
        "label": "ORDER_TIME_SPECIFIED_DAY",
        "body": "ORDER_TIME_SPECIFIED_DAY",
        "code": [
            {
                "label": "ORDER_TIME_SPECIFIED_DAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер будет действовать до 23:59:59 указанного дня. Если это время не попадает на торговую сессию, истечение наступит в ближайшее торговое время.",
            "en": "The order will be effective till 23:59:59 of the specified day. If this time is outside a trading session, the order expires in the nearest trading time."
        }
    },
    "ORDER_TP": {
        "group": 20,
        "label": "ORDER_TP",
        "body": "ORDER_TP",
        "code": [
            {
                "label": "ORDER_TP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень Take Profit",
            "en": "Take Profit value"
        }
    },
    "ORDER_TYPE": {
        "group": 20,
        "label": "ORDER_TYPE",
        "body": "ORDER_TYPE",
        "code": [
            {
                "label": "ORDER_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип ордера",
            "en": "Order type"
        }
    },
    "ORDER_TYPE_BUY": {
        "group": 20,
        "label": "ORDER_TYPE_BUY",
        "body": "ORDER_TYPE_BUY",
        "code": [
            {
                "label": "ORDER_TYPE_BUY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Рыночный ордер на покупку",
            "en": "Market Buy order"
        }
    },
    "ORDER_TYPE_BUY_LIMIT": {
        "group": 20,
        "label": "ORDER_TYPE_BUY_LIMIT",
        "body": "ORDER_TYPE_BUY_LIMIT",
        "code": [
            {
                "label": "ORDER_TYPE_BUY_LIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отложенный ордер Buy Limit",
            "en": "Buy Limit pending order"
        }
    },
    "ORDER_TYPE_BUY_STOP": {
        "group": 20,
        "label": "ORDER_TYPE_BUY_STOP",
        "body": "ORDER_TYPE_BUY_STOP",
        "code": [
            {
                "label": "ORDER_TYPE_BUY_STOP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отложенный ордер Buy Stop",
            "en": "Buy Stop pending order"
        }
    },
    "ORDER_TYPE_BUY_STOP_LIMIT": {
        "group": 20,
        "label": "ORDER_TYPE_BUY_STOP_LIMIT",
        "body": "ORDER_TYPE_BUY_STOP_LIMIT",
        "code": [
            {
                "label": "ORDER_TYPE_BUY_STOP_LIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "По достижении цены ордера выставляется отложенный ордер Buy Limit по цене StopLimit",
            "en": "Upon reaching the order price, a pending Buy Limit order is placed at the StopLimit price"
        }
    },
    "ORDER_TYPE_FILLING": {
        "group": 20,
        "label": "ORDER_TYPE_FILLING",
        "body": "ORDER_TYPE_FILLING",
        "code": [
            {
                "label": "ORDER_TYPE_FILLING",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип исполнения по остатку",
            "en": "Order filling type"
        }
    },
    "ORDER_TYPE_SELL": {
        "group": 20,
        "label": "ORDER_TYPE_SELL",
        "body": "ORDER_TYPE_SELL",
        "code": [
            {
                "label": "ORDER_TYPE_SELL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Рыночный ордер на продажу",
            "en": "Market Sell order"
        }
    },
    "ORDER_TYPE_SELL_LIMIT": {
        "group": 20,
        "label": "ORDER_TYPE_SELL_LIMIT",
        "body": "ORDER_TYPE_SELL_LIMIT",
        "code": [
            {
                "label": "ORDER_TYPE_SELL_LIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отложенный ордер Sell Limit",
            "en": "Sell Limit pending order"
        }
    },
    "ORDER_TYPE_SELL_STOP": {
        "group": 20,
        "label": "ORDER_TYPE_SELL_STOP",
        "body": "ORDER_TYPE_SELL_STOP",
        "code": [
            {
                "label": "ORDER_TYPE_SELL_STOP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отложенный ордер Sell Stop",
            "en": "Sell Stop pending order"
        }
    },
    "ORDER_TYPE_SELL_STOP_LIMIT": {
        "group": 20,
        "label": "ORDER_TYPE_SELL_STOP_LIMIT",
        "body": "ORDER_TYPE_SELL_STOP_LIMIT",
        "code": [
            {
                "label": "ORDER_TYPE_SELL_STOP_LIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "По достижении цены ордера выставляется отложенный ордер Sell Limit по цене StopLimit",
            "en": "Upon reaching the order price, a pending Sell Limit order is placed at the StopLimit price"
        }
    },
    "ORDER_TYPE_TIME": {
        "group": 20,
        "label": "ORDER_TYPE_TIME",
        "body": "ORDER_TYPE_TIME",
        "code": [
            {
                "label": "ORDER_TYPE_TIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время жизни ордера",
            "en": "Order lifetime"
        }
    },
    "ORDER_VOLUME_CURRENT": {
        "group": 20,
        "label": "ORDER_VOLUME_CURRENT",
        "body": "ORDER_VOLUME_CURRENT",
        "code": [
            {
                "label": "ORDER_VOLUME_CURRENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Невыполненный объем",
            "en": "Order current volume"
        }
    },
    "ORDER_VOLUME_INITIAL": {
        "group": 20,
        "label": "ORDER_VOLUME_INITIAL",
        "body": "ORDER_VOLUME_INITIAL",
        "code": [
            {
                "label": "ORDER_VOLUME_INITIAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Первоначальный объем при постановке ордера",
            "en": "Order initial volume"
        }
    },
    "PERIOD_CURRENT": {
        "group": 20,
        "label": "PERIOD_CURRENT",
        "body": "PERIOD_CURRENT",
        "code": [
            {
                "label": "PERIOD_CURRENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущий период",
            "en": "Current timeframe"
        }
    },
    "PERIOD_D1": {
        "group": 20,
        "label": "PERIOD_D1",
        "body": "PERIOD_D1",
        "code": [
            {
                "label": "PERIOD_D1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "1 день",
            "en": "1 day"
        }
    },
    "PERIOD_H1": {
        "group": 20,
        "label": "PERIOD_H1",
        "body": "PERIOD_H1",
        "code": [
            {
                "label": "PERIOD_H1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "1 час",
            "en": "1 hour"
        }
    },
    "PERIOD_H12": {
        "group": 20,
        "label": "PERIOD_H12",
        "body": "PERIOD_H12",
        "code": [
            {
                "label": "PERIOD_H12",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "12 часов",
            "en": "12 hours"
        }
    },
    "PERIOD_H2": {
        "group": 20,
        "label": "PERIOD_H2",
        "body": "PERIOD_H2",
        "code": [
            {
                "label": "PERIOD_H2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "2 часа",
            "en": "2 hours"
        }
    },
    "PERIOD_H3": {
        "group": 20,
        "label": "PERIOD_H3",
        "body": "PERIOD_H3",
        "code": [
            {
                "label": "PERIOD_H3",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "3 часа",
            "en": "3 hours"
        }
    },
    "PERIOD_H4": {
        "group": 20,
        "label": "PERIOD_H4",
        "body": "PERIOD_H4",
        "code": [
            {
                "label": "PERIOD_H4",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "4 часа",
            "en": "4 hours"
        }
    },
    "PERIOD_H6": {
        "group": 20,
        "label": "PERIOD_H6",
        "body": "PERIOD_H6",
        "code": [
            {
                "label": "PERIOD_H6",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "6 часов",
            "en": "6 hours"
        }
    },
    "PERIOD_H8": {
        "group": 20,
        "label": "PERIOD_H8",
        "body": "PERIOD_H8",
        "code": [
            {
                "label": "PERIOD_H8",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "8 часов",
            "en": "8 hours"
        }
    },
    "PERIOD_M1": {
        "group": 20,
        "label": "PERIOD_M1",
        "body": "PERIOD_M1",
        "code": [
            {
                "label": "PERIOD_M1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "1 минута",
            "en": "1 minute"
        }
    },
    "PERIOD_M10": {
        "group": 20,
        "label": "PERIOD_M10",
        "body": "PERIOD_M10",
        "code": [
            {
                "label": "PERIOD_M10",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "10 минут",
            "en": "10 minutes"
        }
    },
    "PERIOD_M12": {
        "group": 20,
        "label": "PERIOD_M12",
        "body": "PERIOD_M12",
        "code": [
            {
                "label": "PERIOD_M12",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "12 минут",
            "en": "12 minutes"
        }
    },
    "PERIOD_M15": {
        "group": 20,
        "label": "PERIOD_M15",
        "body": "PERIOD_M15",
        "code": [
            {
                "label": "PERIOD_M15",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "15 минут",
            "en": "15 minutes"
        }
    },
    "PERIOD_M2": {
        "group": 20,
        "label": "PERIOD_M2",
        "body": "PERIOD_M2",
        "code": [
            {
                "label": "PERIOD_M2",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "2 минуты",
            "en": "2 minutes"
        }
    },
    "PERIOD_M20": {
        "group": 20,
        "label": "PERIOD_M20",
        "body": "PERIOD_M20",
        "code": [
            {
                "label": "PERIOD_M20",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "20 минут",
            "en": "20 minutes"
        }
    },
    "PERIOD_M3": {
        "group": 20,
        "label": "PERIOD_M3",
        "body": "PERIOD_M3",
        "code": [
            {
                "label": "PERIOD_M3",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "3 минуты",
            "en": "3 minutes"
        }
    },
    "PERIOD_M30": {
        "group": 20,
        "label": "PERIOD_M30",
        "body": "PERIOD_M30",
        "code": [
            {
                "label": "PERIOD_M30",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "30 минут",
            "en": "30 minutes"
        }
    },
    "PERIOD_M4": {
        "group": 20,
        "label": "PERIOD_M4",
        "body": "PERIOD_M4",
        "code": [
            {
                "label": "PERIOD_M4",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "4 минуты",
            "en": "4 minutes"
        }
    },
    "PERIOD_M5": {
        "group": 20,
        "label": "PERIOD_M5",
        "body": "PERIOD_M5",
        "code": [
            {
                "label": "PERIOD_M5",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "5 минут",
            "en": "5 minutes"
        }
    },
    "PERIOD_M6": {
        "group": 20,
        "label": "PERIOD_M6",
        "body": "PERIOD_M6",
        "code": [
            {
                "label": "PERIOD_M6",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "6 минут",
            "en": "6 minutes"
        }
    },
    "PERIOD_MN1": {
        "group": 20,
        "label": "PERIOD_MN1",
        "body": "PERIOD_MN1",
        "code": [
            {
                "label": "PERIOD_MN1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "1 месяц",
            "en": "1 month"
        }
    },
    "PERIOD_W1": {
        "group": 20,
        "label": "PERIOD_W1",
        "body": "PERIOD_W1",
        "code": [
            {
                "label": "PERIOD_W1",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "1 неделя",
            "en": "1 week"
        }
    },
    "PLOT_ARROW": {
        "group": 20,
        "label": "PLOT_ARROW",
        "body": "PLOT_ARROW",
        "code": [
            {
                "label": "PLOT_ARROW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Код стрелки для стиля DRAW_ARROW",
            "en": "Arrow code for style DRAW_ARROW"
        }
    },
    "PLOT_ARROW_SHIFT": {
        "group": 20,
        "label": "PLOT_ARROW_SHIFT",
        "body": "PLOT_ARROW_SHIFT",
        "code": [
            {
                "label": "PLOT_ARROW_SHIFT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Смещение стрелок по вертикали для стиля DRAW_ARROW",
            "en": "Vertical shift of arrows for style DRAW_ARROW"
        }
    },
    "PLOT_COLOR_INDEXES": {
        "group": 20,
        "label": "PLOT_COLOR_INDEXES",
        "body": "PLOT_COLOR_INDEXES",
        "code": [
            {
                "label": "PLOT_COLOR_INDEXES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество цветов",
            "en": "The number of colors"
        }
    },
    "PLOT_DRAW_BEGIN": {
        "group": 20,
        "label": "PLOT_DRAW_BEGIN",
        "body": "PLOT_DRAW_BEGIN",
        "code": [
            {
                "label": "PLOT_DRAW_BEGIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество начальных баров без отрисовки и значений в DataWindow",
            "en": "Number of initial bars without drawing and values in the DataWindow"
        }
    },
    "PLOT_DRAW_TYPE": {
        "group": 20,
        "label": "PLOT_DRAW_TYPE",
        "body": "PLOT_DRAW_TYPE",
        "code": [
            {
                "label": "PLOT_DRAW_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип графического построения",
            "en": "Type of graphical construction"
        }
    },
    "PLOT_EMPTY_VALUE": {
        "group": 20,
        "label": "PLOT_EMPTY_VALUE",
        "body": "PLOT_EMPTY_VALUE",
        "code": [
            {
                "label": "PLOT_EMPTY_VALUE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Пустое значение для построения, для которого нет отрисовки",
            "en": "An empty value for plotting, for which there is no drawing"
        }
    },
    "PLOT_LABEL": {
        "group": 20,
        "label": "PLOT_LABEL",
        "body": "PLOT_LABEL",
        "code": [
            {
                "label": "PLOT_LABEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя индикаторной графической серии для отображения в окне DataWindow. Для сложных графических стилей, требующих для отображения несколько индикаторных буферов, имена для каждого буфера можно задать с использованием \";\" в качестве разделителя. Пример кода приведен в DRAW_CANDLES",
            "en": "The name of the indicator graphical series to display in the DataWindow. When working with complex graphical styles requiring several indicator buffers for display, the names for each buffer can be specified using \";\" as a separator. Sample code is shown in DRAW_CANDLES"
        }
    },
    "PLOT_LINE_COLOR": {
        "group": 20,
        "label": "PLOT_LINE_COLOR",
        "body": "PLOT_LINE_COLOR",
        "code": [
            {
                "label": "PLOT_LINE_COLOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Индекс буфера, содержащего цвет отрисовки",
            "en": "The index of a buffer containing the drawing color"
        }
    },
    "PLOT_LINE_STYLE": {
        "group": 20,
        "label": "PLOT_LINE_STYLE",
        "body": "PLOT_LINE_STYLE",
        "code": [
            {
                "label": "PLOT_LINE_STYLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Стиль линии отрисовки",
            "en": "Drawing line style"
        }
    },
    "PLOT_LINE_WIDTH": {
        "group": 20,
        "label": "PLOT_LINE_WIDTH",
        "body": "PLOT_LINE_WIDTH",
        "code": [
            {
                "label": "PLOT_LINE_WIDTH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Толщина линии отрисовки",
            "en": "The thickness of the drawing line"
        }
    },
    "PLOT_SHIFT": {
        "group": 20,
        "label": "PLOT_SHIFT",
        "body": "PLOT_SHIFT",
        "code": [
            {
                "label": "PLOT_SHIFT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Сдвиг графического построения индикатора по оси времени в барах",
            "en": "Shift of indicator plotting along the time axis in bars"
        }
    },
    "PLOT_SHOW_DATA": {
        "group": 20,
        "label": "PLOT_SHOW_DATA",
        "body": "PLOT_SHOW_DATA",
        "code": [
            {
                "label": "PLOT_SHOW_DATA",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак отображения значений построения в окне DataWindow",
            "en": "Sign of display of construction values in the DataWindow"
        }
    },
    "PLUSDI_LINE": {
        "group": 20,
        "label": "PLUSDI_LINE",
        "body": "PLUSDI_LINE",
        "code": [
            {
                "label": "PLUSDI_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия +DI",
            "en": "Line +DI"
        }
    },
    "POINTER_AUTOMATIC": {
        "group": 20,
        "label": "POINTER_AUTOMATIC",
        "body": "POINTER_AUTOMATIC",
        "code": [
            {
                "label": "POINTER_AUTOMATIC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Указатель любого объекта, созданного автоматически (без использования new())",
            "en": "Pointer of any objects created automatically (not using new())"
        }
    },
    "POINTER_DYNAMIC": {
        "group": 20,
        "label": "POINTER_DYNAMIC",
        "body": "POINTER_DYNAMIC",
        "code": [
            {
                "label": "POINTER_DYNAMIC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Указатель объекта, созданного оператором new",
            "en": "Pointer of the object created by the new() operator"
        }
    },
    "POINTER_INVALID": {
        "group": 20,
        "label": "POINTER_INVALID",
        "body": "POINTER_INVALID",
        "code": [
            {
                "label": "POINTER_INVALID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Некорректный указатель",
            "en": "Incorrect pointer"
        }
    },
    "POSITION_COMMENT": {
        "group": 20,
        "label": "POSITION_COMMENT",
        "body": "POSITION_COMMENT",
        "code": [
            {
                "label": "POSITION_COMMENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Комментарий к позиции",
            "en": "Position comment"
        }
    },
    "POSITION_COMMISSION": {
        "group": 20,
        "label": "POSITION_COMMISSION",
        "body": "POSITION_COMMISSION",
        "code": [
            {
                "label": "POSITION_COMMISSION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Коммисия",
            "en": "Commission"
        }
    },
    "POSITION_IDENTIFIER": {
        "group": 20,
        "label": "POSITION_IDENTIFIER",
        "body": "POSITION_IDENTIFIER",
        "code": [
            {
                "label": "POSITION_IDENTIFIER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Идентификатор позиции - это уникальное число, которое присваивается каждой вновь открытой позиции и не изменяется в течение всей ее жизни. Переворот позиции не изменяет идентификатора позиции.",
            "en": "Position identifier is a unique number that is assigned to every newly opened position and doesn't change during the entire lifetime of the position. Position turnover doesn't change its identifier."
        }
    },
    "POSITION_MAGIC": {
        "group": 20,
        "label": "POSITION_MAGIC",
        "body": "POSITION_MAGIC",
        "code": [
            {
                "label": "POSITION_MAGIC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Magic number для позиции (смотри ORDER_MAGIC)",
            "en": "Position magic number (see ORDER_MAGIC)"
        }
    },
    "POSITION_PRICE_CURRENT": {
        "group": 20,
        "label": "POSITION_PRICE_CURRENT",
        "body": "POSITION_PRICE_CURRENT",
        "code": [
            {
                "label": "POSITION_PRICE_CURRENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущая цена по символу",
            "en": "Current price of the position symbol"
        }
    },
    "POSITION_PRICE_OPEN": {
        "group": 20,
        "label": "POSITION_PRICE_OPEN",
        "body": "POSITION_PRICE_OPEN",
        "code": [
            {
                "label": "POSITION_PRICE_OPEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена позиции",
            "en": "Position open price"
        }
    },
    "POSITION_PROFIT": {
        "group": 20,
        "label": "POSITION_PROFIT",
        "body": "POSITION_PROFIT",
        "code": [
            {
                "label": "POSITION_PROFIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущая прибыль",
            "en": "Current profit"
        }
    },
    "POSITION_SL": {
        "group": 20,
        "label": "POSITION_SL",
        "body": "POSITION_SL",
        "code": [
            {
                "label": "POSITION_SL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень Stop Loss для открытой позиции",
            "en": "Stop Loss level of opened position"
        }
    },
    "POSITION_SWAP": {
        "group": 20,
        "label": "POSITION_SWAP",
        "body": "POSITION_SWAP",
        "code": [
            {
                "label": "POSITION_SWAP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Накопленный своп",
            "en": "Cumulative swap"
        }
    },
    "POSITION_SYMBOL": {
        "group": 20,
        "label": "POSITION_SYMBOL",
        "body": "POSITION_SYMBOL",
        "code": [
            {
                "label": "POSITION_SYMBOL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Символ, по которому открыта позиция",
            "en": "Symbol of the position"
        }
    },
    "POSITION_TIME": {
        "group": 20,
        "label": "POSITION_TIME",
        "body": "POSITION_TIME",
        "code": [
            {
                "label": "POSITION_TIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время открытия позиции",
            "en": "Position open time"
        }
    },
    "POSITION_TIME_MSC": {
        "group": 20,
        "label": "POSITION_TIME_MSC",
        "body": "POSITION_TIME_MSC",
        "code": [
            {
                "label": "POSITION_TIME_MSC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время открытия позиции в миллисекундах с 01.01.1970",
            "en": "Position opening time in milliseconds since 01.01.1970"
        }
    },
    "POSITION_TIME_UPDATE": {
        "group": 20,
        "label": "POSITION_TIME_UPDATE",
        "body": "POSITION_TIME_UPDATE",
        "code": [
            {
                "label": "POSITION_TIME_UPDATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время изменения позиции в секундах с 01.01.1970",
            "en": "Position changing time in seconds since 01.01.1970"
        }
    },
    "POSITION_TIME_UPDATE_MSC": {
        "group": 20,
        "label": "POSITION_TIME_UPDATE_MSC",
        "body": "POSITION_TIME_UPDATE_MSC",
        "code": [
            {
                "label": "POSITION_TIME_UPDATE_MSC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время изменения позиции в миллисекундах с 01.01.1970",
            "en": "Position changing time in milliseconds since 01.01.1970"
        }
    },
    "POSITION_TP": {
        "group": 20,
        "label": "POSITION_TP",
        "body": "POSITION_TP",
        "code": [
            {
                "label": "POSITION_TP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уровень Take Profit для открытой позиции",
            "en": "Take Profit level of opened position"
        }
    },
    "POSITION_TYPE": {
        "group": 20,
        "label": "POSITION_TYPE",
        "body": "POSITION_TYPE",
        "code": [
            {
                "label": "POSITION_TYPE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип позиции",
            "en": "Position type"
        }
    },
    "POSITION_TYPE_BUY": {
        "group": 20,
        "label": "POSITION_TYPE_BUY",
        "body": "POSITION_TYPE_BUY",
        "code": [
            {
                "label": "POSITION_TYPE_BUY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Покупка",
            "en": "Buy"
        }
    },
    "POSITION_TYPE_SELL": {
        "group": 20,
        "label": "POSITION_TYPE_SELL",
        "body": "POSITION_TYPE_SELL",
        "code": [
            {
                "label": "POSITION_TYPE_SELL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Продажа",
            "en": "Sell"
        }
    },
    "POSITION_VOLUME": {
        "group": 20,
        "label": "POSITION_VOLUME",
        "body": "POSITION_VOLUME",
        "code": [
            {
                "label": "POSITION_VOLUME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объем позиции",
            "en": "Position volume"
        }
    },
    "PRICE_CLOSE": {
        "group": 20,
        "label": "PRICE_CLOSE",
        "body": "PRICE_CLOSE",
        "code": [
            {
                "label": "PRICE_CLOSE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена закрытия",
            "en": "Close price"
        }
    },
    "PRICE_HIGH": {
        "group": 20,
        "label": "PRICE_HIGH",
        "body": "PRICE_HIGH",
        "code": [
            {
                "label": "PRICE_HIGH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальная за период цена",
            "en": "The maximum price for the period"
        }
    },
    "PRICE_LOW": {
        "group": 20,
        "label": "PRICE_LOW",
        "body": "PRICE_LOW",
        "code": [
            {
                "label": "PRICE_LOW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальная за период цена",
            "en": "The minimum price for the period"
        }
    },
    "PRICE_MEDIAN": {
        "group": 20,
        "label": "PRICE_MEDIAN",
        "body": "PRICE_MEDIAN",
        "code": [
            {
                "label": "PRICE_MEDIAN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Медианная цена, (high+low)/2",
            "en": "Median price, (high + low)/2"
        }
    },
    "PRICE_OPEN": {
        "group": 20,
        "label": "PRICE_OPEN",
        "body": "PRICE_OPEN",
        "code": [
            {
                "label": "PRICE_OPEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена открытия",
            "en": "Open price"
        }
    },
    "PRICE_TYPICAL": {
        "group": 20,
        "label": "PRICE_TYPICAL",
        "body": "PRICE_TYPICAL",
        "code": [
            {
                "label": "PRICE_TYPICAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Типичная цена, (high+low+close)/3",
            "en": "Typical price, (high + low + close)/3"
        }
    },
    "PRICE_WEIGHTED": {
        "group": 20,
        "label": "PRICE_WEIGHTED",
        "body": "PRICE_WEIGHTED",
        "code": [
            {
                "label": "PRICE_WEIGHTED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Средневзвешенная цена, (high+low+close+close)/4",
            "en": "Average price, (high + low + close + close)/4"
        }
    },
    "PROGRAM_EXPERT": {
        "group": 20,
        "label": "PROGRAM_EXPERT",
        "body": "PROGRAM_EXPERT",
        "code": [
            {
                "label": "PROGRAM_EXPERT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Эксперт",
            "en": "Expert"
        }
    },
    "PROGRAM_INDICATOR": {
        "group": 20,
        "label": "PROGRAM_INDICATOR",
        "body": "PROGRAM_INDICATOR",
        "code": [
            {
                "label": "PROGRAM_INDICATOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Индикатор",
            "en": "Indicator"
        }
    },
    "PROGRAM_SCRIPT": {
        "group": 20,
        "label": "PROGRAM_SCRIPT",
        "body": "PROGRAM_SCRIPT",
        "code": [
            {
                "label": "PROGRAM_SCRIPT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Скрипт",
            "en": "Script"
        }
    },
    "REASON_ACCOUNT": {
        "group": 20,
        "label": "REASON_ACCOUNT",
        "body": "REASON_ACCOUNT",
        "code": [
            {
                "label": "REASON_ACCOUNT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Активирован другой счет либо произошло переподключение к торговому серверу вследствие изменения настроек счета",
            "en": "Another account has been activated or reconnection to the trade server has occurred due to changes in the account settings"
        }
    },
    "REASON_CHARTCHANGE": {
        "group": 20,
        "label": "REASON_CHARTCHANGE",
        "body": "REASON_CHARTCHANGE",
        "code": [
            {
                "label": "REASON_CHARTCHANGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Символ или период графика был изменен",
            "en": "Symbol or chart period has been changed"
        }
    },
    "REASON_CHARTCLOSE": {
        "group": 20,
        "label": "REASON_CHARTCLOSE",
        "body": "REASON_CHARTCLOSE",
        "code": [
            {
                "label": "REASON_CHARTCLOSE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "График закрыт",
            "en": "Chart has been closed"
        }
    },
    "REASON_CLOSE": {
        "group": 20,
        "label": "REASON_CLOSE",
        "body": "REASON_CLOSE",
        "code": [
            {
                "label": "REASON_CLOSE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Терминал был закрыт",
            "en": "Terminal has been closed"
        }
    },
    "REASON_INITFAILED": {
        "group": 20,
        "label": "REASON_INITFAILED",
        "body": "REASON_INITFAILED",
        "code": [
            {
                "label": "REASON_INITFAILED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак того, что обработчик OnInit() вернул ненулевое значение",
            "en": "This value means that OnInit() handler has returned a nonzero value"
        }
    },
    "REASON_PARAMETERS": {
        "group": 20,
        "label": "REASON_PARAMETERS",
        "body": "REASON_PARAMETERS",
        "code": [
            {
                "label": "REASON_PARAMETERS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Входные параметры были изменены пользователем",
            "en": "Input parameters have been changed by a user"
        }
    },
    "REASON_PROGRAM": {
        "group": 20,
        "label": "REASON_PROGRAM",
        "body": "REASON_PROGRAM",
        "code": [
            {
                "label": "REASON_PROGRAM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Эксперт прекратил свою работу, вызвав функцию ExpertRemove()",
            "en": "Expert Advisor terminated its operation by calling the ExpertRemove() function"
        }
    },
    "REASON_RECOMPILE": {
        "group": 20,
        "label": "REASON_RECOMPILE",
        "body": "REASON_RECOMPILE",
        "code": [
            {
                "label": "REASON_RECOMPILE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Программа перекомпилирована",
            "en": "Program has been recompiled"
        }
    },
    "REASON_REMOVE": {
        "group": 20,
        "label": "REASON_REMOVE",
        "body": "REASON_REMOVE",
        "code": [
            {
                "label": "REASON_REMOVE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Программа удалена с графика",
            "en": "Program has been deleted from the chart"
        }
    },
    "REASON_TEMPLATE": {
        "group": 20,
        "label": "REASON_TEMPLATE",
        "body": "REASON_TEMPLATE",
        "code": [
            {
                "label": "REASON_TEMPLATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Применен другой шаблон графика",
            "en": "A new template has been applied"
        }
    },
    "SATURDAY": {
        "group": 20,
        "label": "SATURDAY",
        "body": "SATURDAY",
        "code": [
            {
                "label": "SATURDAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Суббота",
            "en": "Saturday"
        }
    },
    "SEEK_CUR": {
        "group": 20,
        "label": "SEEK_CUR",
        "body": "SEEK_CUR",
        "code": [
            {
                "label": "SEEK_CUR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Текущая позиция файлового указателя",
            "en": "Current position of a file pointer"
        }
    },
    "SEEK_END": {
        "group": 20,
        "label": "SEEK_END",
        "body": "SEEK_END",
        "code": [
            {
                "label": "SEEK_END",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Конец файла",
            "en": "File end"
        }
    },
    "SEEK_SET": {
        "group": 20,
        "label": "SEEK_SET",
        "body": "SEEK_SET",
        "code": [
            {
                "label": "SEEK_SET",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Начало файла",
            "en": "File beginning"
        }
    },
    "SENKOUSPANA_LINE": {
        "group": 20,
        "label": "SENKOUSPANA_LINE",
        "body": "SENKOUSPANA_LINE",
        "code": [
            {
                "label": "SENKOUSPANA_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия Senkou Span A",
            "en": "Senkou Span A line"
        }
    },
    "SENKOUSPANB_LINE": {
        "group": 20,
        "label": "SENKOUSPANB_LINE",
        "body": "SENKOUSPANB_LINE",
        "code": [
            {
                "label": "SENKOUSPANB_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия Senkou Span B",
            "en": "Senkou Span B line"
        }
    },
    "SERIES_BARS_COUNT": {
        "group": 20,
        "label": "SERIES_BARS_COUNT",
        "body": "SERIES_BARS_COUNT",
        "code": [
            {
                "label": "SERIES_BARS_COUNT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество баров по символу-периоду на данный момент",
            "en": "Bars count for the symbol-period for the current moment"
        }
    },
    "SERIES_FIRSTDATE": {
        "group": 20,
        "label": "SERIES_FIRSTDATE",
        "body": "SERIES_FIRSTDATE",
        "code": [
            {
                "label": "SERIES_FIRSTDATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Самая первая дата по символу-периоду на данный момент",
            "en": "The very first date for the symbol-period for the current moment"
        }
    },
    "SERIES_LASTBAR_DATE": {
        "group": 20,
        "label": "SERIES_LASTBAR_DATE",
        "body": "SERIES_LASTBAR_DATE",
        "code": [
            {
                "label": "SERIES_LASTBAR_DATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время открытия последнего бара по символу-периоду",
            "en": "Open time of the last bar of the symbol-period"
        }
    },
    "SERIES_SERVER_FIRSTDATE": {
        "group": 20,
        "label": "SERIES_SERVER_FIRSTDATE",
        "body": "SERIES_SERVER_FIRSTDATE",
        "code": [
            {
                "label": "SERIES_SERVER_FIRSTDATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Самая первая дата в истории по символу на сервере независимо от периода",
            "en": "The very first date in the history of the symbol on the server regardless of the timeframe"
        }
    },
    "SERIES_SYNCHRONIZED": {
        "group": 20,
        "label": "SERIES_SYNCHRONIZED",
        "body": "SERIES_SYNCHRONIZED",
        "code": [
            {
                "label": "SERIES_SYNCHRONIZED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак синхронизированности данных по символу/периоду на данный момент",
            "en": "Symbol/period data synchronization flag for the current moment"
        }
    },
    "SERIES_TERMINAL_FIRSTDATE": {
        "group": 20,
        "label": "SERIES_TERMINAL_FIRSTDATE",
        "body": "SERIES_TERMINAL_FIRSTDATE",
        "code": [
            {
                "label": "SERIES_TERMINAL_FIRSTDATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Самая первая дата в истории по символу в клиентском терминале независимо от периода",
            "en": "The very first date in the history of the symbol in the client terminal, regardless of the timeframe"
        }
    },
    "SHORT_MAX": {
        "group": 20,
        "label": "SHORT_MAX",
        "body": "SHORT_MAX",
        "code": [
            {
                "label": "SHORT_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом short",
            "en": "Maximal value, which can be represented by short type"
        }
    },
    "SHORT_MIN": {
        "group": 20,
        "label": "SHORT_MIN",
        "body": "SHORT_MIN",
        "code": [
            {
                "label": "SHORT_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное значение, которое может быть представлено типом short",
            "en": "Minimal value, which can be represented by short type"
        }
    },
    "SIGNAL_BASE_AUTHOR_LOGIN": {
        "group": 20,
        "label": "SIGNAL_BASE_AUTHOR_LOGIN",
        "body": "SIGNAL_BASE_AUTHOR_LOGIN",
        "code": [
            {
                "label": "SIGNAL_BASE_AUTHOR_LOGIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Логин автора сигнала",
            "en": "Author login"
        }
    },
    "SIGNAL_BASE_BALANCE": {
        "group": 20,
        "label": "SIGNAL_BASE_BALANCE",
        "body": "SIGNAL_BASE_BALANCE",
        "code": [
            {
                "label": "SIGNAL_BASE_BALANCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Баланс счета",
            "en": "Account balance"
        }
    },
    "SIGNAL_BASE_BROKER": {
        "group": 20,
        "label": "SIGNAL_BASE_BROKER",
        "body": "SIGNAL_BASE_BROKER",
        "code": [
            {
                "label": "SIGNAL_BASE_BROKER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Наименование брокера (компании)",
            "en": "Broker name (company)"
        }
    },
    "SIGNAL_BASE_BROKER_SERVER": {
        "group": 20,
        "label": "SIGNAL_BASE_BROKER_SERVER",
        "body": "SIGNAL_BASE_BROKER_SERVER",
        "code": [
            {
                "label": "SIGNAL_BASE_BROKER_SERVER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Сервер брокера",
            "en": "Broker server"
        }
    },
    "SIGNAL_BASE_CURRENCY": {
        "group": 20,
        "label": "SIGNAL_BASE_CURRENCY",
        "body": "SIGNAL_BASE_CURRENCY",
        "code": [
            {
                "label": "SIGNAL_BASE_CURRENCY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Валюта счета сигнала",
            "en": "Signal base currency"
        }
    },
    "SIGNAL_BASE_DATE_PUBLISHED": {
        "group": 20,
        "label": "SIGNAL_BASE_DATE_PUBLISHED",
        "body": "SIGNAL_BASE_DATE_PUBLISHED",
        "code": [
            {
                "label": "SIGNAL_BASE_DATE_PUBLISHED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дата публикации сигнала (когда стал доступен для подписки)",
            "en": "Publication date (date when it become available for subscription)"
        }
    },
    "SIGNAL_BASE_DATE_STARTED": {
        "group": 20,
        "label": "SIGNAL_BASE_DATE_STARTED",
        "body": "SIGNAL_BASE_DATE_STARTED",
        "code": [
            {
                "label": "SIGNAL_BASE_DATE_STARTED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дата начала мониторинга сигнала",
            "en": "Monitoring starting date"
        }
    },
    "SIGNAL_BASE_EQUITY": {
        "group": 20,
        "label": "SIGNAL_BASE_EQUITY",
        "body": "SIGNAL_BASE_EQUITY",
        "code": [
            {
                "label": "SIGNAL_BASE_EQUITY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Средства на счете",
            "en": "Account equity"
        }
    },
    "SIGNAL_BASE_GAIN": {
        "group": 20,
        "label": "SIGNAL_BASE_GAIN",
        "body": "SIGNAL_BASE_GAIN",
        "code": [
            {
                "label": "SIGNAL_BASE_GAIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Прирост счета в процентах",
            "en": "Account gain"
        }
    },
    "SIGNAL_BASE_ID": {
        "group": 20,
        "label": "SIGNAL_BASE_ID",
        "body": "SIGNAL_BASE_ID",
        "code": [
            {
                "label": "SIGNAL_BASE_ID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "ID сигнала",
            "en": "Signal ID"
        }
    },
    "SIGNAL_BASE_LEVERAGE": {
        "group": 20,
        "label": "SIGNAL_BASE_LEVERAGE",
        "body": "SIGNAL_BASE_LEVERAGE",
        "code": [
            {
                "label": "SIGNAL_BASE_LEVERAGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Плечо торгового счета",
            "en": "Account leverage"
        }
    },
    "SIGNAL_BASE_MAX_DRAWDOWN": {
        "group": 20,
        "label": "SIGNAL_BASE_MAX_DRAWDOWN",
        "body": "SIGNAL_BASE_MAX_DRAWDOWN",
        "code": [
            {
                "label": "SIGNAL_BASE_MAX_DRAWDOWN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальная просадка",
            "en": "Account maximum drawdown"
        }
    },
    "SIGNAL_BASE_NAME": {
        "group": 20,
        "label": "SIGNAL_BASE_NAME",
        "body": "SIGNAL_BASE_NAME",
        "code": [
            {
                "label": "SIGNAL_BASE_NAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя сигнала",
            "en": "Signal name"
        }
    },
    "SIGNAL_BASE_PIPS": {
        "group": 20,
        "label": "SIGNAL_BASE_PIPS",
        "body": "SIGNAL_BASE_PIPS",
        "code": [
            {
                "label": "SIGNAL_BASE_PIPS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Результат торговли в пипсах",
            "en": "Profit in pips"
        }
    },
    "SIGNAL_BASE_PRICE": {
        "group": 20,
        "label": "SIGNAL_BASE_PRICE",
        "body": "SIGNAL_BASE_PRICE",
        "code": [
            {
                "label": "SIGNAL_BASE_PRICE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена подписки на сигнал",
            "en": "Signal subscription price"
        }
    },
    "SIGNAL_BASE_RATING": {
        "group": 20,
        "label": "SIGNAL_BASE_RATING",
        "body": "SIGNAL_BASE_RATING",
        "code": [
            {
                "label": "SIGNAL_BASE_RATING",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Позиция в рейтинге сигналов",
            "en": "Position in rating"
        }
    },
    "SIGNAL_BASE_ROI": {
        "group": 20,
        "label": "SIGNAL_BASE_ROI",
        "body": "SIGNAL_BASE_ROI",
        "code": [
            {
                "label": "SIGNAL_BASE_ROI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение ROI (Return on Investment) сигнала в %",
            "en": "Return on Investment (%)"
        }
    },
    "SIGNAL_BASE_SUBSCRIBERS": {
        "group": 20,
        "label": "SIGNAL_BASE_SUBSCRIBERS",
        "body": "SIGNAL_BASE_SUBSCRIBERS",
        "code": [
            {
                "label": "SIGNAL_BASE_SUBSCRIBERS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество подписчиков",
            "en": "Number of subscribers"
        }
    },
    "SIGNAL_BASE_TRADE_MODE": {
        "group": 20,
        "label": "SIGNAL_BASE_TRADE_MODE",
        "body": "SIGNAL_BASE_TRADE_MODE",
        "code": [
            {
                "label": "SIGNAL_BASE_TRADE_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип счета (0-реальный счет, 1-демо-счет, 2-конкурсный счет)",
            "en": "Account type (0-real, 1-demo, 2-contest)"
        }
    },
    "SIGNAL_BASE_TRADES": {
        "group": 20,
        "label": "SIGNAL_BASE_TRADES",
        "body": "SIGNAL_BASE_TRADES",
        "code": [
            {
                "label": "SIGNAL_BASE_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество трейдов",
            "en": "Number of trades"
        }
    },
    "SIGNAL_INFO_CONFIRMATIONS_DISABLED": {
        "group": 20,
        "label": "SIGNAL_INFO_CONFIRMATIONS_DISABLED",
        "body": "SIGNAL_INFO_CONFIRMATIONS_DISABLED",
        "code": [
            {
                "label": "SIGNAL_INFO_CONFIRMATIONS_DISABLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Флаг разрешения синхронизации без показа диалога подтверждения",
            "en": "The flag enables synchronization without confirmation dialog"
        }
    },
    "SIGNAL_INFO_COPY_SLTP": {
        "group": 20,
        "label": "SIGNAL_INFO_COPY_SLTP",
        "body": "SIGNAL_INFO_COPY_SLTP",
        "code": [
            {
                "label": "SIGNAL_INFO_COPY_SLTP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Флаг копирования Stop Loss и Take Profit",
            "en": "Copy Stop Loss and Take Profit flag"
        }
    },
    "SIGNAL_INFO_DEPOSIT_PERCENT": {
        "group": 20,
        "label": "SIGNAL_INFO_DEPOSIT_PERCENT",
        "body": "SIGNAL_INFO_DEPOSIT_PERCENT",
        "code": [
            {
                "label": "SIGNAL_INFO_DEPOSIT_PERCENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ограничения по депозиту (в %)",
            "en": "Deposit percent (%)"
        }
    },
    "SIGNAL_INFO_EQUITY_LIMIT": {
        "group": 20,
        "label": "SIGNAL_INFO_EQUITY_LIMIT",
        "body": "SIGNAL_INFO_EQUITY_LIMIT",
        "code": [
            {
                "label": "SIGNAL_INFO_EQUITY_LIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Процент для конвертации объема сделки",
            "en": "Equity limit"
        }
    },
    "SIGNAL_INFO_ID": {
        "group": 20,
        "label": "SIGNAL_INFO_ID",
        "body": "SIGNAL_INFO_ID",
        "code": [
            {
                "label": "SIGNAL_INFO_ID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "id сигнала, r/o",
            "en": "Signal id, r/o"
        }
    },
    "SIGNAL_INFO_NAME": {
        "group": 20,
        "label": "SIGNAL_INFO_NAME",
        "body": "SIGNAL_INFO_NAME",
        "code": [
            {
                "label": "SIGNAL_INFO_NAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя сигнала, r/o",
            "en": "Signal name, r/o"
        }
    },
    "SIGNAL_INFO_SLIPPAGE": {
        "group": 20,
        "label": "SIGNAL_INFO_SLIPPAGE",
        "body": "SIGNAL_INFO_SLIPPAGE",
        "code": [
            {
                "label": "SIGNAL_INFO_SLIPPAGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Величина проскальзывания, с которым выставляются рыночные ордера при синхронизации позиций и копировании сделок",
            "en": "Slippage (used when placing market orders in synchronization of positions and copying of trades)"
        }
    },
    "SIGNAL_INFO_SUBSCRIPTION_ENABLED": {
        "group": 20,
        "label": "SIGNAL_INFO_SUBSCRIPTION_ENABLED",
        "body": "SIGNAL_INFO_SUBSCRIPTION_ENABLED",
        "code": [
            {
                "label": "SIGNAL_INFO_SUBSCRIPTION_ENABLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Флаг разрешения на копирование сделок по подписке",
            "en": "\"Copy trades by subscription\" permission flag"
        }
    },
    "SIGNAL_INFO_TERMS_AGREE": {
        "group": 20,
        "label": "SIGNAL_INFO_TERMS_AGREE",
        "body": "SIGNAL_INFO_TERMS_AGREE",
        "code": [
            {
                "label": "SIGNAL_INFO_TERMS_AGREE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Флаг согласия с условиями использования сервиса \"Сигналы\", r/o",
            "en": "\"Agree to terms of use of Signals service\" flag, r/o"
        }
    },
    "SIGNAL_INFO_VOLUME_PERCENT": {
        "group": 20,
        "label": "SIGNAL_INFO_VOLUME_PERCENT",
        "body": "SIGNAL_INFO_VOLUME_PERCENT",
        "code": [
            {
                "label": "SIGNAL_INFO_VOLUME_PERCENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение ограничения по средствам для сигнала, r/o",
            "en": "Maximum percent of deposit used (%), r/o"
        }
    },
    "SIGNAL_LINE": {
        "group": 20,
        "label": "SIGNAL_LINE",
        "body": "SIGNAL_LINE",
        "code": [
            {
                "label": "SIGNAL_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Сигнальная линия",
            "en": "Signal line"
        }
    },
    "STAT_BALANCE_DD": {
        "group": 20,
        "label": "STAT_BALANCE_DD",
        "body": "STAT_BALANCE_DD",
        "code": [
            {
                "label": "STAT_BALANCE_DD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальная просадка баланса в деньгах. В процессе торговли баланс может испытать множество просадок, берется наибольшее значение.",
            "en": "Maximum balance drawdown in monetary terms. In the process of trading, a balance may have numerous drawdowns; here the largest value is taken"
        }
    },
    "STAT_BALANCE_DD_RELATIVE": {
        "group": 20,
        "label": "STAT_BALANCE_DD_RELATIVE",
        "body": "STAT_BALANCE_DD_RELATIVE",
        "code": [
            {
                "label": "STAT_BALANCE_DD_RELATIVE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Просадка баланса в деньгах, которая была зафиксирована в момент максимальной просадки баланса в процентах (STAT_BALANCE_DDREL_PERCENT).",
            "en": "Balance drawdown in monetary terms that was recorded at the moment of the maximum balance drawdown as a percentage (STAT_BALANCE_DDREL_PERCENT)."
        }
    },
    "STAT_BALANCE_DDREL_PERCENT": {
        "group": 20,
        "label": "STAT_BALANCE_DDREL_PERCENT",
        "body": "STAT_BALANCE_DDREL_PERCENT",
        "code": [
            {
                "label": "STAT_BALANCE_DDREL_PERCENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальная просадка баланса в процентах. В процессе торговли баланс может испытать множество просадок, для каждой фиксируется относительное значение просадки в процентах. Возвращается наибольшее значение",
            "en": "Maximum balance drawdown as a percentage. In the process of trading, a balance may have numerous drawdowns, for each of which the relative drawdown value in percents is calculated. The greatest value is returned"
        }
    },
    "STAT_BALANCEDD_PERCENT": {
        "group": 20,
        "label": "STAT_BALANCEDD_PERCENT",
        "body": "STAT_BALANCEDD_PERCENT",
        "code": [
            {
                "label": "STAT_BALANCEDD_PERCENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Просадка баланса в процентах, которая была зафиксирована в момент максимальной просадки баланса в деньгах (STAT_BALANCE_DD).",
            "en": "Balance drawdown as a percentage that was recorded at the moment of the maximum balance drawdown in monetary terms (STAT_BALANCE_DD)."
        }
    },
    "STAT_BALANCEMIN": {
        "group": 20,
        "label": "STAT_BALANCEMIN",
        "body": "STAT_BALANCEMIN",
        "code": [
            {
                "label": "STAT_BALANCEMIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное значение баланса",
            "en": "Minimum balance value"
        }
    },
    "STAT_CONLOSSMAX": {
        "group": 20,
        "label": "STAT_CONLOSSMAX",
        "body": "STAT_CONLOSSMAX",
        "code": [
            {
                "label": "STAT_CONLOSSMAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальный убыток в последовательности убыточных трейдов. Значение меньше или равно нулю",
            "en": "Maximum loss in a series of losing trades. The value is less than or equal to zero"
        }
    },
    "STAT_CONLOSSMAX_TRADES": {
        "group": 20,
        "label": "STAT_CONLOSSMAX_TRADES",
        "body": "STAT_CONLOSSMAX_TRADES",
        "code": [
            {
                "label": "STAT_CONLOSSMAX_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество трейдов, сформировавших STAT_CONLOSSMAX (максимальный убыток в последовательности убыточных трейдов)",
            "en": "The number of trades that have formed STAT_CONLOSSMAX (maximum loss in a series of losing trades)"
        }
    },
    "STAT_CONPROFITMAX": {
        "group": 20,
        "label": "STAT_CONPROFITMAX",
        "body": "STAT_CONPROFITMAX",
        "code": [
            {
                "label": "STAT_CONPROFITMAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальная прибыль в последовательности прибыльных трейдов. Значение больше или равно нулю",
            "en": "Maximum profit in a series of profitable trades. The value is greater than or equal to zero"
        }
    },
    "STAT_CONPROFITMAX_TRADES": {
        "group": 20,
        "label": "STAT_CONPROFITMAX_TRADES",
        "body": "STAT_CONPROFITMAX_TRADES",
        "code": [
            {
                "label": "STAT_CONPROFITMAX_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество трейдов, сформировавших STAT_CONPROFITMAX (максимальная прибыль в последовательности прибыльных трейдов)",
            "en": "The number of trades that have formed STAT_CONPROFITMAX (maximum profit in a series of profitable trades)"
        }
    },
    "STAT_CUSTOM_ONTESTER": {
        "group": 20,
        "label": "STAT_CUSTOM_ONTESTER",
        "body": "STAT_CUSTOM_ONTESTER",
        "code": [
            {
                "label": "STAT_CUSTOM_ONTESTER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение рассчитанного пользовательского критерия оптимизации, возвращаемого функцией OnTester()",
            "en": "The value of the calculated custom optimization criterion returned by the OnTester() function"
        }
    },
    "STAT_DEALS": {
        "group": 20,
        "label": "STAT_DEALS",
        "body": "STAT_DEALS",
        "code": [
            {
                "label": "STAT_DEALS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество совершенных сделок",
            "en": "The number of deals"
        }
    },
    "STAT_EQUITY_DD": {
        "group": 20,
        "label": "STAT_EQUITY_DD",
        "body": "STAT_EQUITY_DD",
        "code": [
            {
                "label": "STAT_EQUITY_DD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальная просадка средств в деньгах. В процессе торговли средства могут испытать множество просадок, берется наибольшее значение.",
            "en": "Maximum equity drawdown in monetary terms. In the process of trading, numerous drawdowns may appear on the equity; here the largest value is taken"
        }
    },
    "STAT_EQUITY_DD_RELATIVE": {
        "group": 20,
        "label": "STAT_EQUITY_DD_RELATIVE",
        "body": "STAT_EQUITY_DD_RELATIVE",
        "code": [
            {
                "label": "STAT_EQUITY_DD_RELATIVE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Просадка средств в деньгах, которая была зафиксирована в момент максимальной просадки средств в процентах (STAT_EQUITY_DDREL_PERCENT).",
            "en": "Equity drawdown in monetary terms that was recorded at the moment of the maximum equity drawdown in percent (STAT_EQUITY_DDREL_PERCENT)."
        }
    },
    "STAT_EQUITY_DDREL_PERCENT": {
        "group": 20,
        "label": "STAT_EQUITY_DDREL_PERCENT",
        "body": "STAT_EQUITY_DDREL_PERCENT",
        "code": [
            {
                "label": "STAT_EQUITY_DDREL_PERCENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальная просадка средств в процентах. В процессе торговли средства могут испытать множество просадок, для каждой фиксируется относительное значение просадки в процентах. Возвращается наибольшее значение",
            "en": "Maximum equity drawdown as a percentage. In the process of trading, an equity may have numerous drawdowns, for each of which the relative drawdown value in percents is calculated. The greatest value is returned"
        }
    },
    "STAT_EQUITYDD_PERCENT": {
        "group": 20,
        "label": "STAT_EQUITYDD_PERCENT",
        "body": "STAT_EQUITYDD_PERCENT",
        "code": [
            {
                "label": "STAT_EQUITYDD_PERCENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Просадка средств в процентах, которая была зафиксирована в момент максимальной просадки средств в деньгах (STAT_EQUITY_DD).",
            "en": "Drawdown in percent that was recorded at the moment of the maximum equity drawdown in monetary terms (STAT_EQUITY_DD)."
        }
    },
    "STAT_EQUITYMIN": {
        "group": 20,
        "label": "STAT_EQUITYMIN",
        "body": "STAT_EQUITYMIN",
        "code": [
            {
                "label": "STAT_EQUITYMIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное значение собственных средств",
            "en": "Minimum equity value"
        }
    },
    "STAT_EXPECTED_PAYOFF": {
        "group": 20,
        "label": "STAT_EXPECTED_PAYOFF",
        "body": "STAT_EXPECTED_PAYOFF",
        "code": [
            {
                "label": "STAT_EXPECTED_PAYOFF",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Математическое ожидание выигрыша",
            "en": "Expected payoff"
        }
    },
    "STAT_GROSS_LOSS": {
        "group": 20,
        "label": "STAT_GROSS_LOSS",
        "body": "STAT_GROSS_LOSS",
        "code": [
            {
                "label": "STAT_GROSS_LOSS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общий убыток, сумма всех убыточных (отрицательных) трейдов. Значение меньше или равно нулю",
            "en": "Total loss, the sum of all negative trades. The value is less than or equal to zero"
        }
    },
    "STAT_GROSS_PROFIT": {
        "group": 20,
        "label": "STAT_GROSS_PROFIT",
        "body": "STAT_GROSS_PROFIT",
        "code": [
            {
                "label": "STAT_GROSS_PROFIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общая прибыль, сумма всех прибыльных (положительных) трейдов. Значение больше или равно нулю",
            "en": "Total profit, the sum of all profitable (positive) trades. The value is greater than or equal to zero"
        }
    },
    "STAT_INITIAL_DEPOSIT": {
        "group": 20,
        "label": "STAT_INITIAL_DEPOSIT",
        "body": "STAT_INITIAL_DEPOSIT",
        "code": [
            {
                "label": "STAT_INITIAL_DEPOSIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение начального депозита",
            "en": "The value of the initial deposit"
        }
    },
    "STAT_LONG_TRADES": {
        "group": 20,
        "label": "STAT_LONG_TRADES",
        "body": "STAT_LONG_TRADES",
        "code": [
            {
                "label": "STAT_LONG_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Длинные трейды",
            "en": "Long trades"
        }
    },
    "STAT_LOSS_TRADES": {
        "group": 20,
        "label": "STAT_LOSS_TRADES",
        "body": "STAT_LOSS_TRADES",
        "code": [
            {
                "label": "STAT_LOSS_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Убыточные трейды",
            "en": "Losing trades"
        }
    },
    "STAT_LOSSTRADES_AVGCON": {
        "group": 20,
        "label": "STAT_LOSSTRADES_AVGCON",
        "body": "STAT_LOSSTRADES_AVGCON",
        "code": [
            {
                "label": "STAT_LOSSTRADES_AVGCON",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Средняя длина убыточной серии трейдов",
            "en": "Average length of a losing series of trades"
        }
    },
    "STAT_MAX_CONLOSS_TRADES": {
        "group": 20,
        "label": "STAT_MAX_CONLOSS_TRADES",
        "body": "STAT_MAX_CONLOSS_TRADES",
        "code": [
            {
                "label": "STAT_MAX_CONLOSS_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество трейдов  в самой длинной серии убыточных трейдов STAT_MAX_CONLOSSES",
            "en": "The number of trades in the longest series of losing trades STAT_MAX_CONLOSSES"
        }
    },
    "STAT_MAX_CONLOSSES": {
        "group": 20,
        "label": "STAT_MAX_CONLOSSES",
        "body": "STAT_MAX_CONLOSSES",
        "code": [
            {
                "label": "STAT_MAX_CONLOSSES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общий убыток в самой длинной серии убыточных трейдов",
            "en": "The total loss of the longest series of losing trades"
        }
    },
    "STAT_MAX_CONPROFIT_TRADES": {
        "group": 20,
        "label": "STAT_MAX_CONPROFIT_TRADES",
        "body": "STAT_MAX_CONPROFIT_TRADES",
        "code": [
            {
                "label": "STAT_MAX_CONPROFIT_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество трейдов  в самой длинной серии прибыльных трейдов STAT_MAX_CONWINS",
            "en": "The number of trades in the longest series of profitable trades STAT_MAX_CONWINS"
        }
    },
    "STAT_MAX_CONWINS": {
        "group": 20,
        "label": "STAT_MAX_CONWINS",
        "body": "STAT_MAX_CONWINS",
        "code": [
            {
                "label": "STAT_MAX_CONWINS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общая прибыль в самой длинной серии прибыльных трейдов",
            "en": "The total profit of the longest series of profitable trades"
        }
    },
    "STAT_MAX_LOSSTRADE": {
        "group": 20,
        "label": "STAT_MAX_LOSSTRADE",
        "body": "STAT_MAX_LOSSTRADE",
        "code": [
            {
                "label": "STAT_MAX_LOSSTRADE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальный убыток – наименьшее значение среди всех убыточных трейдов. Значение меньше или равно нулю",
            "en": "Maximum loss – the lowest value of all losing trades. The value is less than or equal to zero"
        }
    },
    "STAT_MAX_PROFITTRADE": {
        "group": 20,
        "label": "STAT_MAX_PROFITTRADE",
        "body": "STAT_MAX_PROFITTRADE",
        "code": [
            {
                "label": "STAT_MAX_PROFITTRADE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальная прибыль – наибольшее значение среди всех прибыльных трейдов. Значение больше или равно нулю",
            "en": "Maximum profit – the largest value of all profitable trades. The value is greater than or equal to zero"
        }
    },
    "STAT_MIN_MARGINLEVEL": {
        "group": 20,
        "label": "STAT_MIN_MARGINLEVEL",
        "body": "STAT_MIN_MARGINLEVEL",
        "code": [
            {
                "label": "STAT_MIN_MARGINLEVEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное достигнутое значение уровня маржи",
            "en": "Minimum value of the margin level"
        }
    },
    "STAT_PROFIT": {
        "group": 20,
        "label": "STAT_PROFIT",
        "body": "STAT_PROFIT",
        "code": [
            {
                "label": "STAT_PROFIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Чистая прибыль по окончании тестирования, сумма STAT_GROSS_PROFIT и STAT_GROSS_LOSS (STAT_GROSS_LOSS всегда меньше или равно нулю)",
            "en": "Net profit after testing, the sum of STAT_GROSS_PROFIT and STAT_GROSS_LOSS (STAT_GROSS_LOSS is always less than or equal to zero)"
        }
    },
    "STAT_PROFIT_FACTOR": {
        "group": 20,
        "label": "STAT_PROFIT_FACTOR",
        "body": "STAT_PROFIT_FACTOR",
        "code": [
            {
                "label": "STAT_PROFIT_FACTOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Прибыльность – отношение STAT_GROSS_PROFIT/STAT_GROSS_LOSS. Если STAT_GROSS_LOSS=0, то прибыльность принимает значение DBL_MAX",
            "en": "Profit factor, equal to  the ratio of STAT_GROSS_PROFIT/STAT_GROSS_LOSS. If STAT_GROSS_LOSS=0, the profit factor is equal to DBL_MAX"
        }
    },
    "STAT_PROFIT_LONGTRADES": {
        "group": 20,
        "label": "STAT_PROFIT_LONGTRADES",
        "body": "STAT_PROFIT_LONGTRADES",
        "code": [
            {
                "label": "STAT_PROFIT_LONGTRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Длинные прибыльные трейды",
            "en": "Profitable long trades"
        }
    },
    "STAT_PROFIT_SHORTTRADES": {
        "group": 20,
        "label": "STAT_PROFIT_SHORTTRADES",
        "body": "STAT_PROFIT_SHORTTRADES",
        "code": [
            {
                "label": "STAT_PROFIT_SHORTTRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Короткие прибыльные трейды",
            "en": "Profitable short trades"
        }
    },
    "STAT_PROFIT_TRADES": {
        "group": 20,
        "label": "STAT_PROFIT_TRADES",
        "body": "STAT_PROFIT_TRADES",
        "code": [
            {
                "label": "STAT_PROFIT_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Прибыльные трейды",
            "en": "Profitable trades"
        }
    },
    "STAT_PROFITTRADES_AVGCON": {
        "group": 20,
        "label": "STAT_PROFITTRADES_AVGCON",
        "body": "STAT_PROFITTRADES_AVGCON",
        "code": [
            {
                "label": "STAT_PROFITTRADES_AVGCON",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Средняя длина прибыльной серии трейдов",
            "en": "Average length of a profitable series of trades"
        }
    },
    "STAT_RECOVERY_FACTOR": {
        "group": 20,
        "label": "STAT_RECOVERY_FACTOR",
        "body": "STAT_RECOVERY_FACTOR",
        "code": [
            {
                "label": "STAT_RECOVERY_FACTOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Фактор восстановления – отношение STAT_PROFIT/STAT_BALANCE_DD",
            "en": "Recovery factor, equal to the ratio of STAT_PROFIT/STAT_BALANCE_DD"
        }
    },
    "STAT_SHARPE_RATIO": {
        "group": 20,
        "label": "STAT_SHARPE_RATIO",
        "body": "STAT_SHARPE_RATIO",
        "code": [
            {
                "label": "STAT_SHARPE_RATIO",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Коэффициент Шарпа",
            "en": "Sharpe ratio"
        }
    },
    "STAT_SHORT_TRADES": {
        "group": 20,
        "label": "STAT_SHORT_TRADES",
        "body": "STAT_SHORT_TRADES",
        "code": [
            {
                "label": "STAT_SHORT_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Короткие трейды",
            "en": "Short trades"
        }
    },
    "STAT_TRADES": {
        "group": 20,
        "label": "STAT_TRADES",
        "body": "STAT_TRADES",
        "code": [
            {
                "label": "STAT_TRADES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество трейдов",
            "en": "The number of trades"
        }
    },
    "STAT_WITHDRAWAL": {
        "group": 20,
        "label": "STAT_WITHDRAWAL",
        "body": "STAT_WITHDRAWAL",
        "code": [
            {
                "label": "STAT_WITHDRAWAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество выведенных со счета средств",
            "en": "Money withdrawn from an account"
        }
    },
    "STO_CLOSECLOSE": {
        "group": 20,
        "label": "STO_CLOSECLOSE",
        "body": "STO_CLOSECLOSE",
        "code": [
            {
                "label": "STO_CLOSECLOSE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Построение по ценам Close/Close",
            "en": "Calculation is based on Close/Close prices"
        }
    },
    "STO_LOWHIGH": {
        "group": 20,
        "label": "STO_LOWHIGH",
        "body": "STO_LOWHIGH",
        "code": [
            {
                "label": "STO_LOWHIGH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Построение по ценам Low/High",
            "en": "Calculation is based on Low/High prices"
        }
    },
    "STYLE_DASH": {
        "group": 20,
        "label": "STYLE_DASH",
        "body": "STYLE_DASH",
        "code": [
            {
                "label": "STYLE_DASH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Прерывистая линия",
            "en": "Broken line"
        }
    },
    "STYLE_DASHDOT": {
        "group": 20,
        "label": "STYLE_DASHDOT",
        "body": "STYLE_DASHDOT",
        "code": [
            {
                "label": "STYLE_DASHDOT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Штрих-пунктирная линия",
            "en": "Dash-dot line"
        }
    },
    "STYLE_DASHDOTDOT": {
        "group": 20,
        "label": "STYLE_DASHDOTDOT",
        "body": "STYLE_DASHDOTDOT",
        "code": [
            {
                "label": "STYLE_DASHDOTDOT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Штрих - две точки",
            "en": "Dash - two points"
        }
    },
    "STYLE_DOT": {
        "group": 20,
        "label": "STYLE_DOT",
        "body": "STYLE_DOT",
        "code": [
            {
                "label": "STYLE_DOT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Пунктирная линия",
            "en": "Dotted line"
        }
    },
    "STYLE_SOLID": {
        "group": 20,
        "label": "STYLE_SOLID",
        "body": "STYLE_SOLID",
        "code": [
            {
                "label": "STYLE_SOLID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Сплошная линия",
            "en": "Solid line"
        }
    },
    "SUNDAY": {
        "group": 20,
        "label": "SUNDAY",
        "body": "SUNDAY",
        "code": [
            {
                "label": "SUNDAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Воскресенье",
            "en": "Sunday"
        }
    },
    "SYMBOL_ASK": {
        "group": 20,
        "label": "SYMBOL_ASK",
        "body": "SYMBOL_ASK",
        "code": [
            {
                "label": "SYMBOL_ASK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ask - лучшее предложение на покупку",
            "en": "Ask - best buy offer"
        }
    },
    "SYMBOL_ASKHIGH": {
        "group": 20,
        "label": "SYMBOL_ASKHIGH",
        "body": "SYMBOL_ASKHIGH",
        "code": [
            {
                "label": "SYMBOL_ASKHIGH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальный Ask за день",
            "en": "Maximal Ask of the day"
        }
    },
    "SYMBOL_ASKLOW": {
        "group": 20,
        "label": "SYMBOL_ASKLOW",
        "body": "SYMBOL_ASKLOW",
        "code": [
            {
                "label": "SYMBOL_ASKLOW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальный Ask за день",
            "en": "Minimal Ask of the day"
        }
    },
    "SYMBOL_BANK": {
        "group": 20,
        "label": "SYMBOL_BANK",
        "body": "SYMBOL_BANK",
        "code": [
            {
                "label": "SYMBOL_BANK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Источник текущей котировки",
            "en": "Feeder of the current quote"
        }
    },
    "SYMBOL_BASIS": {
        "group": 20,
        "label": "SYMBOL_BASIS",
        "body": "SYMBOL_BASIS",
        "code": [
            {
                "label": "SYMBOL_BASIS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя базового актива для производного инструмента",
            "en": "The underlying asset of a derivative"
        }
    },
    "SYMBOL_BID": {
        "group": 20,
        "label": "SYMBOL_BID",
        "body": "SYMBOL_BID",
        "code": [
            {
                "label": "SYMBOL_BID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Bid - лучшее предложение на продажу",
            "en": "Bid - best sell offer"
        }
    },
    "SYMBOL_BIDHIGH": {
        "group": 20,
        "label": "SYMBOL_BIDHIGH",
        "body": "SYMBOL_BIDHIGH",
        "code": [
            {
                "label": "SYMBOL_BIDHIGH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальный Bid за день",
            "en": "Maximal Bid of the day"
        }
    },
    "SYMBOL_BIDLOW": {
        "group": 20,
        "label": "SYMBOL_BIDLOW",
        "body": "SYMBOL_BIDLOW",
        "code": [
            {
                "label": "SYMBOL_BIDLOW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальный Bid за день",
            "en": "Minimal Bid of the day"
        }
    },
    "SYMBOL_CALC_MODE_CFD": {
        "group": 20,
        "label": "SYMBOL_CALC_MODE_CFD",
        "body": "SYMBOL_CALC_MODE_CFD",
        "code": [
            {
                "label": "SYMBOL_CALC_MODE_CFD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "CFD mode – расчет залога и прибыли для CFD",
            "en": "CFD mode - calculation of margin and profit for CFD"
        }
    },
    "SYMBOL_CALC_MODE_CFDINDEX": {
        "group": 20,
        "label": "SYMBOL_CALC_MODE_CFDINDEX",
        "body": "SYMBOL_CALC_MODE_CFDINDEX",
        "code": [
            {
                "label": "SYMBOL_CALC_MODE_CFDINDEX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "CFD index mode – расчет залога и прибыли для CFD на индексы",
            "en": "CFD index mode - calculation of margin and profit for CFD by indexes"
        }
    },
    "SYMBOL_CALC_MODE_CFDLEVERAGE": {
        "group": 20,
        "label": "SYMBOL_CALC_MODE_CFDLEVERAGE",
        "body": "SYMBOL_CALC_MODE_CFDLEVERAGE",
        "code": [
            {
                "label": "SYMBOL_CALC_MODE_CFDLEVERAGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "CFD Leverage mode – расчет залога и прибыли для CFD при торговле с плечом",
            "en": "CFD Leverage mode - calculation of margin and profit for CFD at leverage trading"
        }
    },
    "SYMBOL_CALC_MODE_EXCH_FUTURES": {
        "group": 20,
        "label": "SYMBOL_CALC_MODE_EXCH_FUTURES",
        "body": "SYMBOL_CALC_MODE_EXCH_FUTURES",
        "code": [
            {
                "label": "SYMBOL_CALC_MODE_EXCH_FUTURES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Futures mode –  расчет залога и прибыли для торговли фьючерсными контрактами на бирже",
            "en": "Futures mode –  calculation of margin and profit for trading futures contracts on a stock exchange"
        }
    },
    "SYMBOL_CALC_MODE_EXCH_FUTURES_FORTS": {
        "group": 20,
        "label": "SYMBOL_CALC_MODE_EXCH_FUTURES_FORTS",
        "body": "SYMBOL_CALC_MODE_EXCH_FUTURES_FORTS",
        "code": [
            {
                "label": "SYMBOL_CALC_MODE_EXCH_FUTURES_FORTS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "FORTS Futures mode –  расчет залога и прибыли для торговли фьючерсными контрактами на FORTS.",
            "en": "FORTS Futures mode –  calculation of margin and profit for trading futures contracts on FORTS."
        }
    },
    "SYMBOL_CALC_MODE_EXCH_STOCKS": {
        "group": 20,
        "label": "SYMBOL_CALC_MODE_EXCH_STOCKS",
        "body": "SYMBOL_CALC_MODE_EXCH_STOCKS",
        "code": [
            {
                "label": "SYMBOL_CALC_MODE_EXCH_STOCKS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Exchange mode – расчет залога и прибыли для торговли ценными бумагами на бирже",
            "en": "Exchange mode – calculation of margin and profit for trading securities on a stock exchange"
        }
    },
    "SYMBOL_CALC_MODE_FOREX": {
        "group": 20,
        "label": "SYMBOL_CALC_MODE_FOREX",
        "body": "SYMBOL_CALC_MODE_FOREX",
        "code": [
            {
                "label": "SYMBOL_CALC_MODE_FOREX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Forex mode – расчет прибыли и маржи для Форекс",
            "en": "Forex mode - calculation of profit and margin for Forex"
        }
    },
    "SYMBOL_CALC_MODE_FUTURES": {
        "group": 20,
        "label": "SYMBOL_CALC_MODE_FUTURES",
        "body": "SYMBOL_CALC_MODE_FUTURES",
        "code": [
            {
                "label": "SYMBOL_CALC_MODE_FUTURES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Futures mode – расчет залога и прибыли для фьючерсов",
            "en": "Futures mode - calculation of margin and profit for futures"
        }
    },
    "SYMBOL_CALC_MODE_SERV_COLLATERAL": {
        "group": 20,
        "label": "SYMBOL_CALC_MODE_SERV_COLLATERAL",
        "body": "SYMBOL_CALC_MODE_SERV_COLLATERAL",
        "code": [
            {
                "label": "SYMBOL_CALC_MODE_SERV_COLLATERAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Collateral mode - инструмент используется в качестве неторгуемого актива на торговом счете.",
            "en": "Collateral mode - a symbol is used as a non-tradable asset on a trading account."
        }
    },
    "SYMBOL_CURRENCY_BASE": {
        "group": 20,
        "label": "SYMBOL_CURRENCY_BASE",
        "body": "SYMBOL_CURRENCY_BASE",
        "code": [
            {
                "label": "SYMBOL_CURRENCY_BASE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Базовая валюта инструмента",
            "en": "Basic currency of a symbol"
        }
    },
    "SYMBOL_CURRENCY_MARGIN": {
        "group": 20,
        "label": "SYMBOL_CURRENCY_MARGIN",
        "body": "SYMBOL_CURRENCY_MARGIN",
        "code": [
            {
                "label": "SYMBOL_CURRENCY_MARGIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Валюта в которой вычисляется залоговые средства",
            "en": "Margin currency"
        }
    },
    "SYMBOL_CURRENCY_PROFIT": {
        "group": 20,
        "label": "SYMBOL_CURRENCY_PROFIT",
        "body": "SYMBOL_CURRENCY_PROFIT",
        "code": [
            {
                "label": "SYMBOL_CURRENCY_PROFIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Валюта прибыли",
            "en": "Profit currency"
        }
    },
    "SYMBOL_DESCRIPTION": {
        "group": 20,
        "label": "SYMBOL_DESCRIPTION",
        "body": "SYMBOL_DESCRIPTION",
        "code": [
            {
                "label": "SYMBOL_DESCRIPTION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Строковое описание символа",
            "en": "Symbol description"
        }
    },
    "SYMBOL_DIGITS": {
        "group": 20,
        "label": "SYMBOL_DIGITS",
        "body": "SYMBOL_DIGITS",
        "code": [
            {
                "label": "SYMBOL_DIGITS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество знаков после запятой",
            "en": "Digits after a decimal point"
        }
    },
    "SYMBOL_EXPIRATION_DAY": {
        "group": 20,
        "label": "SYMBOL_EXPIRATION_DAY",
        "body": "SYMBOL_EXPIRATION_DAY",
        "code": [
            {
                "label": "SYMBOL_EXPIRATION_DAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер действителен до конца дня",
            "en": "The order is valid till the end of the day"
        }
    },
    "SYMBOL_EXPIRATION_GTC": {
        "group": 20,
        "label": "SYMBOL_EXPIRATION_GTC",
        "body": "SYMBOL_EXPIRATION_GTC",
        "code": [
            {
                "label": "SYMBOL_EXPIRATION_GTC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер действителен неограниченно по времени до явной его отмены",
            "en": "The order is valid during the unlimited time period, until it is explicitly canceled"
        }
    },
    "SYMBOL_EXPIRATION_MODE": {
        "group": 20,
        "label": "SYMBOL_EXPIRATION_MODE",
        "body": "SYMBOL_EXPIRATION_MODE",
        "code": [
            {
                "label": "SYMBOL_EXPIRATION_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Флаги разрешенных режимов истечения ордера",
            "en": "Flags of allowed order expiration modes"
        }
    },
    "SYMBOL_EXPIRATION_SPECIFIED": {
        "group": 20,
        "label": "SYMBOL_EXPIRATION_SPECIFIED",
        "body": "SYMBOL_EXPIRATION_SPECIFIED",
        "code": [
            {
                "label": "SYMBOL_EXPIRATION_SPECIFIED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Срок истечения указывается в ордере",
            "en": "The expiration time is specified in the order"
        }
    },
    "SYMBOL_EXPIRATION_SPECIFIED_DAY": {
        "group": 20,
        "label": "SYMBOL_EXPIRATION_SPECIFIED_DAY",
        "body": "SYMBOL_EXPIRATION_SPECIFIED_DAY",
        "code": [
            {
                "label": "SYMBOL_EXPIRATION_SPECIFIED_DAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "День истечения указывается в ордере",
            "en": "The expiration date is specified in the order"
        }
    },
    "SYMBOL_EXPIRATION_TIME": {
        "group": 20,
        "label": "SYMBOL_EXPIRATION_TIME",
        "body": "SYMBOL_EXPIRATION_TIME",
        "code": [
            {
                "label": "SYMBOL_EXPIRATION_TIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дата окончания торгов по инструменту (обычно используется для фьючерсов)",
            "en": "Date of the symbol trade end (usually used for futures)"
        }
    },
    "SYMBOL_FILLING_FOK": {
        "group": 20,
        "label": "SYMBOL_FILLING_FOK",
        "body": "SYMBOL_FILLING_FOK",
        "code": [
            {
                "label": "SYMBOL_FILLING_FOK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Данная политика исполнения означает, что ордер может быть исполнен исключительно в указанном объеме. Если на рынке в данный момент не присутствует достаточного объема финансового инструмента, то ордер не будет исполнен. Необходимый объем может быть составлен из нескольких предложений, доступных в данный момент на рынке.",
            "en": "This policy means that a deal can be executed only with the specified volume. If the necessary amount of a financial instrument is currently unavailable in the market, the order will not be executed. The required volume can be filled using several offers available on the market at the moment."
        }
    },
    "SYMBOL_FILLING_IOC": {
        "group": 20,
        "label": "SYMBOL_FILLING_IOC",
        "body": "SYMBOL_FILLING_IOC",
        "code": [
            {
                "label": "SYMBOL_FILLING_IOC",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "В данном случае трейдер соглашается совершить сделку по максимально доступному на рынке объему в пределах указанного в ордере. В случае невозможности полного исполнения ордер будет исполнен на доступный объем, а неисполненный объем ордера будет отменен. Возможность использования IOC ордеров определяется на торговом сервере.",
            "en": "In this case a trader agrees to execute a deal with the volume maximally available in the market within that indicated in the order. In case the order cannot be filled completely, the available volume of the order will be filled, and the remaining volume will be canceled. The possibility of using IOC orders is determined at the trade server."
        }
    },
    "SYMBOL_FILLING_MODE": {
        "group": 20,
        "label": "SYMBOL_FILLING_MODE",
        "body": "SYMBOL_FILLING_MODE",
        "code": [
            {
                "label": "SYMBOL_FILLING_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Флаги разрешенных режимов заливки ордера",
            "en": "Flags of allowed order filling modes"
        }
    },
    "SYMBOL_ISIN": {
        "group": 20,
        "label": "SYMBOL_ISIN",
        "body": "SYMBOL_ISIN",
        "code": [
            {
                "label": "SYMBOL_ISIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя торгового символа в системе международных идентификационных кодов ценных бумаг — ISIN (International Securities Identification Number). Международный идентификационный код ценной бумаги  — это 12-разрядный буквенно-цифровой код, однозначно идентифицирующий ценную бумагу. Наличие данного свойства символа определяется на стороне торгового сервера.",
            "en": "The name of a symbol in the ISIN system (International Securities Identification Number). The International Securities Identification Number is a 12-digit alphanumeric code that uniquely identifies a security. The presence of this symbol property is determined on the side of a trade server."
        }
    },
    "SYMBOL_LAST": {
        "group": 20,
        "label": "SYMBOL_LAST",
        "body": "SYMBOL_LAST",
        "code": [
            {
                "label": "SYMBOL_LAST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена, по которой совершена последняя сделка",
            "en": "Price of the last deal"
        }
    },
    "SYMBOL_LASTHIGH": {
        "group": 20,
        "label": "SYMBOL_LASTHIGH",
        "body": "SYMBOL_LASTHIGH",
        "code": [
            {
                "label": "SYMBOL_LASTHIGH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальный Last за день",
            "en": "Maximal Last of the day"
        }
    },
    "SYMBOL_LASTLOW": {
        "group": 20,
        "label": "SYMBOL_LASTLOW",
        "body": "SYMBOL_LASTLOW",
        "code": [
            {
                "label": "SYMBOL_LASTLOW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальный Last за день",
            "en": "Minimal Last of the day"
        }
    },
    "SYMBOL_MARGIN_INITIAL": {
        "group": 20,
        "label": "SYMBOL_MARGIN_INITIAL",
        "body": "SYMBOL_MARGIN_INITIAL",
        "code": [
            {
                "label": "SYMBOL_MARGIN_INITIAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Начальная (инициирующая) маржа обозначает размер необходимых залоговых средств в маржинальной валюте для открытия позиции объемом в один лот. Используется при проверке средств клиента при входе в рынок.",
            "en": "Initial margin means the amount in the margin currency required for opening a position with the volume of one lot. It is used for checking a client's assets when he or she enters the market."
        }
    },
    "SYMBOL_MARGIN_MAINTENANCE": {
        "group": 20,
        "label": "SYMBOL_MARGIN_MAINTENANCE",
        "body": "SYMBOL_MARGIN_MAINTENANCE",
        "code": [
            {
                "label": "SYMBOL_MARGIN_MAINTENANCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Поддерживающая маржа по инструменту. В случае если задана – указывает размер маржи в маржинальной валюте инструмента, удерживаемой с одного лота. Используется при проверке средств клиента при изменении состояния счета клиента. Если поддерживающая маржа равна 0, то используется начальная маржа.",
            "en": "The maintenance margin. If it is set, it sets the margin amount in the margin currency of the symbol, charged from one lot. It is used for checking a client's assets when his/her account state changes. If the maintenance margin is equal to 0, the initial margin is used."
        }
    },
    "SYMBOL_OPTION_MODE": {
        "group": 20,
        "label": "SYMBOL_OPTION_MODE",
        "body": "SYMBOL_OPTION_MODE",
        "code": [
            {
                "label": "SYMBOL_OPTION_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип опциона",
            "en": "Option type"
        }
    },
    "SYMBOL_OPTION_MODE_EUROPEAN": {
        "group": 20,
        "label": "SYMBOL_OPTION_MODE_EUROPEAN",
        "body": "SYMBOL_OPTION_MODE_EUROPEAN",
        "code": [
            {
                "label": "SYMBOL_OPTION_MODE_EUROPEAN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Европейский тип опциона – может быть погашен только в указанную дату (дата истечения срока, дата исполнения, дата погашения)",
            "en": "European option may only be exercised on a specified date (expiration, execution date, delivery date)"
        }
    },
    "SYMBOL_OPTION_MODE_AMERICAN": {
        "group": 20,
        "label": "SYMBOL_OPTION_MODE_AMERICAN",
        "body": "SYMBOL_OPTION_MODE_AMERICAN",
        "code": [
            {
                "label": "SYMBOL_OPTION_MODE_AMERICAN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Американский тип опциона – может быть погашен в любой день до истечения срока опциона. Для такого типа задаётся период, в течение которого покупатель может исполнить данный опцион",
            "en": "American option may be exercised on any trading day on or before expiry. The period within which a buyer can exercise the option is specified for it"
        }
    },
    "SYMBOL_OPTION_RIGHT": {
        "group": 20,
        "label": "SYMBOL_OPTION_RIGHT",
        "body": "SYMBOL_OPTION_RIGHT",
        "code": [
            {
                "label": "SYMBOL_OPTION_RIGHT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Право опциона (Call/Put)",
            "en": "Option right (Call/Put)"
        }
    },
    "SYMBOL_OPTION_RIGHT_CALL": {
        "group": 20,
        "label": "SYMBOL_OPTION_RIGHT_CALL",
        "body": "SYMBOL_OPTION_RIGHT_CALL",
        "code": [
            {
                "label": "SYMBOL_OPTION_RIGHT_CALL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Опцион, дающий право купить актив по фиксированной цене",
            "en": "A call option gives you the right to buy an asset at a specified price"
        }
    },
    "SYMBOL_OPTION_RIGHT_PUT": {
        "group": 20,
        "label": "SYMBOL_OPTION_RIGHT_PUT",
        "body": "SYMBOL_OPTION_RIGHT_PUT",
        "code": [
            {
                "label": "SYMBOL_OPTION_RIGHT_PUT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Опцион, дающий право продать актив по фиксированной цене",
            "en": "A put option gives you the right to sell an asset at a specified price"
        }
    },
    "SYMBOL_OPTION_STRIKE": {
        "group": 20,
        "label": "SYMBOL_OPTION_STRIKE",
        "body": "SYMBOL_OPTION_STRIKE",
        "code": [
            {
                "label": "SYMBOL_OPTION_STRIKE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена исполнения опциона. Это цена, по которой покупатель опциона может купить (при опционе Call) или продать (при опционе Put) базовый актив, а продавец опциона соответственно обязан продать или купить соответствующее количество базового актива.",
            "en": "The strike price of an option. The price at which an option buyer can buy (in a Call option) or sell (in a Put option) the underlying asset, and the option seller is obliged to sell or buy the appropriate amount of the underlying asset."
        }
    },
    "SYMBOL_ORDER_LIMIT": {
        "group": 20,
        "label": "SYMBOL_ORDER_LIMIT",
        "body": "SYMBOL_ORDER_LIMIT",
        "code": [
            {
                "label": "SYMBOL_ORDER_LIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешены лимитные ордера (Buy Limit и Sell Limit)",
            "en": "Limit orders are allowed (Buy Limit and Sell Limit)"
        }
    },
    "SYMBOL_ORDER_MARKET": {
        "group": 20,
        "label": "SYMBOL_ORDER_MARKET",
        "body": "SYMBOL_ORDER_MARKET",
        "code": [
            {
                "label": "SYMBOL_ORDER_MARKET",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешены рыночные ордера (Buy и Sell)",
            "en": "Market orders are allowed (Buy and Sell)"
        }
    },
    "SYMBOL_ORDER_MODE": {
        "group": 20,
        "label": "SYMBOL_ORDER_MODE",
        "body": "SYMBOL_ORDER_MODE",
        "code": [
            {
                "label": "SYMBOL_ORDER_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Флаги разрешенных типов ордера",
            "en": "Flags of allowed order types"
        }
    },
    "SYMBOL_ORDER_SL": {
        "group": 20,
        "label": "SYMBOL_ORDER_SL",
        "body": "SYMBOL_ORDER_SL",
        "code": [
            {
                "label": "SYMBOL_ORDER_SL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешена установка Stop Loss",
            "en": "Stop Loss is allowed"
        }
    },
    "SYMBOL_ORDER_STOP": {
        "group": 20,
        "label": "SYMBOL_ORDER_STOP",
        "body": "SYMBOL_ORDER_STOP",
        "code": [
            {
                "label": "SYMBOL_ORDER_STOP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешены стоп-ордера (Buy Stop и Sell Stop)",
            "en": "Stop orders are allowed (Buy Stop and Sell Stop)"
        }
    },
    "SYMBOL_ORDER_STOP_LIMIT": {
        "group": 20,
        "label": "SYMBOL_ORDER_STOP_LIMIT",
        "body": "SYMBOL_ORDER_STOP_LIMIT",
        "code": [
            {
                "label": "SYMBOL_ORDER_STOP_LIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешены стоп-лимит ордера (Buy Stop Limit и Sell Stop Limit)",
            "en": "Stop-limit orders are allowed (Buy Stop Limit and Sell Stop Limit)"
        }
    },
    "SYMBOL_ORDER_TP": {
        "group": 20,
        "label": "SYMBOL_ORDER_TP",
        "body": "SYMBOL_ORDER_TP",
        "code": [
            {
                "label": "SYMBOL_ORDER_TP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешена установка Take Profit",
            "en": "Take Profit is allowed"
        }
    },
    "SYMBOL_PATH": {
        "group": 20,
        "label": "SYMBOL_PATH",
        "body": "SYMBOL_PATH",
        "code": [
            {
                "label": "SYMBOL_PATH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Путь в дереве символов",
            "en": "Path in the symbol tree"
        }
    },
    "SYMBOL_POINT": {
        "group": 20,
        "label": "SYMBOL_POINT",
        "body": "SYMBOL_POINT",
        "code": [
            {
                "label": "SYMBOL_POINT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение одного пункта",
            "en": "Symbol point value"
        }
    },
    "SYMBOL_SELECT": {
        "group": 20,
        "label": "SYMBOL_SELECT",
        "body": "SYMBOL_SELECT",
        "code": [
            {
                "label": "SYMBOL_SELECT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак того, что символ выбран в Market Watch",
            "en": "Symbol is selected in Market Watch"
        }
    },
    "SYMBOL_SESSION_AW": {
        "group": 20,
        "label": "SYMBOL_SESSION_AW",
        "body": "SYMBOL_SESSION_AW",
        "code": [
            {
                "label": "SYMBOL_SESSION_AW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Средневзвешенная цена сессии",
            "en": "Average weighted price of the current session"
        }
    },
    "SYMBOL_SESSION_BUY_ORDERS": {
        "group": 20,
        "label": "SYMBOL_SESSION_BUY_ORDERS",
        "body": "SYMBOL_SESSION_BUY_ORDERS",
        "code": [
            {
                "label": "SYMBOL_SESSION_BUY_ORDERS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общее число ордеров на покупку в текущий момент",
            "en": "Number of Buy orders at the moment"
        }
    },
    "SYMBOL_SESSION_BUY_ORDERS_VOLUME": {
        "group": 20,
        "label": "SYMBOL_SESSION_BUY_ORDERS_VOLUME",
        "body": "SYMBOL_SESSION_BUY_ORDERS_VOLUME",
        "code": [
            {
                "label": "SYMBOL_SESSION_BUY_ORDERS_VOLUME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общий объём ордеров на покупку в текущий момент",
            "en": "Current volume of Buy orders"
        }
    },
    "SYMBOL_SESSION_CLOSE": {
        "group": 20,
        "label": "SYMBOL_SESSION_CLOSE",
        "body": "SYMBOL_SESSION_CLOSE",
        "code": [
            {
                "label": "SYMBOL_SESSION_CLOSE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена закрытия сессии",
            "en": "Close price of the current session"
        }
    },
    "SYMBOL_SESSION_DEALS": {
        "group": 20,
        "label": "SYMBOL_SESSION_DEALS",
        "body": "SYMBOL_SESSION_DEALS",
        "code": [
            {
                "label": "SYMBOL_SESSION_DEALS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество сделок в текущей сессии",
            "en": "Number of deals in the current session"
        }
    },
    "SYMBOL_SESSION_INTEREST": {
        "group": 20,
        "label": "SYMBOL_SESSION_INTEREST",
        "body": "SYMBOL_SESSION_INTEREST",
        "code": [
            {
                "label": "SYMBOL_SESSION_INTEREST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Cуммарный объём открытых позиций",
            "en": "Summary open interest"
        }
    },
    "SYMBOL_SESSION_OPEN": {
        "group": 20,
        "label": "SYMBOL_SESSION_OPEN",
        "body": "SYMBOL_SESSION_OPEN",
        "code": [
            {
                "label": "SYMBOL_SESSION_OPEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена открытия сессии",
            "en": "Open price of the current session"
        }
    },
    "SYMBOL_SESSION_PRICE_LIMIT_MAX": {
        "group": 20,
        "label": "SYMBOL_SESSION_PRICE_LIMIT_MAX",
        "body": "SYMBOL_SESSION_PRICE_LIMIT_MAX",
        "code": [
            {
                "label": "SYMBOL_SESSION_PRICE_LIMIT_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимально допустимое значение цены на сессию",
            "en": "Maximal price of the current session"
        }
    },
    "SYMBOL_SESSION_PRICE_LIMIT_MIN": {
        "group": 20,
        "label": "SYMBOL_SESSION_PRICE_LIMIT_MIN",
        "body": "SYMBOL_SESSION_PRICE_LIMIT_MIN",
        "code": [
            {
                "label": "SYMBOL_SESSION_PRICE_LIMIT_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимально допустимое значение цены на сессию",
            "en": "Minimal price of the current session"
        }
    },
    "SYMBOL_SESSION_PRICE_SETTLEMENT": {
        "group": 20,
        "label": "SYMBOL_SESSION_PRICE_SETTLEMENT",
        "body": "SYMBOL_SESSION_PRICE_SETTLEMENT",
        "code": [
            {
                "label": "SYMBOL_SESSION_PRICE_SETTLEMENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цена поставки на текущую сессию",
            "en": "Settlement price of the current session"
        }
    },
    "SYMBOL_SESSION_SELL_ORDERS": {
        "group": 20,
        "label": "SYMBOL_SESSION_SELL_ORDERS",
        "body": "SYMBOL_SESSION_SELL_ORDERS",
        "code": [
            {
                "label": "SYMBOL_SESSION_SELL_ORDERS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общее число ордеров на продажу в текущий момент",
            "en": "Number of Sell orders at the moment"
        }
    },
    "SYMBOL_SESSION_SELL_ORDERS_VOLUME": {
        "group": 20,
        "label": "SYMBOL_SESSION_SELL_ORDERS_VOLUME",
        "body": "SYMBOL_SESSION_SELL_ORDERS_VOLUME",
        "code": [
            {
                "label": "SYMBOL_SESSION_SELL_ORDERS_VOLUME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общий объём ордеров на продажу в текущий момент",
            "en": "Current volume of Sell orders"
        }
    },
    "SYMBOL_SESSION_TURNOVER": {
        "group": 20,
        "label": "SYMBOL_SESSION_TURNOVER",
        "body": "SYMBOL_SESSION_TURNOVER",
        "code": [
            {
                "label": "SYMBOL_SESSION_TURNOVER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Cуммарный оборот в текущую сессию",
            "en": "Summary turnover of the current session"
        }
    },
    "SYMBOL_SESSION_VOLUME": {
        "group": 20,
        "label": "SYMBOL_SESSION_VOLUME",
        "body": "SYMBOL_SESSION_VOLUME",
        "code": [
            {
                "label": "SYMBOL_SESSION_VOLUME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Cуммарный объём сделок в текущую сессию",
            "en": "Summary volume of current session deals"
        }
    },
    "SYMBOL_SPREAD": {
        "group": 20,
        "label": "SYMBOL_SPREAD",
        "body": "SYMBOL_SPREAD",
        "code": [
            {
                "label": "SYMBOL_SPREAD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер спреда в пунктах",
            "en": "Spread value in points"
        }
    },
    "SYMBOL_SPREAD_FLOAT": {
        "group": 20,
        "label": "SYMBOL_SPREAD_FLOAT",
        "body": "SYMBOL_SPREAD_FLOAT",
        "code": [
            {
                "label": "SYMBOL_SPREAD_FLOAT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак плавающего спреда",
            "en": "Indication of a floating spread"
        }
    },
    "SYMBOL_START_TIME": {
        "group": 20,
        "label": "SYMBOL_START_TIME",
        "body": "SYMBOL_START_TIME",
        "code": [
            {
                "label": "SYMBOL_START_TIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дата начала торгов по инструменту (обычно используется для фьючерсов)",
            "en": "Date of the symbol trade beginning (usually used for futures)"
        }
    },
    "SYMBOL_SWAP_LONG": {
        "group": 20,
        "label": "SYMBOL_SWAP_LONG",
        "body": "SYMBOL_SWAP_LONG",
        "code": [
            {
                "label": "SYMBOL_SWAP_LONG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение свопа в покупку",
            "en": "Long swap value"
        }
    },
    "SYMBOL_SWAP_MODE": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE",
        "body": "SYMBOL_SWAP_MODE",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Модель расчета свопа",
            "en": "Swap calculation model"
        }
    },
    "SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT",
        "body": "SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Свопы начисляются в деньгах в валюте депозита клиента",
            "en": "Swaps are charged in money, in client deposit currency"
        }
    },
    "SYMBOL_SWAP_MODE_CURRENCY_MARGIN": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE_CURRENCY_MARGIN",
        "body": "SYMBOL_SWAP_MODE_CURRENCY_MARGIN",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE_CURRENCY_MARGIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Свопы начисляются в деньгах в маржинальной валюте символа",
            "en": "Swaps are charged in money in margin currency of the symbol"
        }
    },
    "SYMBOL_SWAP_MODE_CURRENCY_SYMBOL": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE_CURRENCY_SYMBOL",
        "body": "SYMBOL_SWAP_MODE_CURRENCY_SYMBOL",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE_CURRENCY_SYMBOL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Свопы начисляются в деньгах в базовой валюте символа",
            "en": "Swaps are charged in money in base currency of the symbol"
        }
    },
    "SYMBOL_SWAP_MODE_DISABLED": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE_DISABLED",
        "body": "SYMBOL_SWAP_MODE_DISABLED",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE_DISABLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нет свопов",
            "en": "Swaps disabled (no swaps)"
        }
    },
    "SYMBOL_SWAP_MODE_INTEREST_CURRENT": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE_INTEREST_CURRENT",
        "body": "SYMBOL_SWAP_MODE_INTEREST_CURRENT",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE_INTEREST_CURRENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Свопы начисляются в годовых процентах от цены инструмента на момент расчета свопа(банковский режим – 360 дней в году)",
            "en": "Swaps are charged as the specified annual interest from the instrument price at calculation of swap (standard bank year is 360 days)"
        }
    },
    "SYMBOL_SWAP_MODE_INTEREST_OPEN": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE_INTEREST_OPEN",
        "body": "SYMBOL_SWAP_MODE_INTEREST_OPEN",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE_INTEREST_OPEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Свопы начисляются в годовых процентах от цены открытия позиции по символу (банковский режим – 360 дней в году)",
            "en": "Swaps are charged as the specified annual interest from the open price of position (standard bank year is 360 days)"
        }
    },
    "SYMBOL_SWAP_MODE_POINTS": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE_POINTS",
        "body": "SYMBOL_SWAP_MODE_POINTS",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE_POINTS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Свопы начисляются в пунктах",
            "en": "Swaps are charged in points"
        }
    },
    "SYMBOL_SWAP_MODE_REOPEN_BID": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE_REOPEN_BID",
        "body": "SYMBOL_SWAP_MODE_REOPEN_BID",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE_REOPEN_BID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Свопы начисляются переоткрытием позиции. В конце торгового дня позиция принудительно закрывается. На следующий день позиция переоткрывается по текущей цене Bid +/- указанное количество пунктов (в параметрах SYMBOL_SWAP_LONG и SYMBOL_SWAP_SHORT)",
            "en": "Swaps are charged by reopening positions. At the end of a trading day the position is closed. Next day it is reopened by the current Bid price +/- specified number of points (parameters SYMBOL_SWAP_LONG and SYMBOL_SWAP_SHORT)"
        }
    },
    "SYMBOL_SWAP_MODE_REOPEN_CURRENT": {
        "group": 20,
        "label": "SYMBOL_SWAP_MODE_REOPEN_CURRENT",
        "body": "SYMBOL_SWAP_MODE_REOPEN_CURRENT",
        "code": [
            {
                "label": "SYMBOL_SWAP_MODE_REOPEN_CURRENT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Свопы начисляются переоткрытием позиции. В конце торгового дня позиция принудительно закрывается. На следующий день позиция переоткрывается по цене закрытия +/- указанное количество пунктов (в параметрах SYMBOL_SWAP_LONG и SYMBOL_SWAP_SHORT)",
            "en": "Swaps are charged by reopening positions. At the end of a trading day the position is closed. Next day it is reopened by the close price +/- specified number of points (parameters SYMBOL_SWAP_LONG and SYMBOL_SWAP_SHORT)"
        }
    },
    "SYMBOL_SWAP_ROLLOVER3DAYS": {
        "group": 20,
        "label": "SYMBOL_SWAP_ROLLOVER3DAYS",
        "body": "SYMBOL_SWAP_ROLLOVER3DAYS",
        "code": [
            {
                "label": "SYMBOL_SWAP_ROLLOVER3DAYS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "День недели для начисления тройного свопа",
            "en": "Day of week to charge 3 days swap rollover"
        }
    },
    "SYMBOL_SWAP_SHORT": {
        "group": 20,
        "label": "SYMBOL_SWAP_SHORT",
        "body": "SYMBOL_SWAP_SHORT",
        "code": [
            {
                "label": "SYMBOL_SWAP_SHORT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение свопа в продажу",
            "en": "Short swap value"
        }
    },
    "SYMBOL_TICKS_BOOKDEPTH": {
        "group": 20,
        "label": "SYMBOL_TICKS_BOOKDEPTH",
        "body": "SYMBOL_TICKS_BOOKDEPTH",
        "code": [
            {
                "label": "SYMBOL_TICKS_BOOKDEPTH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное количество показываемых заявок в стакане. Для инструментов, не имеющих очереди заявок, значение равно 0",
            "en": "Maximal number of requests shown in Depth of Market. For symbols that have no queue of requests, the value is equal to zero."
        }
    },
    "SYMBOL_TIME": {
        "group": 20,
        "label": "SYMBOL_TIME",
        "body": "SYMBOL_TIME",
        "code": [
            {
                "label": "SYMBOL_TIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Время последней котировки",
            "en": "Time of the last quote"
        }
    },
    "SYMBOL_TRADE_CALC_MODE": {
        "group": 20,
        "label": "SYMBOL_TRADE_CALC_MODE",
        "body": "SYMBOL_TRADE_CALC_MODE",
        "code": [
            {
                "label": "SYMBOL_TRADE_CALC_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Способ вычисления стоимости контракта",
            "en": "Contract price calculation mode"
        }
    },
    "SYMBOL_TRADE_CONTRACT_SIZE": {
        "group": 20,
        "label": "SYMBOL_TRADE_CONTRACT_SIZE",
        "body": "SYMBOL_TRADE_CONTRACT_SIZE",
        "code": [
            {
                "label": "SYMBOL_TRADE_CONTRACT_SIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер торгового контракта",
            "en": "Trade contract size"
        }
    },
    "SYMBOL_TRADE_EXECUTION_EXCHANGE": {
        "group": 20,
        "label": "SYMBOL_TRADE_EXECUTION_EXCHANGE",
        "body": "SYMBOL_TRADE_EXECUTION_EXCHANGE",
        "code": [
            {
                "label": "SYMBOL_TRADE_EXECUTION_EXCHANGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Биржевое исполнение",
            "en": "Exchange execution"
        }
    },
    "SYMBOL_TRADE_EXECUTION_INSTANT": {
        "group": 20,
        "label": "SYMBOL_TRADE_EXECUTION_INSTANT",
        "body": "SYMBOL_TRADE_EXECUTION_INSTANT",
        "code": [
            {
                "label": "SYMBOL_TRADE_EXECUTION_INSTANT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Торговля по потоковым ценам",
            "en": "Instant execution"
        }
    },
    "SYMBOL_TRADE_EXECUTION_MARKET": {
        "group": 20,
        "label": "SYMBOL_TRADE_EXECUTION_MARKET",
        "body": "SYMBOL_TRADE_EXECUTION_MARKET",
        "code": [
            {
                "label": "SYMBOL_TRADE_EXECUTION_MARKET",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Исполнение ордеров по рынку",
            "en": "Market execution"
        }
    },
    "SYMBOL_TRADE_EXECUTION_REQUEST": {
        "group": 20,
        "label": "SYMBOL_TRADE_EXECUTION_REQUEST",
        "body": "SYMBOL_TRADE_EXECUTION_REQUEST",
        "code": [
            {
                "label": "SYMBOL_TRADE_EXECUTION_REQUEST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Торговля по запросу",
            "en": "Execution by request"
        }
    },
    "SYMBOL_TRADE_EXEMODE": {
        "group": 20,
        "label": "SYMBOL_TRADE_EXEMODE",
        "body": "SYMBOL_TRADE_EXEMODE",
        "code": [
            {
                "label": "SYMBOL_TRADE_EXEMODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Режим заключения сделок",
            "en": "Deal execution mode"
        }
    },
    "SYMBOL_TRADE_FREEZE_LEVEL": {
        "group": 20,
        "label": "SYMBOL_TRADE_FREEZE_LEVEL",
        "body": "SYMBOL_TRADE_FREEZE_LEVEL",
        "code": [
            {
                "label": "SYMBOL_TRADE_FREEZE_LEVEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Дистанция заморозки торговых операций (в пунктах)",
            "en": "Distance to freeze trade operations in points"
        }
    },
    "SYMBOL_TRADE_MODE": {
        "group": 20,
        "label": "SYMBOL_TRADE_MODE",
        "body": "SYMBOL_TRADE_MODE",
        "code": [
            {
                "label": "SYMBOL_TRADE_MODE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип исполнения ордеров",
            "en": "Order execution type"
        }
    },
    "SYMBOL_TRADE_MODE_CLOSEONLY": {
        "group": 20,
        "label": "SYMBOL_TRADE_MODE_CLOSEONLY",
        "body": "SYMBOL_TRADE_MODE_CLOSEONLY",
        "code": [
            {
                "label": "SYMBOL_TRADE_MODE_CLOSEONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешены только операции закрытия позиций",
            "en": "Allowed only position close operations"
        }
    },
    "SYMBOL_TRADE_MODE_DISABLED": {
        "group": 20,
        "label": "SYMBOL_TRADE_MODE_DISABLED",
        "body": "SYMBOL_TRADE_MODE_DISABLED",
        "code": [
            {
                "label": "SYMBOL_TRADE_MODE_DISABLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Торговля по символу запрещена",
            "en": "Trade is disabled for the symbol"
        }
    },
    "SYMBOL_TRADE_MODE_FULL": {
        "group": 20,
        "label": "SYMBOL_TRADE_MODE_FULL",
        "body": "SYMBOL_TRADE_MODE_FULL",
        "code": [
            {
                "label": "SYMBOL_TRADE_MODE_FULL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нет ограничений на торговые операции",
            "en": "No trade restrictions"
        }
    },
    "SYMBOL_TRADE_MODE_LONGONLY": {
        "group": 20,
        "label": "SYMBOL_TRADE_MODE_LONGONLY",
        "body": "SYMBOL_TRADE_MODE_LONGONLY",
        "code": [
            {
                "label": "SYMBOL_TRADE_MODE_LONGONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешены только покупки",
            "en": "Allowed only long positions"
        }
    },
    "SYMBOL_TRADE_MODE_SHORTONLY": {
        "group": 20,
        "label": "SYMBOL_TRADE_MODE_SHORTONLY",
        "body": "SYMBOL_TRADE_MODE_SHORTONLY",
        "code": [
            {
                "label": "SYMBOL_TRADE_MODE_SHORTONLY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешены только продажи",
            "en": "Allowed only short positions"
        }
    },
    "SYMBOL_TRADE_STOPS_LEVEL": {
        "group": 20,
        "label": "SYMBOL_TRADE_STOPS_LEVEL",
        "body": "SYMBOL_TRADE_STOPS_LEVEL",
        "code": [
            {
                "label": "SYMBOL_TRADE_STOPS_LEVEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальный отступ в пунктах от текущей цены закрытия для установки Stop ордеров",
            "en": "Minimal indention in points from the current close price to place Stop orders"
        }
    },
    "SYMBOL_TRADE_TICK_SIZE": {
        "group": 20,
        "label": "SYMBOL_TRADE_TICK_SIZE",
        "body": "SYMBOL_TRADE_TICK_SIZE",
        "code": [
            {
                "label": "SYMBOL_TRADE_TICK_SIZE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальное изменение цены",
            "en": "Minimal price change"
        }
    },
    "SYMBOL_TRADE_TICK_VALUE": {
        "group": 20,
        "label": "SYMBOL_TRADE_TICK_VALUE",
        "body": "SYMBOL_TRADE_TICK_VALUE",
        "code": [
            {
                "label": "SYMBOL_TRADE_TICK_VALUE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Значение SYMBOL_TRADE_TICK_VALUE_PROFIT",
            "en": "Value of SYMBOL_TRADE_TICK_VALUE_PROFIT"
        }
    },
    "SYMBOL_TRADE_TICK_VALUE_LOSS": {
        "group": 20,
        "label": "SYMBOL_TRADE_TICK_VALUE_LOSS",
        "body": "SYMBOL_TRADE_TICK_VALUE_LOSS",
        "code": [
            {
                "label": "SYMBOL_TRADE_TICK_VALUE_LOSS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Рассчитанная стоимость тика для убыточной позиции",
            "en": "Calculated tick price for a losing position"
        }
    },
    "SYMBOL_TRADE_TICK_VALUE_PROFIT": {
        "group": 20,
        "label": "SYMBOL_TRADE_TICK_VALUE_PROFIT",
        "body": "SYMBOL_TRADE_TICK_VALUE_PROFIT",
        "code": [
            {
                "label": "SYMBOL_TRADE_TICK_VALUE_PROFIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Рассчитанная стоимость тика для прибыльной позиции",
            "en": "Calculated tick price for a profitable position"
        }
    },
    "SYMBOL_VOLUME": {
        "group": 20,
        "label": "SYMBOL_VOLUME",
        "body": "SYMBOL_VOLUME",
        "code": [
            {
                "label": "SYMBOL_VOLUME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Volume - объем в последней сделке",
            "en": "Volume of the last deal"
        }
    },
    "SYMBOL_VOLUME_LIMIT": {
        "group": 20,
        "label": "SYMBOL_VOLUME_LIMIT",
        "body": "SYMBOL_VOLUME_LIMIT",
        "code": [
            {
                "label": "SYMBOL_VOLUME_LIMIT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимально допустимый для данного символа совокупный объем открытой позиции и отложенных ордеров  в одном направлении (покупка или продажа). Например, при ограничении в 5 лотов можно иметь открытую позицию на покупку объемом 5 лотов и выставить отложенный ордер Sell Limit объемом 5 лотов. Но при этом нельзя выставить отложенный ордер Buy Limit (поскольку совокупный объем в одном направлении превысит ограничение) или выставить Sell Limit объемом более 5 лотов.",
            "en": "Maximum allowed aggregate volume of an open position and pending orders in one direction (buy or sell) for the symbol. For example, with the limitation of 5 lots, you can have an open buy position with the volume of 5 lots and place a pending order Sell Limit with the volume of 5 lots. But in this case you cannot place a Buy Limit pending order (since the total volume in one direction will exceed the limitation) or place Sell Limit with the volume more than 5 lots."
        }
    },
    "SYMBOL_VOLUME_MAX": {
        "group": 20,
        "label": "SYMBOL_VOLUME_MAX",
        "body": "SYMBOL_VOLUME_MAX",
        "code": [
            {
                "label": "SYMBOL_VOLUME_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальный объем для заключения сделки",
            "en": "Maximal volume for a deal"
        }
    },
    "SYMBOL_VOLUME_MIN": {
        "group": 20,
        "label": "SYMBOL_VOLUME_MIN",
        "body": "SYMBOL_VOLUME_MIN",
        "code": [
            {
                "label": "SYMBOL_VOLUME_MIN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальный объем для заключения сделки",
            "en": "Minimal volume for a deal"
        }
    },
    "SYMBOL_VOLUME_STEP": {
        "group": 20,
        "label": "SYMBOL_VOLUME_STEP",
        "body": "SYMBOL_VOLUME_STEP",
        "code": [
            {
                "label": "SYMBOL_VOLUME_STEP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальный шаг изменения объема для заключения сделки",
            "en": "Minimal volume change step for deal execution"
        }
    },
    "SYMBOL_VOLUMEHIGH": {
        "group": 20,
        "label": "SYMBOL_VOLUMEHIGH",
        "body": "SYMBOL_VOLUMEHIGH",
        "code": [
            {
                "label": "SYMBOL_VOLUMEHIGH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальный Volume за день",
            "en": "Maximal day volume"
        }
    },
    "SYMBOL_VOLUMELOW": {
        "group": 20,
        "label": "SYMBOL_VOLUMELOW",
        "body": "SYMBOL_VOLUMELOW",
        "code": [
            {
                "label": "SYMBOL_VOLUMELOW",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Минимальный Volume за день",
            "en": "Minimal day volume"
        }
    },
    "TENKANSEN_LINE": {
        "group": 20,
        "label": "TENKANSEN_LINE",
        "body": "TENKANSEN_LINE",
        "code": [
            {
                "label": "TENKANSEN_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Линия Tenkan-sen",
            "en": "Tenkan-sen line"
        }
    },
    "TERMINAL_BUILD": {
        "group": 20,
        "label": "TERMINAL_BUILD",
        "body": "TERMINAL_BUILD",
        "code": [
            {
                "label": "TERMINAL_BUILD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Номер билда запущенного терминала",
            "en": "The client terminal build number"
        }
    },
    "TERMINAL_CODEPAGE": {
        "group": 20,
        "label": "TERMINAL_CODEPAGE",
        "body": "TERMINAL_CODEPAGE",
        "code": [
            {
                "label": "TERMINAL_CODEPAGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Номер кодовой страницы языка, установленного в клиентском терминале",
            "en": "Number of the code page of the language installed in the client terminal"
        }
    },
    "TERMINAL_COMMONDATA_PATH": {
        "group": 20,
        "label": "TERMINAL_COMMONDATA_PATH",
        "body": "TERMINAL_COMMONDATA_PATH",
        "code": [
            {
                "label": "TERMINAL_COMMONDATA_PATH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Общая папка всех клиентских терминалов, установленных на компьютере",
            "en": "Common path for all of the terminals installed on a computer"
        }
    },
    "TERMINAL_COMMUNITY_ACCOUNT": {
        "group": 20,
        "label": "TERMINAL_COMMUNITY_ACCOUNT",
        "body": "TERMINAL_COMMUNITY_ACCOUNT",
        "code": [
            {
                "label": "TERMINAL_COMMUNITY_ACCOUNT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Флаг наличия авторизационных данных MQL5.community в терминале",
            "en": "The flag indicates the presence of MQL5.community authorization data in the terminal"
        }
    },
    "TERMINAL_COMMUNITY_BALANCE": {
        "group": 20,
        "label": "TERMINAL_COMMUNITY_BALANCE",
        "body": "TERMINAL_COMMUNITY_BALANCE",
        "code": [
            {
                "label": "TERMINAL_COMMUNITY_BALANCE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Баланс пользователя в MQL5.community",
            "en": "Balance in MQL5.community"
        }
    },
    "TERMINAL_COMMUNITY_CONNECTION": {
        "group": 20,
        "label": "TERMINAL_COMMUNITY_CONNECTION",
        "body": "TERMINAL_COMMUNITY_CONNECTION",
        "code": [
            {
                "label": "TERMINAL_COMMUNITY_CONNECTION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Наличие подключения к MQL5.community",
            "en": "Connection to MQL5.community"
        }
    },
    "TERMINAL_COMPANY": {
        "group": 20,
        "label": "TERMINAL_COMPANY",
        "body": "TERMINAL_COMPANY",
        "code": [
            {
                "label": "TERMINAL_COMPANY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя компании",
            "en": "Company name"
        }
    },
    "TERMINAL_CONNECTED": {
        "group": 20,
        "label": "TERMINAL_CONNECTED",
        "body": "TERMINAL_CONNECTED",
        "code": [
            {
                "label": "TERMINAL_CONNECTED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Наличие подключения к торговому серверу",
            "en": "Connection to a trade server"
        }
    },
    "TERMINAL_CPU_CORES": {
        "group": 20,
        "label": "TERMINAL_CPU_CORES",
        "body": "TERMINAL_CPU_CORES",
        "code": [
            {
                "label": "TERMINAL_CPU_CORES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество процессоров в системе",
            "en": "The number of CPU cores in the system"
        }
    },
    "TERMINAL_DATA_PATH": {
        "group": 20,
        "label": "TERMINAL_DATA_PATH",
        "body": "TERMINAL_DATA_PATH",
        "code": [
            {
                "label": "TERMINAL_DATA_PATH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Папка, в которой хранятся данные терминала",
            "en": "Folder in which terminal data are stored"
        }
    },
    "TERMINAL_DISK_SPACE": {
        "group": 20,
        "label": "TERMINAL_DISK_SPACE",
        "body": "TERMINAL_DISK_SPACE",
        "code": [
            {
                "label": "TERMINAL_DISK_SPACE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объем свободной памяти на диске для папки MQL5\\Files терминала (агента), в MB",
            "en": "Free disk space for the MQL5\\Files folder of the terminal (agent), MB"
        }
    },
    "TERMINAL_DLLS_ALLOWED": {
        "group": 20,
        "label": "TERMINAL_DLLS_ALLOWED",
        "body": "TERMINAL_DLLS_ALLOWED",
        "code": [
            {
                "label": "TERMINAL_DLLS_ALLOWED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешение на использование DLL",
            "en": "Permission to use DLL"
        }
    },
    "TERMINAL_EMAIL_ENABLED": {
        "group": 20,
        "label": "TERMINAL_EMAIL_ENABLED",
        "body": "TERMINAL_EMAIL_ENABLED",
        "code": [
            {
                "label": "TERMINAL_EMAIL_ENABLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешение на отправку писем с использованием SMTP-сервера и логина, указанных в настройках терминала",
            "en": "Permission to send e-mails using SMTP-server and login, specified in the terminal settings"
        }
    },
    "TERMINAL_FTP_ENABLED": {
        "group": 20,
        "label": "TERMINAL_FTP_ENABLED",
        "body": "TERMINAL_FTP_ENABLED",
        "code": [
            {
                "label": "TERMINAL_FTP_ENABLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешение на отправку отчетов по FTP на указанный сервер для указанного в настройках терминала торгового счета",
            "en": "Permission to send reports using FTP-server and login, specified in the terminal settings"
        }
    },
    "TERMINAL_LANGUAGE": {
        "group": 20,
        "label": "TERMINAL_LANGUAGE",
        "body": "TERMINAL_LANGUAGE",
        "code": [
            {
                "label": "TERMINAL_LANGUAGE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Язык терминала",
            "en": "Language of the terminal"
        }
    },
    "TERMINAL_MAXBARS": {
        "group": 20,
        "label": "TERMINAL_MAXBARS",
        "body": "TERMINAL_MAXBARS",
        "code": [
            {
                "label": "TERMINAL_MAXBARS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное количество баров на графике",
            "en": "The maximal bars count on the chart"
        }
    },
    "TERMINAL_MEMORY_AVAILABLE": {
        "group": 20,
        "label": "TERMINAL_MEMORY_AVAILABLE",
        "body": "TERMINAL_MEMORY_AVAILABLE",
        "code": [
            {
                "label": "TERMINAL_MEMORY_AVAILABLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер свободной памяти процесса терминала (агента)в MB",
            "en": "Free memory of the terminal (agent) process, MB"
        }
    },
    "TERMINAL_MEMORY_PHYSICAL": {
        "group": 20,
        "label": "TERMINAL_MEMORY_PHYSICAL",
        "body": "TERMINAL_MEMORY_PHYSICAL",
        "code": [
            {
                "label": "TERMINAL_MEMORY_PHYSICAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер физической памяти в системе, в MB",
            "en": "Physical memory in the system, MB"
        }
    },
    "TERMINAL_MEMORY_TOTAL": {
        "group": 20,
        "label": "TERMINAL_MEMORY_TOTAL",
        "body": "TERMINAL_MEMORY_TOTAL",
        "code": [
            {
                "label": "TERMINAL_MEMORY_TOTAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер памяти, доступной процессу терминала (агента), в MB",
            "en": "Memory available to the process of the terminal (agent), MB"
        }
    },
    "TERMINAL_MEMORY_USED": {
        "group": 20,
        "label": "TERMINAL_MEMORY_USED",
        "body": "TERMINAL_MEMORY_USED",
        "code": [
            {
                "label": "TERMINAL_MEMORY_USED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Размер памяти, использованной терминалом (агентом), в MB",
            "en": "Memory used by the terminal (agent), MB"
        }
    },
    "TERMINAL_MQID": {
        "group": 20,
        "label": "TERMINAL_MQID",
        "body": "TERMINAL_MQID",
        "code": [
            {
                "label": "TERMINAL_MQID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Флаг наличия MetaQuotes ID для отправки Push-уведомлений",
            "en": "The flag indicates the presence of MetaQuotes ID data for Push notifications"
        }
    },
    "TERMINAL_NAME": {
        "group": 20,
        "label": "TERMINAL_NAME",
        "body": "TERMINAL_NAME",
        "code": [
            {
                "label": "TERMINAL_NAME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя терминала",
            "en": "Terminal name"
        }
    },
    "TERMINAL_NOTIFICATIONS_ENABLED": {
        "group": 20,
        "label": "TERMINAL_NOTIFICATIONS_ENABLED",
        "body": "TERMINAL_NOTIFICATIONS_ENABLED",
        "code": [
            {
                "label": "TERMINAL_NOTIFICATIONS_ENABLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешение на отправку уведомлений на смартфон",
            "en": "Permission to send notifications to smartphone"
        }
    },
    "TERMINAL_OPENCL_SUPPORT": {
        "group": 20,
        "label": "TERMINAL_OPENCL_SUPPORT",
        "body": "TERMINAL_OPENCL_SUPPORT",
        "code": [
            {
                "label": "TERMINAL_OPENCL_SUPPORT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Версия поддерживаемой OpenCL в виде 0x00010002 = 1.2.  \"0\" означает, что OpenCL не поддерживается",
            "en": "The version of the supported OpenCL in the format of 0x00010002 = 1.2.  \"0\" means that OpenCL is not supported"
        }
    },
    "TERMINAL_PATH": {
        "group": 20,
        "label": "TERMINAL_PATH",
        "body": "TERMINAL_PATH",
        "code": [
            {
                "label": "TERMINAL_PATH",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Папка, из которой запущен терминал",
            "en": "Folder from which the terminal is started"
        }
    },
    "TERMINAL_PING_LAST": {
        "group": 20,
        "label": "TERMINAL_PING_LAST",
        "body": "TERMINAL_PING_LAST",
        "code": [
            {
                "label": "TERMINAL_PING_LAST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Последнее известное значение пинга до торгового сервера в микросекундах. В одной секунде миллион микросекунд",
            "en": "The last known value of a ping to a trade server in microseconds. One second comprises of one million microseconds"
        }
    },
    "TERMINAL_SCREEN_DPI": {
        "group": 20,
        "label": "TERMINAL_SCREEN_DPI",
        "body": "TERMINAL_SCREEN_DPI",
        "code": [
            {
                "label": "TERMINAL_SCREEN_DPI",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешающая способность вывода информации на экран",
            "en": "The resolution of information display on the screen is measured as number of Dots in a line per Inch (DPI)."
        }
    },
    "TERMINAL_TRADE_ALLOWED": {
        "group": 20,
        "label": "TERMINAL_TRADE_ALLOWED",
        "body": "TERMINAL_TRADE_ALLOWED",
        "code": [
            {
                "label": "TERMINAL_TRADE_ALLOWED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешение на торговлю",
            "en": "Permission to trade"
        }
    },
    "TERMINAL_X64": {
        "group": 20,
        "label": "TERMINAL_X64",
        "body": "TERMINAL_X64",
        "code": [
            {
                "label": "TERMINAL_X64",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Признак \"64 битный терминал\"",
            "en": "Indication of the \"64-bit terminal\""
        }
    },
    "THURSDAY": {
        "group": 20,
        "label": "THURSDAY",
        "body": "THURSDAY",
        "code": [
            {
                "label": "THURSDAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Четверг",
            "en": "Thursday"
        }
    },
    "TRADE_ACTION_DEAL": {
        "group": 20,
        "label": "TRADE_ACTION_DEAL",
        "body": "TRADE_ACTION_DEAL",
        "code": [
            {
                "label": "TRADE_ACTION_DEAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Установить торговый ордер на немедленное совершение сделки с указанными параметрами (поставить рыночный ордер)",
            "en": "Place a trade order for an immediate execution with the specified parameters (market order)"
        }
    },
    "TRADE_ACTION_MODIFY": {
        "group": 20,
        "label": "TRADE_ACTION_MODIFY",
        "body": "TRADE_ACTION_MODIFY",
        "code": [
            {
                "label": "TRADE_ACTION_MODIFY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изменить параметры ранее установленного торгового ордера",
            "en": "Modify the parameters of the order placed previously"
        }
    },
    "TRADE_ACTION_PENDING": {
        "group": 20,
        "label": "TRADE_ACTION_PENDING",
        "body": "TRADE_ACTION_PENDING",
        "code": [
            {
                "label": "TRADE_ACTION_PENDING",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Установить торговый ордер на совершение сделки при указанных условиях (отложенный ордер)",
            "en": "Place a trade order for the execution under specified conditions (pending order)"
        }
    },
    "TRADE_ACTION_REMOVE": {
        "group": 20,
        "label": "TRADE_ACTION_REMOVE",
        "body": "TRADE_ACTION_REMOVE",
        "code": [
            {
                "label": "TRADE_ACTION_REMOVE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Удалить ранее выставленный отложенный торговый ордер",
            "en": "Delete the pending order placed previously"
        }
    },
    "TRADE_ACTION_SLTP": {
        "group": 20,
        "label": "TRADE_ACTION_SLTP",
        "body": "TRADE_ACTION_SLTP",
        "code": [
            {
                "label": "TRADE_ACTION_SLTP",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изменить значения Stop Loss и Take Profit у открытой позиции",
            "en": "Modify Stop Loss and Take Profit values of an opened position"
        }
    },
    "TRADE_RETCODE_CANCEL": {
        "group": 20,
        "label": "TRADE_RETCODE_CANCEL",
        "body": "TRADE_RETCODE_CANCEL",
        "code": [
            {
                "label": "TRADE_RETCODE_CANCEL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Запрос отменен трейдером",
            "en": "Request canceled by trader"
        }
    },
    "TRADE_RETCODE_CLIENT_DISABLES_AT": {
        "group": 20,
        "label": "TRADE_RETCODE_CLIENT_DISABLES_AT",
        "body": "TRADE_RETCODE_CLIENT_DISABLES_AT",
        "code": [
            {
                "label": "TRADE_RETCODE_CLIENT_DISABLES_AT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Автотрейдинг запрещен клиентским терминалом",
            "en": "Autotrading disabled by client terminal"
        }
    },
    "TRADE_RETCODE_CONNECTION": {
        "group": 20,
        "label": "TRADE_RETCODE_CONNECTION",
        "body": "TRADE_RETCODE_CONNECTION",
        "code": [
            {
                "label": "TRADE_RETCODE_CONNECTION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нет соединения с торговым сервером",
            "en": "No connection with the trade server"
        }
    },
    "TRADE_RETCODE_DONE": {
        "group": 20,
        "label": "TRADE_RETCODE_DONE",
        "body": "TRADE_RETCODE_DONE",
        "code": [
            {
                "label": "TRADE_RETCODE_DONE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Заявка выполнена",
            "en": "Request completed"
        }
    },
    "TRADE_RETCODE_DONE_PARTIAL": {
        "group": 20,
        "label": "TRADE_RETCODE_DONE_PARTIAL",
        "body": "TRADE_RETCODE_DONE_PARTIAL",
        "code": [
            {
                "label": "TRADE_RETCODE_DONE_PARTIAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Заявка выполнена частично",
            "en": "Only part of the request was completed"
        }
    },
    "TRADE_RETCODE_ERROR": {
        "group": 20,
        "label": "TRADE_RETCODE_ERROR",
        "body": "TRADE_RETCODE_ERROR",
        "code": [
            {
                "label": "TRADE_RETCODE_ERROR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ошибка обработки запроса",
            "en": "Request processing error"
        }
    },
    "TRADE_RETCODE_FROZEN": {
        "group": 20,
        "label": "TRADE_RETCODE_FROZEN",
        "body": "TRADE_RETCODE_FROZEN",
        "code": [
            {
                "label": "TRADE_RETCODE_FROZEN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер или позиция заморожены",
            "en": "Order or position frozen"
        }
    },
    "TRADE_RETCODE_INVALID": {
        "group": 20,
        "label": "TRADE_RETCODE_INVALID",
        "body": "TRADE_RETCODE_INVALID",
        "code": [
            {
                "label": "TRADE_RETCODE_INVALID",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неправильный запрос",
            "en": "Invalid request"
        }
    },
    "TRADE_RETCODE_INVALID_EXPIRATION": {
        "group": 20,
        "label": "TRADE_RETCODE_INVALID_EXPIRATION",
        "body": "TRADE_RETCODE_INVALID_EXPIRATION",
        "code": [
            {
                "label": "TRADE_RETCODE_INVALID_EXPIRATION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неверная дата истечения ордера в запросе",
            "en": "Invalid order expiration date in the request"
        }
    },
    "TRADE_RETCODE_INVALID_FILL": {
        "group": 20,
        "label": "TRADE_RETCODE_INVALID_FILL",
        "body": "TRADE_RETCODE_INVALID_FILL",
        "code": [
            {
                "label": "TRADE_RETCODE_INVALID_FILL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Указан неподдерживаемый тип исполнения ордера по остатку",
            "en": "Invalid order filling type"
        }
    },
    "TRADE_RETCODE_INVALID_ORDER": {
        "group": 20,
        "label": "TRADE_RETCODE_INVALID_ORDER",
        "body": "TRADE_RETCODE_INVALID_ORDER",
        "code": [
            {
                "label": "TRADE_RETCODE_INVALID_ORDER",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неверный или запрещённый тип ордера",
            "en": "Incorrect or prohibited order type"
        }
    },
    "TRADE_RETCODE_INVALID_PRICE": {
        "group": 20,
        "label": "TRADE_RETCODE_INVALID_PRICE",
        "body": "TRADE_RETCODE_INVALID_PRICE",
        "code": [
            {
                "label": "TRADE_RETCODE_INVALID_PRICE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неправильная цена в запросе",
            "en": "Invalid price in the request"
        }
    },
    "TRADE_RETCODE_INVALID_STOPS": {
        "group": 20,
        "label": "TRADE_RETCODE_INVALID_STOPS",
        "body": "TRADE_RETCODE_INVALID_STOPS",
        "code": [
            {
                "label": "TRADE_RETCODE_INVALID_STOPS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неправильные стопы в запросе",
            "en": "Invalid stops in the request"
        }
    },
    "TRADE_RETCODE_INVALID_VOLUME": {
        "group": 20,
        "label": "TRADE_RETCODE_INVALID_VOLUME",
        "body": "TRADE_RETCODE_INVALID_VOLUME",
        "code": [
            {
                "label": "TRADE_RETCODE_INVALID_VOLUME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Неправильный объем в запросе",
            "en": "Invalid volume in the request"
        }
    },
    "TRADE_RETCODE_LIMIT_ORDERS": {
        "group": 20,
        "label": "TRADE_RETCODE_LIMIT_ORDERS",
        "body": "TRADE_RETCODE_LIMIT_ORDERS",
        "code": [
            {
                "label": "TRADE_RETCODE_LIMIT_ORDERS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Достигнут лимит на количество отложенных ордеров",
            "en": "The number of pending orders has reached the limit"
        }
    },
    "TRADE_RETCODE_LIMIT_VOLUME": {
        "group": 20,
        "label": "TRADE_RETCODE_LIMIT_VOLUME",
        "body": "TRADE_RETCODE_LIMIT_VOLUME",
        "code": [
            {
                "label": "TRADE_RETCODE_LIMIT_VOLUME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Достигнут лимит на объем ордеров и позиций для данного символа",
            "en": "The volume of orders and positions for the symbol has reached the limit"
        }
    },
    "TRADE_RETCODE_LOCKED": {
        "group": 20,
        "label": "TRADE_RETCODE_LOCKED",
        "body": "TRADE_RETCODE_LOCKED",
        "code": [
            {
                "label": "TRADE_RETCODE_LOCKED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Запрос заблокирован для обработки",
            "en": "Request locked for processing"
        }
    },
    "TRADE_RETCODE_MARKET_CLOSED": {
        "group": 20,
        "label": "TRADE_RETCODE_MARKET_CLOSED",
        "body": "TRADE_RETCODE_MARKET_CLOSED",
        "code": [
            {
                "label": "TRADE_RETCODE_MARKET_CLOSED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Рынок закрыт",
            "en": "Market is closed"
        }
    },
    "TRADE_RETCODE_NO_CHANGES": {
        "group": 20,
        "label": "TRADE_RETCODE_NO_CHANGES",
        "body": "TRADE_RETCODE_NO_CHANGES",
        "code": [
            {
                "label": "TRADE_RETCODE_NO_CHANGES",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "В запросе нет изменений",
            "en": "No changes in request"
        }
    },
    "TRADE_RETCODE_NO_MONEY": {
        "group": 20,
        "label": "TRADE_RETCODE_NO_MONEY",
        "body": "TRADE_RETCODE_NO_MONEY",
        "code": [
            {
                "label": "TRADE_RETCODE_NO_MONEY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нет достаточных денежных средств для выполнения запроса",
            "en": "There is not enough money to complete the request"
        }
    },
    "TRADE_RETCODE_ONLY_REAL": {
        "group": 20,
        "label": "TRADE_RETCODE_ONLY_REAL",
        "body": "TRADE_RETCODE_ONLY_REAL",
        "code": [
            {
                "label": "TRADE_RETCODE_ONLY_REAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Операция разрешена только для реальных счетов",
            "en": "Operation is allowed only for live accounts"
        }
    },
    "TRADE_RETCODE_ORDER_CHANGED": {
        "group": 20,
        "label": "TRADE_RETCODE_ORDER_CHANGED",
        "body": "TRADE_RETCODE_ORDER_CHANGED",
        "code": [
            {
                "label": "TRADE_RETCODE_ORDER_CHANGED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Состояние ордера изменилось",
            "en": "Order state changed"
        }
    },
    "TRADE_RETCODE_PLACED": {
        "group": 20,
        "label": "TRADE_RETCODE_PLACED",
        "body": "TRADE_RETCODE_PLACED",
        "code": [
            {
                "label": "TRADE_RETCODE_PLACED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ордер размещен",
            "en": "Order placed"
        }
    },
    "TRADE_RETCODE_POSITION_CLOSED": {
        "group": 20,
        "label": "TRADE_RETCODE_POSITION_CLOSED",
        "body": "TRADE_RETCODE_POSITION_CLOSED",
        "code": [
            {
                "label": "TRADE_RETCODE_POSITION_CLOSED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Позиция с указанным POSITION_IDENTIFIER уже закрыта",
            "en": "Position with the specified POSITION_IDENTIFIER has already been closed"
        }
    },
    "TRADE_RETCODE_PRICE_CHANGED": {
        "group": 20,
        "label": "TRADE_RETCODE_PRICE_CHANGED",
        "body": "TRADE_RETCODE_PRICE_CHANGED",
        "code": [
            {
                "label": "TRADE_RETCODE_PRICE_CHANGED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цены изменились",
            "en": "Prices changed"
        }
    },
    "TRADE_RETCODE_PRICE_OFF": {
        "group": 20,
        "label": "TRADE_RETCODE_PRICE_OFF",
        "body": "TRADE_RETCODE_PRICE_OFF",
        "code": [
            {
                "label": "TRADE_RETCODE_PRICE_OFF",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Отсутствуют котировки для обработки запроса",
            "en": "There are no quotes to process the request"
        }
    },
    "TRADE_RETCODE_REJECT": {
        "group": 20,
        "label": "TRADE_RETCODE_REJECT",
        "body": "TRADE_RETCODE_REJECT",
        "code": [
            {
                "label": "TRADE_RETCODE_REJECT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Запрос отвергнут",
            "en": "Request rejected"
        }
    },
    "TRADE_RETCODE_REQUOTE": {
        "group": 20,
        "label": "TRADE_RETCODE_REQUOTE",
        "body": "TRADE_RETCODE_REQUOTE",
        "code": [
            {
                "label": "TRADE_RETCODE_REQUOTE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Реквота",
            "en": "Requote"
        }
    },
    "TRADE_RETCODE_SERVER_DISABLES_AT": {
        "group": 20,
        "label": "TRADE_RETCODE_SERVER_DISABLES_AT",
        "body": "TRADE_RETCODE_SERVER_DISABLES_AT",
        "code": [
            {
                "label": "TRADE_RETCODE_SERVER_DISABLES_AT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Автотрейдинг запрещен сервером",
            "en": "Autotrading disabled by server"
        }
    },
    "TRADE_RETCODE_TIMEOUT": {
        "group": 20,
        "label": "TRADE_RETCODE_TIMEOUT",
        "body": "TRADE_RETCODE_TIMEOUT",
        "code": [
            {
                "label": "TRADE_RETCODE_TIMEOUT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Запрос отменен по истечению времени",
            "en": "Request canceled by timeout"
        }
    },
    "TRADE_RETCODE_TOO_MANY_REQUESTS": {
        "group": 20,
        "label": "TRADE_RETCODE_TOO_MANY_REQUESTS",
        "body": "TRADE_RETCODE_TOO_MANY_REQUESTS",
        "code": [
            {
                "label": "TRADE_RETCODE_TOO_MANY_REQUESTS",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Слишком частые запросы",
            "en": "Too frequent requests"
        }
    },
    "TRADE_RETCODE_TRADE_DISABLED": {
        "group": 20,
        "label": "TRADE_RETCODE_TRADE_DISABLED",
        "body": "TRADE_RETCODE_TRADE_DISABLED",
        "code": [
            {
                "label": "TRADE_RETCODE_TRADE_DISABLED",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Торговля запрещена",
            "en": "Trade is disabled"
        }
    },
    "TRADE_TRANSACTION_DEAL_ADD": {
        "group": 20,
        "label": "TRADE_TRANSACTION_DEAL_ADD",
        "body": "TRADE_TRANSACTION_DEAL_ADD",
        "code": [
            {
                "label": "TRADE_TRANSACTION_DEAL_ADD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Добавление сделки в историю. Осуществляется в результате исполнения ордера или проведения операций с балансом счета.",
            "en": "Adding a deal to the history. The action is performed as a result of an order execution or performing operations with an account balance."
        }
    },
    "TRADE_TRANSACTION_DEAL_DELETE": {
        "group": 20,
        "label": "TRADE_TRANSACTION_DEAL_DELETE",
        "body": "TRADE_TRANSACTION_DEAL_DELETE",
        "code": [
            {
                "label": "TRADE_TRANSACTION_DEAL_DELETE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Удаление сделки из истории. Возможны ситуации, когда ранее исполненная сделка удаляется на сервере. Например, сделка была удалена во внешней торговой системе (бирже), куда она была выведена брокером.",
            "en": "Deleting a deal from the history. There may be cases when a previously executed deal is deleted from a server. For example, a deal has been deleted in an external trading system (exchange) where it was previously transferred by a broker."
        }
    },
    "TRADE_TRANSACTION_DEAL_UPDATE": {
        "group": 20,
        "label": "TRADE_TRANSACTION_DEAL_UPDATE",
        "body": "TRADE_TRANSACTION_DEAL_UPDATE",
        "code": [
            {
                "label": "TRADE_TRANSACTION_DEAL_UPDATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изменение сделки в истории. Возможны ситуации, когда ранее исполненная сделка изменяется на сервере. Например, сделка была изменена во внешней торговой системе (бирже), куда она была выведена брокером.",
            "en": "Updating a deal in the history. There may be cases when a previously executed deal is changed on a server. For example, a deal has been changed in an external trading system (exchange) where it was previously transferred by a broker."
        }
    },
    "TRADE_TRANSACTION_HISTORY_ADD": {
        "group": 20,
        "label": "TRADE_TRANSACTION_HISTORY_ADD",
        "body": "TRADE_TRANSACTION_HISTORY_ADD",
        "code": [
            {
                "label": "TRADE_TRANSACTION_HISTORY_ADD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Добавление ордера в историю в результате исполнения или отмены.",
            "en": "Adding an order to the history as a result of execution or cancellation."
        }
    },
    "TRADE_TRANSACTION_HISTORY_DELETE": {
        "group": 20,
        "label": "TRADE_TRANSACTION_HISTORY_DELETE",
        "body": "TRADE_TRANSACTION_HISTORY_DELETE",
        "code": [
            {
                "label": "TRADE_TRANSACTION_HISTORY_DELETE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Удаление ордера из истории ордеров. Данный тип предусмотрен для расширения функциональности на стороне торгового сервера.",
            "en": "Deleting an order from the orders history. This type is provided for enhancing functionality on a trade server side."
        }
    },
    "TRADE_TRANSACTION_HISTORY_UPDATE": {
        "group": 20,
        "label": "TRADE_TRANSACTION_HISTORY_UPDATE",
        "body": "TRADE_TRANSACTION_HISTORY_UPDATE",
        "code": [
            {
                "label": "TRADE_TRANSACTION_HISTORY_UPDATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изменение ордера, находящегося в истории ордеров. Данный тип предусмотрен для расширения функциональности на стороне торгового сервера.",
            "en": "Changing an order located in the orders history. This type is provided for enhancing functionality on a trade server side."
        }
    },
    "TRADE_TRANSACTION_ORDER_ADD": {
        "group": 20,
        "label": "TRADE_TRANSACTION_ORDER_ADD",
        "body": "TRADE_TRANSACTION_ORDER_ADD",
        "code": [
            {
                "label": "TRADE_TRANSACTION_ORDER_ADD",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Добавление нового открытого ордера.",
            "en": "Adding a new open order."
        }
    },
    "TRADE_TRANSACTION_ORDER_DELETE": {
        "group": 20,
        "label": "TRADE_TRANSACTION_ORDER_DELETE",
        "body": "TRADE_TRANSACTION_ORDER_DELETE",
        "code": [
            {
                "label": "TRADE_TRANSACTION_ORDER_DELETE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Удаление ордера из списка открытых. Ордер может быть удален из открытых в результате выставления соответствующего запроса либо в результате исполнения (заливки) и переноса в историю.",
            "en": "Removing an order from the list of the open ones. An order can be deleted from the open ones as a result of setting an appropriate request or execution (filling) and moving to the history."
        }
    },
    "TRADE_TRANSACTION_ORDER_UPDATE": {
        "group": 20,
        "label": "TRADE_TRANSACTION_ORDER_UPDATE",
        "body": "TRADE_TRANSACTION_ORDER_UPDATE",
        "code": [
            {
                "label": "TRADE_TRANSACTION_ORDER_UPDATE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изменение открытого ордера. К данным изменениям относятся не только явные изменения со стороны клиентского терминала или торгового сервера, но также и изменение его состояния при выставлении (например, переход из состояния ORDER_STATE_STARTED в ORDER_STATE_PLACED или из ORDER_STATE_PLACED в ORDER_STATE_PARTIAL и т.д.).",
            "en": "Updating an open order. The updates include not only evident changes from the client terminal or a trade server sides but also changes of an order state when setting it (for example, transition from ORDER_STATE_STARTED to ORDER_STATE_PLACED or from ORDER_STATE_PLACED to ORDER_STATE_PARTIAL, etc.)."
        }
    },
    "TRADE_TRANSACTION_POSITION": {
        "group": 20,
        "label": "TRADE_TRANSACTION_POSITION",
        "body": "TRADE_TRANSACTION_POSITION",
        "code": [
            {
                "label": "TRADE_TRANSACTION_POSITION",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Изменение позиции, не связанное с исполнением сделки. Данный тип транзакции свидетельствует именно о том, что позиция была изменена на стороне торгового сервера. У позиции может быть изменен объем, цена открытия, а также уровни Stop Loss и Take Profit. Информация об изменениях передается в структуре MqlTradeTransaction через обработчик OnTradeTransaction. Изменение позиции (добавление, изменение или ликвидация) в результате совершения сделки не влечет за собой появление транзакции TRADE_TRANSACTION_POSITION.",
            "en": "Changing a position not related to a deal execution. This type of transaction shows that a position has been changed on a trade server side. Position volume, open price, Stop Loss and Take Profit levels can be changed. Data on changes are submitted in MqlTradeTransaction structure via OnTradeTransaction handler. Position change (adding, changing or closing), as a result of a deal execution, does not lead to the occurrence of TRADE_TRANSACTION_POSITION transaction."
        }
    },
    "TRADE_TRANSACTION_REQUEST": {
        "group": 20,
        "label": "TRADE_TRANSACTION_REQUEST",
        "body": "TRADE_TRANSACTION_REQUEST",
        "code": [
            {
                "label": "TRADE_TRANSACTION_REQUEST",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Уведомление о том, что торговый запрос обработан сервером, и результат его обработки получен. Для транзакций данного типа в структуре MqlTradeTransaction необходимо анализировать только одно поле - type (тип транзакции). Для получения дополнительной информации необходимо анализировать второй и третий параметры функции OnTradeTransaction (request и result).",
            "en": "Notification of the fact that a trade request has been processed by a server and processing result has been received. Only type field (trade transaction type) must be analyzed for such transactions in MqlTradeTransaction structure. The second and third parameters of OnTradeTransaction (request and result) must be analyzed for additional data."
        }
    },
    "TUESDAY": {
        "group": 20,
        "label": "TUESDAY",
        "body": "TUESDAY",
        "code": [
            {
                "label": "TUESDAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Вторник",
            "en": "Tuesday"
        }
    },
    "TYPE_BOOL": {
        "group": 20,
        "label": "TYPE_BOOL",
        "body": "TYPE_BOOL",
        "code": [
            {
                "label": "TYPE_BOOL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "bool",
            "en": "bool"
        }
    },
    "TYPE_CHAR": {
        "group": 20,
        "label": "TYPE_CHAR",
        "body": "TYPE_CHAR",
        "code": [
            {
                "label": "TYPE_CHAR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "char",
            "en": "char"
        }
    },
    "TYPE_COLOR": {
        "group": 20,
        "label": "TYPE_COLOR",
        "body": "TYPE_COLOR",
        "code": [
            {
                "label": "TYPE_COLOR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "color",
            "en": "color"
        }
    },
    "TYPE_DATETIME": {
        "group": 20,
        "label": "TYPE_DATETIME",
        "body": "TYPE_DATETIME",
        "code": [
            {
                "label": "TYPE_DATETIME",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "datetime",
            "en": "datetime"
        }
    },
    "TYPE_DOUBLE": {
        "group": 20,
        "label": "TYPE_DOUBLE",
        "body": "TYPE_DOUBLE",
        "code": [
            {
                "label": "TYPE_DOUBLE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "double",
            "en": "double"
        }
    },
    "TYPE_FLOAT": {
        "group": 20,
        "label": "TYPE_FLOAT",
        "body": "TYPE_FLOAT",
        "code": [
            {
                "label": "TYPE_FLOAT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "float",
            "en": "float"
        }
    },
    "TYPE_INT": {
        "group": 20,
        "label": "TYPE_INT",
        "body": "TYPE_INT",
        "code": [
            {
                "label": "TYPE_INT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "int",
            "en": "int"
        }
    },
    "TYPE_LONG": {
        "group": 20,
        "label": "TYPE_LONG",
        "body": "TYPE_LONG",
        "code": [
            {
                "label": "TYPE_LONG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "long",
            "en": "long"
        }
    },
    "TYPE_SHORT": {
        "group": 20,
        "label": "TYPE_SHORT",
        "body": "TYPE_SHORT",
        "code": [
            {
                "label": "TYPE_SHORT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "short",
            "en": "short"
        }
    },
    "TYPE_STRING": {
        "group": 20,
        "label": "TYPE_STRING",
        "body": "TYPE_STRING",
        "code": [
            {
                "label": "TYPE_STRING",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "string",
            "en": "string"
        }
    },
    "TYPE_UCHAR": {
        "group": 20,
        "label": "TYPE_UCHAR",
        "body": "TYPE_UCHAR",
        "code": [
            {
                "label": "TYPE_UCHAR",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "uchar",
            "en": "uchar"
        }
    },
    "TYPE_UINT": {
        "group": 20,
        "label": "TYPE_UINT",
        "body": "TYPE_UINT",
        "code": [
            {
                "label": "TYPE_UINT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "uint",
            "en": "uint"
        }
    },
    "TYPE_ULONG": {
        "group": 20,
        "label": "TYPE_ULONG",
        "body": "TYPE_ULONG",
        "code": [
            {
                "label": "TYPE_ULONG",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "ulong",
            "en": "ulong"
        }
    },
    "TYPE_USHORT": {
        "group": 20,
        "label": "TYPE_USHORT",
        "body": "TYPE_USHORT",
        "code": [
            {
                "label": "TYPE_USHORT",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "ushort",
            "en": "ushort"
        }
    },
    "UCHAR_MAX": {
        "group": 20,
        "label": "UCHAR_MAX",
        "body": "UCHAR_MAX",
        "code": [
            {
                "label": "UCHAR_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом uchar",
            "en": "Maximal value, which can be represented by uchar type"
        }
    },
    "UINT_MAX": {
        "group": 20,
        "label": "UINT_MAX",
        "body": "UINT_MAX",
        "code": [
            {
                "label": "UINT_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом uint",
            "en": "Maximal value, which can be represented by uint type"
        }
    },
    "ULONG_MAX": {
        "group": 20,
        "label": "ULONG_MAX",
        "body": "ULONG_MAX",
        "code": [
            {
                "label": "ULONG_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом ulong",
            "en": "Maximal value, which can be represented by ulong type"
        }
    },
    "UPPER_BAND": {
        "group": 20,
        "label": "UPPER_BAND",
        "body": "UPPER_BAND",
        "code": [
            {
                "label": "UPPER_BAND",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Верхняя граница",
            "en": "Upper limit"
        }
    },
    "UPPER_HISTOGRAM": {
        "group": 20,
        "label": "UPPER_HISTOGRAM",
        "body": "UPPER_HISTOGRAM",
        "code": [
            {
                "label": "UPPER_HISTOGRAM",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Верхняя гистограмма",
            "en": "Upper histogram"
        }
    },
    "UPPER_LINE": {
        "group": 20,
        "label": "UPPER_LINE",
        "body": "UPPER_LINE",
        "code": [
            {
                "label": "UPPER_LINE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Верхняя линия",
            "en": "Upper line"
        }
    },
    "USHORT_MAX": {
        "group": 20,
        "label": "USHORT_MAX",
        "body": "USHORT_MAX",
        "code": [
            {
                "label": "USHORT_MAX",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Максимальное значение, которое может быть представлено типом ushort",
            "en": "Maximal value, which can be represented by ushort type"
        }
    },
    "VOLUME_REAL": {
        "group": 20,
        "label": "VOLUME_REAL",
        "body": "VOLUME_REAL",
        "code": [
            {
                "label": "VOLUME_REAL",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Торговый объем",
            "en": "Trade volume"
        }
    },
    "VOLUME_TICK": {
        "group": 20,
        "label": "VOLUME_TICK",
        "body": "VOLUME_TICK",
        "code": [
            {
                "label": "VOLUME_TICK",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тиковый объем",
            "en": "Tick volume"
        }
    },
    "WEDNESDAY": {
        "group": 20,
        "label": "WEDNESDAY",
        "body": "WEDNESDAY",
        "code": [
            {
                "label": "WEDNESDAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Среда",
            "en": "Wednesday"
        }
    },
    "WHOLE_ARRAY": {
        "group": 20,
        "label": "WHOLE_ARRAY",
        "body": "WHOLE_ARRAY",
        "code": [
            {
                "label": "WHOLE_ARRAY",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Означает количество элементов, оставшееся до конца массива, то есть, будет обработан весь массив",
            "en": "Means the number of items remaining until the end of the array, i.e., the entire array will be processed"
        }
    },
    "WRONG_VALUE": {
        "group": 20,
        "label": "WRONG_VALUE",
        "body": "WRONG_VALUE",
        "code": [
            {
                "label": "WRONG_VALUE",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Константа может неявно приводиться к типу любого перечисления.",
            "en": "The constant can be implicitly cast to any enumeration type"
        }
    },
    "class": {
        "group": 13,
        "label": "class",
        "body": "class",
        "code": [
            {
                "label": "class",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "class",
            "en": "class"
        }
    },
    "union": {
        "group": 13,
        "label": "union",
        "body": "union",
        "code": [
            {
                "label": "union",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Объединение – это особый тип данных, который состоит из нескольких переменных, разделяющих одну и ту же область памяти.",
            "en": "Union is a special data type consisting of several variables sharing the same memory area."
        }
    },
    "char": {
        "group": 24,
        "label": "char",
        "body": "char",
        "code": [
            {
                "label": "char",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Целый тип char занимает в памяти 1 байт (8 бит) и позволяет выразить в двоичной системе счисления 2^8 значений=256. Тип char может содержать как положительные, так и отрицательные значения. Диапазон изменения значений составляет от -128 до 127.",
            "en": "The char type takes 1 byte of memory (8 bits) and allows expressing in the binary notation 2^8=256 values. The char type can contain both positive and negative values. The range of values is from -128 to 127."
        }
    },
    "uchar": {
        "group": 24,
        "label": "uchar",
        "body": "uchar",
        "code": [
            {
                "label": "uchar",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Целый тип uchar также занимает в памяти 1 байт, как и тип char, но в отличие от него, uchar предназначен только для положительных значений. Минимальное значение равно нулю, максимальное значение равно 255. Первая буква u в названии типа uchar является сокращением слова unsigned (беззнаковый).",
            "en": "The uchar integer type also occupies 1 byte of memory, as well as the char type, but unlike it uchar is intended only for positive values. The minimum value is zero, the maximum value is 255. The first letter u in the name of the uchar type is the abbreviation for unsigned."
        }
    },
    "short": {
        "group": 24,
        "label": "short",
        "body": "short",
        "code": [
            {
                "label": "short",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Целый тип short имеет размер 2 байта(16 бит) и, соответственно, позволяет выразить множество значений равное 2 в степени 16: 2^16=65 536. Так как тип short является знаковым и содержит как положительные, так и отрицательные значения, то диапазон значений находится между -32 768 и 32 767.",
            "en": "The size of the short type is 2 bytes (16 bits) and, accordingly, it allows expressing the range of values equal to 2 to the power 16: 2^16 = 65 536.Since the short type is a signed one, and contains both positive and negative values, the range of values is between -32 768 and 32 767."
        }
    },
    "ushort": {
        "group": 24,
        "label": "ushort",
        "body": "ushort",
        "code": [
            {
                "label": "ushort",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Беззнаковым типом short является тип ushort, который также имеет размер 2 байта. Минимальное значение равно 0, максимальное значение 65 535.",
            "en": "The unsigned short type is the type ushort, which also has a size of 2 bytes. The minimum value is 0, the maximum value is 65 535."
        }
    },
    "int": {
        "group": 24,
        "label": "int",
        "body": "int",
        "code": [
            {
                "label": "int",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Целый тип int имеет размер 4 байта (32 бита). Минимальное значение -2 147 483 648, максимальное значение 2 147 483 647.",
            "en": "The size of the int type is 4 bytes (32 bits). The minimal value is -2 147 483 648, the maximal one is 2 147 483 647."
        }
    },
    "uint": {
        "group": 24,
        "label": "uint",
        "body": "uint",
        "code": [
            {
                "label": "uint",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Беззнаковый целый тип uint занимает в памяти 4 байта и позволяет выражать целочисленные значения от 0 до 4 294 967 295.",
            "en": "The unsigned integer type is uint. It takes 4 bytes of memory and allows expressing integers from 0 to 4 294 967 295."
        }
    },
    "long": {
        "group": 24,
        "label": "long",
        "body": "long",
        "code": [
            {
                "label": "long",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Целый тип long имеет размер 8 байт (64 бита). Минимальное значение -9 223 372 036 854 775 808, максимальное значение 9 223 372 036 854 775 807.",
            "en": "The size of the long type is 8 bytes (64 bits). The minimum value is -9 223 372 036 854 775 808, the maximum value is 9 223 372 036 854 775 807."
        }
    },
    "ulong": {
        "group": 24,
        "label": "ulong",
        "body": "ulong",
        "code": [
            {
                "label": "ulong",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Целый тип ulong также занимает 8 байт и позволяет хранить значения от 0 до 18 446 744 073 709 551 615.",
            "en": "The ulong type also occupies 8 bytes and can store values from 0 to 18 446 744 073 709 551 615."
        }
    },
    "datetime": {
        "group": 24,
        "label": "datetime",
        "body": "datetime",
        "code": [
            {
                "label": "datetime",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип datetime предназначен для хранения даты и времени в виде количества секунд, прошедших с 01 января 1970 года. Занимает в памяти 8 байт.",
            "en": "The datetime type is intended for storing the date and time as the number of seconds elapsed since January 01, 1970. This type occupies 8 bytes of memory."
        }
    },
    "color": {
        "group": 24,
        "label": "color",
        "body": "color",
        "code": [
            {
                "label": "color",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип color предназначен для хранения информации о цвете и занимает в памяти 4 байта. Первый байт не учитывается, остальные 3 байта содержат RGB-составляющие.",
            "en": "The color type is intended for storing information about color and occupies 4 bytes in memory. The first byte is ignored, the remaining 3 bytes contain the RGB-components."
        }
    },
    "bool": {
        "group": 24,
        "label": "bool",
        "body": "bool",
        "code": [
            {
                "label": "bool",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип bool предназначен для хранения логических значений true (истина) или false (ложь), числовое представление которых 1 или 0 соответственно.",
            "en": "The bool type is intended to store the logical values of true or false, numeric representation of them is 1 or 0, respectively."
        }
    },
    "enum": {
        "group": 24,
        "label": "enum",
        "body": "enum",
        "code": [
            {
                "label": "enum",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Данные перечислимого типа enum относятся к некоторому ограниченному множеству данных.",
            "en": "Data of the enum type belong to a certain limited set of data."
        }
    },
    "double": {
        "group": 24,
        "label": "double",
        "body": "double",
        "code": [
            {
                "label": "double",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип данных с плавающей точкой. Имя double означает, что точность этих чисел вдвое превышает точность чисел типа float.",
            "en": "Floating point data type. The name double means that these numbers are twice as accurate as float numbers."
        }
    },
    "float": {
        "group": 24,
        "label": "float",
        "body": "float",
        "code": [
            {
                "label": "float",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип float является наименьшим типом с плавающей точкой в диапазоне +/- 3.4E-38 до 3.4E+38. В памяти занимает 4 байта (32 бита)",
            "en": "The float type is the smallest floating point type in the range +/- 3.4E-38 to 3.4E+38. It occupies 4 bytes (32 bits) in memory"
        }
    },
    "string": {
        "group": 24,
        "label": "string",
        "body": "string",
        "code": [
            {
                "label": "string",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тип string предназначен для хранения текстовых строк. Текстовая строка представляет собой последовательность символов в формате Unicode с завершающим нулем на конце.",
            "en": "The string type is used for storing text strings. A text string is a sequence of characters in the Unicode format with the final zero at the end of it."
        }
    },
    "struct": {
        "group": 24,
        "label": "struct",
        "body": "struct",
        "code": [
            {
                "label": "struct",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Структура является набором элементов произвольного типа (кроме типа void). Таким образом, структура объединяет логически связанные данные разных типов.",
            "en": "A structure is a set of elements of any type (except for the void type). Thus, the structure combines logically related data of different types."
        }
    },
    "void": {
        "group": 24,
        "label": "void",
        "body": "void",
        "code": [
            {
                "label": "void",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Синтаксически тип void является фундаментальным типом наравне с типами char, uchar, bool, short, ushort, int, uint, color, long, ulong, datetime, float, double и string. Этот тип используется либо для указания того, что функция не возвращает значения, либо в качестве параметра функции обозначает отсутствие параметров.",
            "en": "Syntactically the void type is a fundamental type along with types of char, uchar, bool, short, ushort, int, uint, color, long, ulong, datetime, float, double and string. This type is used either to indicate that the function does not return any value, or as a function parameter it denotes the absence of parameters."
        }
    },
    "const": {
        "group": 25,
        "label": "const",
        "body": "const",
        "code": [
            {
                "label": "const",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Спецификатор const объявляет переменную константой, и не позволяет изменять значение этой переменной в процессе выполнения программы.",
            "en": "The const specifier declares a variable as a constant, and does not allow to change this variable during runtime."
        }
    },
    "private": {
        "group": 25,
        "label": "private",
        "body": "private",
        "code": [
            {
                "label": "private",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешает доступ к переменным и методам класса только из методов данного класса.",
            "en": "allows access to variables and class methods only from methods of the same class."
        }
    },
    "virtual": {
        "group": 25,
        "label": "virtual",
        "body": "virtual",
        "code": [
            {
                "label": "virtual",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Применим только к методам класса (но не к методам структур) и сообщает компилятору, что данный метод должен быть размещен в таблице виртуальных функций класса.",
            "en": "applies only to class methods (but not to methods of structures) and tells the compiler that this method should be placed in the table of virtual functions of the class."
        }
    },
    "protected": {
        "group": 25,
        "label": "protected",
        "body": "protected",
        "code": [
            {
                "label": "protected",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешает доступ со стороны методов данного класса, а также со стороны методов публично наследуемых классов. Иной доступ невозможен.",
            "en": "allows access from methods of this class, as well as from methods of publicly inherited classes. Other access is impossible"
        }
    },
    "override": {
        "group": 25,
        "label": "override",
        "body": "override",
        "code": [
            {
                "label": "override",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Модификатор override означает, что объявляемая функция обязательно должна переопределить метод родительского класса.",
            "en": "The 'override' modifier means that the declared function must override the method of a parent class."
        }
    },
    "public": {
        "group": 25,
        "label": "public",
        "body": "public",
        "code": [
            {
                "label": "public",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Разрешает ничем неограниченный доступ к переменной или методу класса.",
            "en": "allows unrestricted access to the variable or class method"
        }
    },
    "typedef": {
        "group": 13,
        "label": "typedef",
        "body": "typedef",
        "code": [
            {
                "label": "typedef",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ключевое слово typedef в языке C++ позволяет создавать пользовательские типы данных – для этого достаточно определить новое имя типа данных для уже существующего типа данных.",
            "en": "The typedef keyword in C++ allows creating user-defined data types. To do this, simply specify a new data type name for an already existing data type."
        }
    },
    "typename": {
        "group": 13,
        "label": "typename",
        "body": "typename",
        "code": [
            {
                "label": "typename",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ключевое слово",
            "en": "Keyword"
        }
    },
    "return": {
        "group": 23,
        "label": "return",
        "body": "return",
        "code": [
            {
                "label": "return",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор return прекращает выполнение текущей функции и возвращает управление вызвавшей программе.",
            "en": "The return operator terminates the current function execution and returns control to the calling program."
        }
    },
    "if": {
        "group": 23,
        "label": "if",
        "body": "if",
        "code": [
            {
                "label": "if",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор IF - ELSE используется при необходимости сделать выбор.",
            "en": "The IF - ELSE operator is used when a choice must be made."
        }
    },
    "else": {
        "group": 23,
        "label": "else",
        "body": "else",
        "code": [
            {
                "label": "else",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор IF - ELSE используется при необходимости сделать выбор.",
            "en": "The IF - ELSE operator is used when a choice must be made."
        }
    },
    "switch": {
        "group": 23,
        "label": "switch",
        "body": "switch(expression$0)\n\t{\n\t\tcase constant: operators; break;\n\t\tcase constant: operators; break;\n\n\t\tdefault: operators; break;\n\t}",
        "code": [
            {
                "label": "switch",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Сравнивает значение выражения с константами во всех вариантах case и передает управление оператору, который соответствует значению выражения.",
            "en": "Compares the expression value with constants in all the case variants and passes control to the operator that corresponds to the expression value."
        }
    },
    "while": {
        "group": 23,
        "label": "while",
        "body": "while",
        "code": [
            {
                "label": "while",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор while состоит из проверяемого выражения и оператора, который должен быть выполнен.",
            "en": "The while operator consists of a checked expression and the operator, which must be fulfilled."
        }
    },
    "for": {
        "group": 23,
        "label": "for",
        "body": "for (int i = 0; i < count; i++)\n\t{\n\t\t$0\n\t}",
        "code": [
            {
                "label": "for",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор for состоит из трех выражений и выполняемого оператора",
            "en": "The for operator consists of three expressions and an executable operator"
        }
    },
    "break": {
        "group": 23,
        "label": "break",
        "body": "break",
        "code": [
            {
                "label": "break",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор break прекращает выполнение ближайшего вложенного внешнего оператора switch, while, do-while или for.",
            "en": "The break operator terminates the execution of the nearest nested outward switch, while, do-while or for operator."
        }
    },
    "continue": {
        "group": 23,
        "label": "continue",
        "body": "continue",
        "code": [
            {
                "label": "continue",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор continue передает управление в начало ближайшего внешнего оператора цикла while, do-while или for, вызывая начало следующей итерации.",
            "en": "The continue operator passes control to the beginning of the nearest outward loop while, do-while or for operator, the next iteration being called."
        }
    },
    "new": {
        "group": 23,
        "label": "new",
        "body": "new",
        "code": [
            {
                "label": "new",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор new автоматически создает объект соответствующего размера, вызывает конструктор объекта и возвращает описатель созданного объекта.",
            "en": "The new operator automatically creates an object of a corresponding size, calls the object constructor and returns a descriptor of created object."
        }
    },
    "delete": {
        "group": 23,
        "label": "delete",
        "body": "delete",
        "code": [
            {
                "label": "delete",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор delete удаляет созданный оператором new объект, вызывает деструктор соответствующего класса и освобождает память, занимаемую объектом.",
            "en": "The delete operator deletes an object created by the new operator, calls the corresponding class destructor and frees up memory occupied by the object."
        }
    },
    "dynamic_cast": {
        "group": 23,
        "label": "dynamic_cast",
        "body": "dynamic_cast",
        "code": [
            {
                "label": "dynamic_cast",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "При использовании оператора dynamic_cast компилятор не производит проверку типа данных, используемого для приведения.",
            "en": "When using the dynamic_cast operator, the compiler does not check the data type used for the conversion."
        }
    },
    "sizeof": {
        "group": 23,
        "label": "sizeof",
        "body": "sizeof",
        "code": [
            {
                "label": "sizeof",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "С помощью операции sizeof можно определить размер памяти которая соответствует идентификатору или типу.",
            "en": "Using the sizeof operation, the memory size corresponding to an identifier or type can be defined."
        }
    },
    "do": {
        "group": 23,
        "label": "do",
        "body": "do",
        "code": [
            {
                "label": "do",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Проверяет условие окончания в конце, после каждого прохода цикла.",
            "en": "Checks the condition of termination at the end, after each loop iteration."
        }
    },
    "default": {
        "group": 13,
        "label": "default",
        "body": "default",
        "code": [
            {
                "label": "default",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Операторы, связанные с меткой default, выполняются, если ни одна из констант в операторах case не равна значению выражения. Вариант default не обязательно должен быть объявлен и не обязательно должен быть последним.",
            "en": "Operators marked by the default label are executed if none of the constants in case operators is equal to the expression value. The default variant should not be necessarily declared and should not be necessarily the last one."
        }
    },
    "case": {
        "group": 13,
        "label": "case",
        "body": "case",
        "code": [
            {
                "label": "case",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ключевое слово.",
            "en": "Keyword."
        }
    },
    "pack": {
        "group": 13,
        "label": "pack",
        "body": "pack",
        "code": [
            {
                "label": "pack",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Cпециальный атрибут pack позволяет задать выравнивание полей структуры или класса.",
            "en": "The special pack attribute allows setting the alignment of structure or class fields."
        }
    },
    "offsetof ": {
        "group": 23,
        "label": "offsetof ",
        "body": "offsetof ",
        "code": [
            {
                "label": "offsetof ",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Это специальная команда, которая непосредственно связана в атрибутом pack. Она позволяет получить смещение члена от начала структуры.",
            "en": "offsetof is a special command directly related to the pack attribute. It allows us to obtain a member offset from the beginning of the structure."
        }
    },
    "operator": {
        "group": 13,
        "label": "operator",
        "body": "operator",
        "code": [
            {
                "label": "operator",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Оператор перегрузки.",
            "en": "Overloading operator"
        }
    },
    "define": {
        "group": 25,
        "label": "define",
        "body": "#define $0",
        "code": [
            {
                "label": "define",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Директива #define подставляет expression вместо всех последующих найденных вхождений identifier в исходном тексте.",
            "en": "The #define directive can be used to assign mnemonic names to constants."
        }
    },
    "undef": {
        "group": 25,
        "label": "undef",
        "body": "#undef $0",
        "code": [
            {
                "label": "undef",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Директива #undef предназначена для отмены макроса, объявленного ранее.",
            "en": "The #undef directive cancels declaration of the macro substitution, defined before."
        }
    },
    "property": {
        "group": 25,
        "label": "property",
        "body": "#property $0",
        "code": [
            {
                "label": "property",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Компилятор запишет в настройках выполняемого модуля объявленные значения.",
            "en": "The compiler will write declared values in the configuration of the module executed."
        }
    },
    "icon": {
        "group": 20,
        "label": "icon",
        "body": "icon",
        "code": [
            {
                "label": "icon",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Путь к файлу с картинкой, которая будет показываться для программы EX5.",
            "en": "Path to the file of an image that will be used as an icon of the EX5 program. Path specification rules are the same as for resources. The property must be specified in the main module with the MQL5 source code. The icon file must be in the ICO format."
        }
    },
    "link": {
        "group": 20,
        "label": "link",
        "body": "link",
        "code": [
            {
                "label": "link",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ссылка на сайт компании-производителя",
            "en": "Link to the company website"
        }
    },
    "copyright": {
        "group": 20,
        "label": "copyright",
        "body": "copyright",
        "code": [
            {
                "label": "copyright",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Название компании-производителя",
            "en": "The company name"
        }
    },
    "version": {
        "group": 20,
        "label": "version",
        "body": "version",
        "code": [
            {
                "label": "version",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Версия программы, не более 31 символа",
            "en": "Program version, maximum 31 characters"
        }
    },
    "description": {
        "group": 20,
        "label": "description",
        "body": "description",
        "code": [
            {
                "label": "description",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Краткое текстовое описание mql5-программы. Может присутствовать несколько description, каждый из которых описывает одну строку текста. Общая длина всех description не может превышать 511 символов с учетом переводов строк",
            "en": "Brief text description of a mql5-program. Several description can be present, each of them describes one line of the text. The total length of all description can not exceed 511 characters including line feed."
        }
    },
    "stacksize": {
        "group": 20,
        "label": "stacksize",
        "body": "stacksize",
        "code": [
            {
                "label": "stacksize",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Указывает размер стека для MQL5 программы, стек достаточного объема требуется в случае выполнения рекурсивных вызовов функций.",
            "en": "MQL5 program stack size. The stack of sufficient size is necessary when executing function recursive calls.\nWhen launching a script or an Expert Advisor on the chart, the stack of at least 8 MB is allocated. In case of indicators, the stack size is always fixed and equal to 1 MB.\nWhen a program is launched in the strategy tester, the stack of 16 MB is always allocated for it."
        }
    },
    "library": {
        "group": 20,
        "label": "library",
        "body": "library",
        "code": [
            {
                "label": "library",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Библиотека; не назначается никакой стартовой функции, функции с модификатором export можно импортировать в других mql5-программах",
            "en": "A library; no start function is assigned, functions with the export modifier can be imported in other mql5-programs"
        }
    },
    "indicator_applied_price": {
        "group": 20,
        "label": "indicator_applied_price",
        "body": "indicator_applied_price",
        "code": [
            {
                "label": "indicator_applied_price",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Задает значение по умолчанию для поля \"Apply to\". Можно задавать одно из значений перечисления ENUM_APPLIED_PRICE. Если свойство не задано, то по умолчанию применяется значение PRICE_CLOSE",
            "en": "Specifies the default value for the \"Apply to\" field. You can specify one of the values of ENUM_APPLIED_PRICE. If the property is not specified, the default value is PRICE_CLOSE"
        }
    },
    "indicator_chart_window": {
        "group": 20,
        "label": "indicator_chart_window",
        "body": "indicator_chart_window",
        "code": [
            {
                "label": "indicator_chart_window",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выводить индикатор в окно графика",
            "en": "Show the indicator in the chart window"
        }
    },
    "indicator_separate_window": {
        "group": 20,
        "label": "indicator_separate_window",
        "body": "indicator_separate_window",
        "code": [
            {
                "label": "indicator_separate_window",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выводить индикатор в отдельное окно",
            "en": "Show the indicator in a separate window"
        }
    },
    "indicator_height": {
        "group": 20,
        "label": "indicator_height",
        "body": "indicator_height",
        "code": [
            {
                "label": "indicator_height",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Фиксированная высота подокна индикатора в пикселях (свойство INDICATOR_HEIGHT)",
            "en": "Fixed height of the indicator subwindow in pixels (property INDICATOR_HEIGHT)"
        }
    },
    "indicator_buffers": {
        "group": 20,
        "label": "indicator_buffers",
        "body": "indicator_buffers",
        "code": [
            {
                "label": "indicator_buffers",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество буферов для расчета индикатора",
            "en": "Number of buffers for indicator calculation"
        }
    },
    "indicator_plots": {
        "group": 20,
        "label": "indicator_plots",
        "body": "indicator_plots",
        "code": [
            {
                "label": "indicator_plots",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Количество графических серий в индикаторе",
            "en": "Number of graphic series in the indicator"
        }
    },
    "indicator_minimum": {
        "group": 20,
        "label": "indicator_minimum",
        "body": "indicator_minimum",
        "code": [
            {
                "label": "indicator_minimum",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Нижнее ограничение шкалы отдельного окна индикатора",
            "en": "The bottom scaling limit for a separate indicator window"
        }
    },
    "indicator_maximum": {
        "group": 20,
        "label": "indicator_maximum",
        "body": "indicator_maximum",
        "code": [
            {
                "label": "indicator_maximum",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Верхнее ограничение шкалы отдельного окна индикатора",
            "en": "The top scaling limit for a separate indicator window"
        }
    },
    "indicator_labelN": {
        "group": 20,
        "label": "indicator_labelN",
        "body": "indicator_labelN",
        "code": [
            {
                "label": "indicator_labelN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Задает метку для N-ой графической серии, отображаемую в окне DataWindow. Для графических серий, требующих несколько индикаторных буферов (DRAW_CANDLES, DRAW_FILLING и другие), имена меток задаются через разделитель ';'.",
            "en": "Sets a label for the N-th graphic series displayed in DataWindow. For graphic series requiring multiple indicator buffers (DRAW_CANDLES, DRAW_FILLING and others), the label names are defined using the separator ';'."
        }
    },
    "indicator_colorN": {
        "group": 20,
        "label": "indicator_colorN",
        "body": "indicator_colorN",
        "code": [
            {
                "label": "indicator_colorN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет для вывода линии N, где N - номер графической серии; нумерация с 1",
            "en": "The color for displaying line N, where N is the number of graphic series; numbering starts from 1"
        }
    },
    "indicator_widthN": {
        "group": 20,
        "label": "indicator_widthN",
        "body": "indicator_widthN",
        "code": [
            {
                "label": "indicator_widthN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Толщина линии в графической серии, где N - номер графической серии; нумерация с 1",
            "en": "Line thickness in graphic series, where N is the number of graphic series; numbering starts from 1"
        }
    },
    "indicator_styleN": {
        "group": 20,
        "label": "indicator_styleN",
        "body": "indicator_styleN",
        "code": [
            {
                "label": "indicator_styleN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Стиль линии в графической серии, указываемый с помощью значения из ENUM_LINE_STYLE. N - номер графической серии, нумерация с 1",
            "en": "Line style in graphic series, specified by the values of ENUM_LINE_STYLE. N is the number of graphic series; numbering starts from 1"
        }
    },
    "indicator_typeN": {
        "group": 20,
        "label": "indicator_typeN",
        "body": "indicator_typeN",
        "code": [
            {
                "label": "indicator_typeN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Вид графического построения, указываемый с помощью значения из ENUM_DRAW_TYPE. N - номер графической серии, нумерация с 1",
            "en": "Type of graphical plotting, specified by the values of ENUM_DRAW_TYPE. N is the number of graphic series; numbering starts from 1"
        }
    },
    "indicator_levelN": {
        "group": 20,
        "label": "indicator_levelN",
        "body": "indicator_levelN",
        "code": [
            {
                "label": "indicator_levelN",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Горизонтальный уровень N в отдельном окне индикатора",
            "en": "Horizontal level of N in a separate indicator window"
        }
    },
    "indicator_levelcolor": {
        "group": 20,
        "label": "indicator_levelcolor",
        "body": "indicator_levelcolor",
        "code": [
            {
                "label": "indicator_levelcolor",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Цвет горизонтальных уровней индикатора",
            "en": "Color of horizontal levels of the indicator"
        }
    },
    "indicator_levelwidth": {
        "group": 20,
        "label": "indicator_levelwidth",
        "body": "indicator_levelwidth",
        "code": [
            {
                "label": "indicator_levelwidth",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Толщина горизонтальных уровней индикатора",
            "en": "Thickness of horizontal levels of the indicator"
        }
    },
    "indicator_levelstyle": {
        "group": 20,
        "label": "indicator_levelstyle",
        "body": "indicator_levelstyle",
        "code": [
            {
                "label": "indicator_levelstyle",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Стиль горизонтальных уровней индикатора",
            "en": "Style of horizontal levels of the indicator"
        }
    },
    "script_show_confirm": {
        "group": 20,
        "label": "script_show_confirm",
        "body": "script_show_confirm",
        "code": [
            {
                "label": "script_show_confirm",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выводить окно подтверждения перед запуском скрипта",
            "en": "Display a confirmation window before running the script"
        }
    },
    "script_show_inputs": {
        "group": 20,
        "label": "script_show_inputs",
        "body": "script_show_inputs",
        "code": [
            {
                "label": "script_show_inputs",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Выводить окно со свойствами перед запуском скрипта и запретить вывод окна подтверждения",
            "en": "Display a window with the properties before running the script and disable this confirmation window"
        }
    },
    "tester_indicator": {
        "group": 20,
        "label": "tester_indicator",
        "body": "tester_indicator",
        "code": [
            {
                "label": "tester_indicator",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя пользовательского индикатора в формате \"имя_индикатора.ex5\"",
            "en": "Name of a custom indicator in the format of \"indicator_name.ex5\". Indicators that require testing are defined automatically from the call of the iCustom() function, if the corresponding parameter is set through a constant string. For all other cases (use of the IndicatorCreate() function or use of a non-constant string in the parameter that sets the indicator name) this property is required"
        }
    },
    "tester_file": {
        "group": 20,
        "label": "tester_file",
        "body": "tester_file",
        "code": [
            {
                "label": "tester_file",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя файла для тестера с указанием расширения, заключенное в двойные кавычки (как константная строка).",
            "en": "File name for a tester with the indication of extension, in double quotes (as a constant string). The specified file will be passed to tester. Input files to be tested, if there are necessary ones, must always be specified."
        }
    },
    "tester_library": {
        "group": 20,
        "label": "tester_library",
        "body": "tester_library",
        "code": [
            {
                "label": "tester_library",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя библиотеки с расширением, заключенное в двойные кавычки. Библиотека может быть как с расширением dll, так и с расширением ex5.",
            "en": "Library name with the extension, in double quotes. A library can have 'dll' or 'ex5' as file extension. Libraries that require testing are defined automatically. However, if any of libraries is used by a custom indicator, this property is required"
        }
    },
    "tester_set": {
        "group": 20,
        "label": "tester_set",
        "body": "tester_set",
        "code": [
            {
                "label": "tester_set",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Имя set-файла со значениями и шагом входных параметров.",
            "en": "Name of the set file with the values ​​and the step of the input parameters. The file is passed to tester before testing and optimization. The file name is specified with an extension and double quotes as a constant string. \n \nIf you specify the EA name and the version number as \"<expert_name>_<number>.set\" in a set file name, then it is automatically added to the parameter versions download menu under the <number> version number. For example, the name \"MACD Sample_4.set\" means that this is a set file for the \"MACD Sample.mq5\" EA with the version number equal to 4.\n \nTo study the format, we recommend that you manually save the test/optimization settings in the strategy tester and then open the set file created in this way."
        }
    },
    "tester_no_cache": {
        "group": 20,
        "label": "tester_no_cache",
        "body": "tester_no_cache",
        "code": [
            {
                "label": "tester_no_cache",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Тестер стратегий при выполнении оптимизации сохраняет все результаты выполненных проходов в кеш оптимизации, в котором для каждого набора входных параметров сохраняется результат тестирования.",
            "en": "When performing optimization, the strategy tester saves all results of executed passes to the optimization cache, in which the test result is saved for each set of the input parameters. This allows using the ready-made results during re-optimization on the same parameters without wasting time on re-calculation. \n \nBut in some tasks (for example, in math calculations), it may be necessary to carry out calculations regardless of the availability of ready-made results in the optimization cache. In this case, the file should include the tester_no_cache property. The test results are still stored in the cache, so that you can see all the data on performed passes in the strategy tester."
        }
    },
    "tester_everytick_calculate": {
        "group": 20,
        "label": "tester_everytick_calculate",
        "body": "tester_everytick_calculate",
        "code": [
            {
                "label": "tester_everytick_calculate",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "В тестере стратегий индикаторы рассчитываются только при обращении к ним за данными – то есть только в тот момент, когда запрашиваются значения индикаторных буферов. Это даёт существенное ускорение при тестировании и оптимизации, если не требуется получать значения индикатора на каждом тике.",
            "en": "In the Strategy Tester, indicators are only calculated when their data are accessed, i.e. when the values of indicator buffers are requested. This provides a significantly faster testing and optimization speed, if you do not need to obtain indicator values on each tick.\n \nBy specifying the tester_everytick_calculate property, you can enable the forced calculation of the indicator on every tick. \n \nIndicators in the Strategy Tester are also forcibly calculated on every tick in the following cases:\n\nwhen testing in the visual mode;\nif the indicator has any of the following functions: EventChartCustom, OnChartEvent, OnTimer;\nif the indicator was created using the compiler with build number below 1916.\n\n \nThis feature only applies in the Strategy Tester, while in the terminal indicators are always calculated on each received tick."
        }
    },
    "optimization_chart_mode": {
        "group": 20,
        "label": "optimization_chart_mode",
        "body": "optimization_chart_mode",
        "code": [
            {
                "label": "optimization_chart_mode",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Указывает тип графика и имена двух входных параметров, которые будут использоваться для визуализации результатов оптимизации.",
            "en": "Specifies the chart type and the names of two input parameters which will be used for the visualization of optimization results."
        }
    },
    "resource": {
        "group": 25,
        "label": "resource",
        "body": "#resource $0",
        "code": [
            {
                "label": "resource",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Команда #resource указывает компилятору, что ресурс по указанному пути путь_к_файлу_ресурса нужно включить в исполняемый файл EX4/EX5.",
            "en": "The #resource command tells the compiler that the resource at the specified path path_to_resource_file should be included into the executable EX4/EX5 file."
        }
    },
    "include": {
        "group": 25,
        "label": "include",
        "body": "#include $0",
        "code": [
            {
                "label": "include",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Указывает препроцессору включить содержимое указанного файла в точку, где отображается директива.",
            "en": "Tells the preprocessor to include the contents of the specified file at the point where the directive is displayed."
        }
    },
    "import": {
        "group": 25,
        "label": "import",
        "body": "#import \"$0file_name\"\n\tfunc1 define;\n\tfunc1 define;\n#import",
        "code": [
            {
                "label": "import",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Импорт функций осуществляется из откомпилированных модулей MQL5 (файлы *.ex5) и из модулей операционной системы (файлы *.dll).",
            "en": "Functions are imported from compiled MQL5 modules (*.ex5 files) and from operating system modules (*.dll files)."
        }
    },
    "ifdef": {
        "group": 25,
        "label": "ifdef",
        "body": "#ifdef identifier\n\t$0\n#endif",
        "code": [
            {
                "label": "ifdef",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Код будет компилироваться, если identifier уже был определен для препроцессора в команде #define.",
            "en": "The code is compiled if the identifier has already been defined for the preprocessor in #define directive."
        }
    },
    "ifndef": {
        "group": 25,
        "label": "ifndef",
        "body": "#ifndef identifier\n\t$0\n#endif",
        "code": [
            {
                "label": "ifndef",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Код будет компилироваться, если identifier в данный момент не определен командой препроцессора #define.",
            "en": "The code is compiled if the identifier is not currently defined by #define preprocessor directive."
        }
    },
    "endif": {
        "group": 25,
        "label": "endif",
        "body": "#endif",
        "code": [
            {
                "label": "endif",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "",
            "en": ""
        }
    },
    "this": {
        "group": 13,
        "label": "this",
        "body": "this",
        "code": [
            {
                "label": "this",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Зарезервированное слово this предназначено для получения ссылки объекта на самого себя, доступной внутри методов класса или структуры.",
            "en": "The reserved word this is intended for obtaining the reference of the object to itself, which is available inside class or structure methods."
        }
    },
    "true": {
        "group": 13,
        "label": "true",
        "body": "true",
        "code": [
            {
                "label": "true",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "<bool> 'Истина', числовое представление = '1'",
            "en": "<bool> 'True', numeric representation = '1'"
        }
    },
    "false": {
        "group": 13,
        "label": "false",
        "body": "false",
        "code": [
            {
                "label": "false",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "<bool> 'Ложь', числовое представление = '0'",
            "en": "<bool> 'False', numeric representation = '0'"
        }
    },
    "template": {
        "group": 13,
        "label": "template",
        "body": "template",
        "code": [
            {
                "label": "template",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ключевое слово.",
            "en": "Keyword."
        }
    },
    "group": {
        "group": 13,
        "label": "group",
        "body": "group",
        "code": [
            {
                "label": "group",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ключевое слово.",
            "en": "Keyword."
        }
    },
    "namespace": {
        "group": 13,
        "label": "namespace",
        "body": "namespace",
        "code": [
            {
                "label": "namespace",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Пространство имен — это специально объявленная область, в пределах которой определяются различные идентификаторы: переменные, функции, классы и и т. д.",
            "en": "A namespace is a specially declared area, within which various IDs are defined: variables, functions, classes, etc."
        }
    },
    "extern": {
        "group": 13,
        "label": "extern",
        "body": "extern",
        "code": [
            {
                "label": "extern",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Ключевое слово extern используется, чтобы объявить идентификаторы переменных как идентификаторы статического класса памяти с глобальным временем жизни.",
            "en": "The extern keyword is used for declaring variable identifiers as identifiers of the static storage class with global lifetime."
        }
    },
    "input": {
        "group": 13,
        "label": "input",
        "body": "input",
        "code": [
            {
                "label": "input",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Класс памяти input определяет внешнюю переменную. Модификатор input указывается перед типом данных.",
            "en": "The input storage class defines the external variable. The input modifier is indicated before the data type."
        }
    },
    "static": {
        "group": 13,
        "label": "static",
        "body": "static",
        "code": [
            {
                "label": "static",
                "description": {
                    "ru": "",
                    "en": ""
                }
            }
        ],
        "pr": 0,
        "hm": 0,
        "parameters": {
            "ru": [],
            "en": []
        },
        "description": {
            "ru": "Класс памяти static определяет статическую переменную. Модификатор static указывается перед типом данных.",
            "en": "The storage class of static defines a static variable. The static modifier is indicated before the data type."
        }
    }
}